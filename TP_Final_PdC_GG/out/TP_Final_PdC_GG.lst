
proyectos_cese/TP_Final_PdC_GG/out/TP_Final_PdC_GG.elf:     file format elf32-littlearm
proyectos_cese/TP_Final_PdC_GG/out/TP_Final_PdC_GG.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001025

Program Header:
0x70000001 off    0x00016240 vaddr 0x1a006240 paddr 0x1a006240 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c78 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006248 memsz 0x00006248 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006248 align 2**16
         filesz 0x0000012c memsz 0x0000012c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000623c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  10000000  1a006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
  6 .bss          00002b4c  1000012c  1000012c  0000012c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 11 .init_array   00000004  1a00623c  1a00623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006240  1a006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0002012c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 18 .noinit       00000000  10002c78  10002c78  0002012c  2**2
                  CONTENTS
 19 .debug_info   0003a73d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006ecc  00000000  00000000  0005a869  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00001198  00000000  00000000  00061735  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001260  00000000  00000000  000628cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00013061  00000000  00000000  00063b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00019b5d  00000000  00000000  00076b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0003161e  00000000  00000000  000906eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000c1d09  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000c1d88  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00003338  00000000  00000000  000c1dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    0000cf02  00000000  00000000  000c50f8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000012c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00623c l    d  .init_array	00000000 .init_array
1a006240 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c78 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00425c l     F .text	000000a4 uartProcessIRQ
10002b84 l     O .bss	00000004 rxIsrCallbackUART0
10002b88 l     O .bss	00000004 rxIsrCallbackUART2
10002b8c l     O .bss	00000004 rxIsrCallbackUART3
10002b90 l     O .bss	00000004 txIsrCallbackUART0
10002b94 l     O .bss	00000004 txIsrCallbackUART2
10002b98 l     O .bss	00000004 txIsrCallbackUART3
1a006028 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 TP_Final_PdC_GG.c
00000000 l    df *ABS*	00000000 queuesAndSem.c
00000000 l    df *ABS*	00000000 MCP4725.c
1000012c l     O .bss	00000004 ret.13696
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 UARTInterrupt.c
00000000 l    df *ABS*	00000000 PruebaDrivers.c
00000000 l    df *ABS*	00000000 ADS1115.c
10000130 l     O .bss	00000004 ret.13697
10000134 l     O .bss	00000004 ret.13709
00000000 l    df *ABS*	00000000 system.c
10000138 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a001178 l     F .text	00000064 prvHeapInit
10000140 l     O .bss	00002000 ucHeap
1a0011dc l     F .text	00000058 prvInsertBlockIntoFreeList
1000013c l     O .bss	00000004 pxEnd
10002140 l     O .bss	00000004 xBlockAllocatedBit
10002144 l     O .bss	00000004 xFreeBytesRemaining
10002148 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
1000214c l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0013c0 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a0013d2 l     F .text	0000001e prvIsQueueFull
1a0013f0 l     F .text	0000001a prvIsQueueEmpty
1a00140a l     F .text	00000076 prvCopyDataToQueue
1a001480 l     F .text	00000024 prvCopyDataFromQueue
1a0014a4 l     F .text	0000006e prvUnlockQueue
1a001598 l     F .text	00000022 prvInitialiseNewQueue
1a001854 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002154 l     O .bss	00000168 uxIdleTaskStack.10728
100022bc l     O .bss	000005a0 uxTimerTaskStack.10735
1000285c l     O .bss	00000060 xIdleTaskTCB.10727
100028bc l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001e10 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001e3c l     F .text	00000092 prvInitialiseNewTask
1a001ed0 l     F .text	00000068 prvInitialiseTaskLists
1a001f38 l     F .text	000000ac prvAddNewTaskToReadyList
1a001fe4 l     F .text	00000038 prvDeleteTCB
1a00201c l     F .text	0000004c prvCheckTasksWaitingTermination
1a002068 l     F .text	00000028 prvIdleTask
1a002090 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002920 l     O .bss	00000004 pxDelayedTaskList
10002924 l     O .bss	00000004 pxOverflowDelayedTaskList
10002928 l     O .bss	0000008c pxReadyTasksLists
100029b4 l     O .bss	00000004 uxCurrentNumberOfTasks
100029b8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029bc l     O .bss	00000004 uxPendedTicks
100029c0 l     O .bss	00000004 uxSchedulerSuspended
100029c4 l     O .bss	00000004 uxTaskNumber
100029c8 l     O .bss	00000004 uxTopReadyPriority
100029cc l     O .bss	00000014 xDelayedTaskList1
100029e0 l     O .bss	00000014 xDelayedTaskList2
100029f4 l     O .bss	00000004 xNextTaskUnblockTime
100029f8 l     O .bss	00000004 xNumOfOverflows
100029fc l     O .bss	00000014 xPendingReadyList
10002a10 l     O .bss	00000004 xSchedulerRunning
10002a14 l     O .bss	00000014 xSuspendedTaskList
10002a28 l     O .bss	00000014 xTasksWaitingTermination
10002a3c l     O .bss	00000004 xTickCount
10002a40 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002a24 l     F .text	00000020 prvGetNextExpireTime
1a002a44 l     F .text	00000048 prvInsertTimerInActiveList
1a002a8c l     F .text	00000070 prvCheckForValidListAndQueue
1a002e40 l     F .text	00000016 prvTimerTask
1a002bcc l     F .text	00000078 prvSwitchTimerLists
1a002c44 l     F .text	0000002c prvSampleTimeNow
1a002c70 l     F .text	00000060 prvProcessExpiredTimer
1a002cd0 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002d44 l     F .text	000000fc prvProcessReceivedCommands
10002a44 l     O .bss	00000004 pxCurrentTimerList
10002a48 l     O .bss	00000004 pxOverflowTimerList
10002a4c l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002aec l     O .bss	00000014 xActiveTimerList1
10002b00 l     O .bss	00000014 xActiveTimerList2
10002b14 l     O .bss	00000004 xLastTime.11777
10002b18 l     O .bss	00000050 xStaticTimerQueue.11827
10002b68 l     O .bss	00000004 xTimerQueue
10002b6c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002e58 l     F .text	00000040 prvTaskExitError
1a002e98 l     F .text	00000022 prvPortStartFirstTask
1a002ec0 l     F .text	0000000e vPortEnableVFP
1a002f20 l       .text	00000000 pxCurrentTCBConst2
1a003000 l       .text	00000000 pxCurrentTCBConst
10002b70 l     O .bss	00000001 ucMaxSysCallPriority
10002b74 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0031f4 l     F .text	00000044 Board_LED_Init
1a003238 l     F .text	00000040 Board_TEC_Init
1a003278 l     F .text	00000040 Board_GPIO_Init
1a0032b8 l     F .text	00000030 Board_ADC_Init
1a0032e8 l     F .text	00000038 Board_SPI_Init
1a003320 l     F .text	00000024 Board_I2C_Init
1a005eb4 l     O .text	00000008 GpioButtons
1a005ebc l     O .text	0000000c GpioLeds
1a005ec8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005ee0 l     O .text	00000004 InitClkStates
1a005ee4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0036e0 l     F .text	0000002c Chip_UART_GetIndex
1a005f58 l     O .text	00000008 UART_BClock
1a005f60 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003888 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00389c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003950 l     F .text	000000a4 pll_calc_divs
1a0039f4 l     F .text	0000010c pll_get_frac
1a003b00 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003d74 l     F .text	00000022 Chip_Clock_GetDivRate
10002b7c l     O .bss	00000008 audio_usb_pll_freq
1a005f74 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005fe0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004154 l     F .text	00000014 Chip_SSP_GetClockIndex
1a004168 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a004508 l     F .text	00000030 i2cHardwareInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a004546 l     F .text	00000002 errorOcurred
1a004548 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004654 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b9c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00498c l     F .text	00000010 clearInterrupt
1a00499c l     F .text	0000005c serveInterrupt
10000080 l     O .data	00000048 ultrasonicSensors
1a0061a0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004f18 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a005664 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000cc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006240 l       .init_array	00000000 __init_array_end
1a00623c l       .bss_RAM5	00000000 __preinit_array_end
1a00623c l       .init_array	00000000 __init_array_start
1a00623c l       .bss_RAM5	00000000 __preinit_array_start
1a003b98 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000928 g     F .text	00000044 uartUsbReceiveCallback
1a0010c4 g     F .text	00000012 _isatty_r
1a004144 g     F .text	0000000e Chip_I2CM_Xfer
1a00529c g     F .text	000000b8 _puts_r
1a0045cc g     F .text	00000044 TIMER2_IRQHandler
1a004434 g     F .text	00000014 uartRxRead
1a004538 g     F .text	0000000e i2cInit
1a0010d6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a000694 g     F .text	000000f0 prueba
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0048fc g     F .text	00000090 int64ToString
1a002f68 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a00526c g     F .text	00000030 printf
1a0033da g     F .text	00000008 __stdio_init
1a000604 g     F .text	00000090 interprete
1a0053be g     F .text	00000024 __sseek
1a004f98 g     F .text	00000060 __sinit
1a005418 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001c98 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0034b4 g     F .text	00000120 handleMasterXferState
1a004f6c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a003942 g     F .text	0000000c Chip_ADC_SetResolution
1a005662 g     F .text	00000002 __malloc_unlock
1a003004 g     F .text	0000002c SysTick_Handler
1a003760 g     F .text	00000040 Chip_UART_SetBaud
1a001020  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00337c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002fa0 g     F .text	00000064 PendSV_Handler
1a001882 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a006248 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000291c g     O .bss	00000004 pxCurrentTCB
1a0010ba g     F .text	0000000a _fstat_r
53ff686a g       *ABS*	00000000 __valid_user_code_checksum
1a006248 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00271c g     F .text	00000018 vTaskInternalSetTimeOutState
1a000f0c g     F .text	0000008c ads1115Init
1a004610 g     F .text	00000044 TIMER3_IRQHandler
1a003e16 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003068 g     F .text	00000110 xPortStartScheduler
1a0050f4 g     F .text	00000016 memcpy
1a002628 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004f60 g     F .text	0000000c _cleanup_r
1a003030  w    F .text	00000038 vPortSetupTimerInterrupt
1a003660 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004ab8 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c78 g       .noinit	00000000 _noinit
1a005354 g     F .text	00000010 puts
10002ba8 g     O .bss	00000004 DriversTestsQueue
1a001350 g     F .text	00000070 vPortFree
10002c70 g     O .bss	00000004 SystemCoreClock
1a00370c g     F .text	00000054 Chip_UART_Init
1a001aa8 g     F .text	0000019c xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a003178 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003e94 g     F .text	0000004c Chip_Clock_GetRate
1a000814 g     F .text	00000114 tareaADC
1a001d06 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00341c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003630 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a004ae8 g     F .text	000002cc .hidden __udivmoddi4
1a001158 g     F .text	00000020 _sbrk_r
1a005eb0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
10002bac g     O .bss	00000004 DACQueue
1a0003c8 g     F .text	00000140 queuesAndSemInit
1a0010e0 g     F .text	0000004e _read_r
1a001d00 g     F .text	00000006 vListInitialiseItem
10002bd4 g     O .bss	00000050 msg
1a004a02 g     F .text	0000000a GPIO1_IRQHandler
1a001950 g     F .text	00000158 xQueueReceive
10002c30 g     O .bss	00000040 xQueueRegistry
1a001d94 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a006240 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a006204 g     O .text	00000004 _global_impure_ptr
1a0050ac g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001234 g     F .text	0000011c pvPortMalloc
1a003398 g     F .text	00000030 Board_Init
1a0010ae  w    F .text	00000002 _init
10002bb0 g     O .bss	00000004 DACWriteSem
1a001cea g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0022a4 g     F .text	0000000c xTaskGetTickCount
1a0016d8 g     F .text	0000017c xQueueGenericSend
10002bb4 g     O .bss	00000008 ADCReadSemCount
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c78 g       .bss	00000000 _ebss
1a00454c g     F .text	00000040 TIMER0_IRQHandler
1a001024 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0035f8 g     F .text	00000038 Chip_I2C_SetClockRate
1a002898 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003b4c g     F .text	0000004c Chip_Clock_EnableCrystal
10002c24 g     O .bss	0000000a msg2
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002690 g     F .text	0000008c xTaskRemoveFromEventList
1a001dd8  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0053ea g     F .text	0000001e strcat
1a00458c g     F .text	00000040 TIMER1_IRQHandler
1a0061a4 g     O .text	00000020 __sf_fake_stderr
1a0035d4 g     F .text	00000024 Chip_I2C_Init
1a000f98 g     F .text	00000088 ads1115ReadRegister
1a0044f2 g     F .text	0000000a UART2_IRQHandler
1a003d08 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006070 g     O .text	000000e6 gpioPinsInit
1a004300 g     F .text	00000090 uartInterrupt
1a001dac  w    F .text	0000002c vAssertCalled
1a002a08 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0044d8 g     F .text	0000001a uartWriteByte
1a004180 g     F .text	00000012 Chip_SSP_SetClockRate
1a005692 g     F .text	00000024 __sfputs_r
1a004a0c g     F .text	0000000a GPIO2_IRQHandler
1a00096c g     F .text	000005a0 FSMPruebaDrivers
1a005c00 g     F .text	00000000 memchr
1a002734 g     F .text	00000080 xTaskCheckForTimeOut
1a00511c g     F .text	0000009c _free_r
1a003df0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0027e0 g     F .text	000000b8 xTaskPriorityInherit
1000012c g       .bss	00000000 _bss
1a003910 g     F .text	00000032 Chip_ADC_SetSampleRate
10002b78 g     O .bss	00000004 freeRtosInterruptCallback
1a002294 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a004192 g     F .text	0000003e Chip_SSP_SetBitRate
1a001d52 g     F .text	00000028 uxListRemove
1a004152 g     F .text	00000002 Chip_GPIO_Init
1a005edc g     O .text	00000004 OscRateIn
1a00445c g     F .text	0000007c uartInit
1a000784 g     F .text	00000090 tareaDAC
1a002128 g     F .text	00000072 xTaskCreateStatic
10002c78 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002560 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0015ba g     F .text	00000090 xQueueGenericCreateStatic
1a002658 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a0010b0 g     F .text	0000000a _close_r
1a004688 g     F .text	00000194 gpioInit
1a001d7c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002b60 g     F .text	0000006c xTimerGenericCommand
1a0054bc g     F .text	000000dc __swsetup_r
1a001df4  w    F .text	0000001c vApplicationStackOverflowHook
1a004db4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004ff8 g     F .text	00000078 __sfp
1a005364 g     F .text	00000022 __sread
1a004874 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a005660 g     F .text	00000002 __malloc_lock
1a003368 g     F .text	00000014 Board_UARTPutChar
1a000544 g     F .text	0000009c mcp4725NormalSend
1a003690 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004ec4 g     F .text	00000054 _fflush_r
1a0061c4 g     O .text	00000020 __sf_fake_stdin
1a003bb4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00510a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000c8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001d1e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002f00 g     F .text	00000024 SVC_Handler
1a0053e2 g     F .text	00000008 __sclose
1a002afc g     F .text	00000064 xTimerCreateTimerTask
1a0051b8 g     F .text	000000b4 _malloc_r
1a00441c g     F .text	00000018 uartTxReady
1a000508 g     F .text	0000003a sendStringToQueue
1a0024bc g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003e24 g     F .text	0000003c Chip_Clock_EnableOpts
1a0033d2 g     F .text	00000008 __stdio_getchar
1a00164a g     F .text	0000004e xQueueGenericCreate
1a003bd0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
10002bbc g     O .bss	00000004 OutQueueSem
1a001698 g     F .text	00000040 xQueueCreateCountingSemaphore
1a003c88 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a004208 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00481c g     F .text	00000056 gpioWrite
1a0010ac  w    F .text	00000002 _fini
1a00526c g     F .text	00000030 iprintf
1a0023c8 g     F .text	000000f4 xTaskResumeAll
1a001c44 g     F .text	0000002a uxQueueSpacesAvailable
1a002200 g     F .text	00000094 vTaskStartScheduler
1a0038d0 g     F .text	00000040 Chip_ADC_Init
10002c74 g     O .bss	00000004 g_pUsbApi
1a0033e4 g     F .text	00000038 Board_SetupMuxing
1a0037a0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00112e g     F .text	00000028 _write_r
10002bc0 g     O .bss	00000008 ADCQueue
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0058e4 g     F .text	000000ea _printf_common
100000c8 g     O .data	00000004 _impure_ptr
1a004db8 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004448 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a004048 g     F .text	000000fc Chip_I2CM_XferHandler
10002bc8 g     O .bss	00000004 UARTInQueue
10000000 g       .data	00000000 _data
1a0027b4 g     F .text	0000000c vTaskMissedYield
10002c78 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0041d0 g     F .text	00000038 Chip_SSP_Init
1a0036a8 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a001c70 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0022b0 g     F .text	00000118 xTaskIncrementTick
1a005598 g     F .text	00000048 __swhatbuf_r
1a0031d4 g     F .text	00000020 DAC_IRQHandler
1a003344 g     F .text	00000024 Board_Debug_Init
1a0033c8 g     F .text	0000000a __stdio_putchar
1a001514 g     F .text	00000084 xQueueGenericReset
1000012c g       .data	00000000 _edata
1a003494 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0005e0 g     F .text	00000024 salidaUart
1a00219a g     F .text	00000066 xTaskCreate
1a003ef4 g     F .text	00000154 Chip_SetupCoreClock
1a005386 g     F .text	00000038 __swrite
1a0049f8 g     F .text	0000000a GPIO0_IRQHandler
1a0056b8 g     F .text	0000022c _vfiprintf_r
10002bcc g     O .bss	00000004 I2CMutx
1a000000 g     O .text	00000040 g_pfnVectors
10002bd0 g     O .bss	00000004 UARTOutQueue
1a005070 g     F .text	0000003c _fwalk_reent
1a003ee0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0061e4 g     O .text	00000020 __sf_fake_stdout
1a0027c0 g     F .text	00000020 xTaskGetSchedulerState
1a002948 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a004db4  w    F .text	00000002 .hidden __aeabi_idiv0
1a004390 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a0055e0 g     F .text	00000080 __smakebuf_r
1a005408 g     F .text	00000010 strlen
1a002ed4 g     F .text	0000002c pxPortInitialiseStack
1a0059d0 g     F .text	00000224 _printf_i
1a003e60 g     F .text	00000034 Chip_Clock_Enable
1a0044fc g     F .text	0000000a UART3_IRQHandler
10002ba4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004890 g     F .text	0000006c boardInit
1a002f24 g     F .text	00000044 vPortEnterCritical
10002ba0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0056b8 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a004a18 g     F .text	00000000 .hidden __aeabi_ldivmod
1a00186c g     F .text	00000016 xQueueCreateMutex
1a003d98 g     F .text	00000058 Chip_Clock_SetBaseClock
1a004240 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003488 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 25 10 00 1a 79 01 00 1a 7b 01 00 1a     ....%...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 6a 68 ff 53     }...........jh.S
	...
1a00002c:	01 2f 00 1a 85 01 00 1a 00 00 00 00 a1 2f 00 1a     ./.........../..
1a00003c:	05 30 00 1a                                         .0..

1a000040 <g_pfnVendorVectors>:
1a000040:	d5 31 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .1..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	75 48 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     uH..............
1a000070:	4d 45 00 1a 8d 45 00 1a cd 45 00 1a 11 46 00 1a     ME...E...E...F..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a f3 44 00 1a fd 44 00 1a     .........D...D..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	f9 49 00 1a 03 4a 00 1a 0d 4a 00 1a bb 01 00 1a     .I...J...J......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006248 	.word	0x1a006248
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000012c 	.word	0x0000012c
1a000120:	1a006248 	.word	0x1a006248
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006248 	.word	0x1a006248
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006248 	.word	0x1a006248
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006248 	.word	0x1a006248
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000012c 	.word	0x1000012c
1a000154:	00002b4c 	.word	0x00002b4c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f004 f84c 	bl	1a00425c <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
   boardInit();
1a000304:	f004 fac4 	bl	1a004890 <boardInit>
   gpioInit( GPIO1, GPIO_OUTPUT );
1a000308:	2101      	movs	r1, #1
1a00030a:	200f      	movs	r0, #15
1a00030c:	f004 f9bc 	bl	1a004688 <gpioInit>
   /* Inicializar la UART_USB junto con las interrupciones de Rx */
   uartConfig(UART_USB, 115200);
1a000310:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000314:	2003      	movs	r0, #3
1a000316:	f004 f8a1 	bl	1a00445c <uartInit>
   // Seteo un callback al evento de recepcion y habilito su interrupcion
   uartCallbackSet(UART_USB, UART_RECEIVE, uartUsbReceiveCallback, NULL);
1a00031a:	2300      	movs	r3, #0
1a00031c:	4a1e      	ldr	r2, [pc, #120]	; (1a000398 <main+0x98>)
1a00031e:	4619      	mov	r1, r3
1a000320:	2003      	movs	r0, #3
1a000322:	f004 f835 	bl	1a004390 <uartCallbackSet>
   // Habilito todas las interrupciones de UART_USB
   uartInterrupt(UART_USB, TRUE);
1a000326:	2101      	movs	r1, #1
1a000328:	2003      	movs	r0, #3
1a00032a:	f003 ffe9 	bl	1a004300 <uartInterrupt>

   i2cInit(I2C0, 800000); //Configuro el I2C para funcionar a 800khz
1a00032e:	491b      	ldr	r1, [pc, #108]	; (1a00039c <main+0x9c>)
1a000330:	2000      	movs	r0, #0
1a000332:	f004 f901 	bl	1a004538 <i2cInit>
   // Create a task in freeRTOS with dynamic memory
   xTaskCreate(
1a000336:	2400      	movs	r4, #0
1a000338:	9401      	str	r4, [sp, #4]
1a00033a:	2501      	movs	r5, #1
1a00033c:	9500      	str	r5, [sp, #0]
1a00033e:	4623      	mov	r3, r4
1a000340:	22b4      	movs	r2, #180	; 0xb4
1a000342:	4917      	ldr	r1, [pc, #92]	; (1a0003a0 <main+0xa0>)
1a000344:	4817      	ldr	r0, [pc, #92]	; (1a0003a4 <main+0xa4>)
1a000346:	f001 ff28 	bl	1a00219a <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );
   xTaskCreate(
1a00034a:	9401      	str	r4, [sp, #4]
1a00034c:	9500      	str	r5, [sp, #0]
1a00034e:	4623      	mov	r3, r4
1a000350:	22b4      	movs	r2, #180	; 0xb4
1a000352:	4915      	ldr	r1, [pc, #84]	; (1a0003a8 <main+0xa8>)
1a000354:	4815      	ldr	r0, [pc, #84]	; (1a0003ac <main+0xac>)
1a000356:	f001 ff20 	bl	1a00219a <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );
   xTaskCreate(
1a00035a:	9401      	str	r4, [sp, #4]
1a00035c:	9500      	str	r5, [sp, #0]
1a00035e:	4623      	mov	r3, r4
1a000360:	22b4      	movs	r2, #180	; 0xb4
1a000362:	4913      	ldr	r1, [pc, #76]	; (1a0003b0 <main+0xb0>)
1a000364:	4813      	ldr	r0, [pc, #76]	; (1a0003b4 <main+0xb4>)
1a000366:	f001 ff18 	bl	1a00219a <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );
   xTaskCreate(
1a00036a:	9401      	str	r4, [sp, #4]
1a00036c:	2502      	movs	r5, #2
1a00036e:	9500      	str	r5, [sp, #0]
1a000370:	4623      	mov	r3, r4
1a000372:	22b4      	movs	r2, #180	; 0xb4
1a000374:	4910      	ldr	r1, [pc, #64]	; (1a0003b8 <main+0xb8>)
1a000376:	4811      	ldr	r0, [pc, #68]	; (1a0003bc <main+0xbc>)
1a000378:	f001 ff0f 	bl	1a00219a <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+2,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );
   xTaskCreate(
1a00037c:	9401      	str	r4, [sp, #4]
1a00037e:	9500      	str	r5, [sp, #0]
1a000380:	4623      	mov	r3, r4
1a000382:	22b4      	movs	r2, #180	; 0xb4
1a000384:	490e      	ldr	r1, [pc, #56]	; (1a0003c0 <main+0xc0>)
1a000386:	480f      	ldr	r0, [pc, #60]	; (1a0003c4 <main+0xc4>)
1a000388:	f001 ff07 	bl	1a00219a <xTaskCreate>
      tskIDLE_PRIORITY+2,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );

   //Creo colas y semaforos
   queuesAndSemInit();
1a00038c:	f000 f81c 	bl	1a0003c8 <queuesAndSemInit>

   vTaskStartScheduler(); // Initialize scheduler
1a000390:	f001 ff36 	bl	1a002200 <vTaskStartScheduler>
1a000394:	e7fe      	b.n	1a000394 <main+0x94>
1a000396:	bf00      	nop
1a000398:	1a000929 	.word	0x1a000929
1a00039c:	000c3500 	.word	0x000c3500
1a0003a0:	1a005ca0 	.word	0x1a005ca0
1a0003a4:	1a0005e1 	.word	0x1a0005e1
1a0003a8:	1a005cac 	.word	0x1a005cac
1a0003ac:	1a000605 	.word	0x1a000605
1a0003b0:	1a005cb8 	.word	0x1a005cb8
1a0003b4:	1a000695 	.word	0x1a000695
1a0003b8:	1a005cc0 	.word	0x1a005cc0
1a0003bc:	1a000785 	.word	0x1a000785
1a0003c0:	1a005cc4 	.word	0x1a005cc4
1a0003c4:	1a000815 	.word	0x1a000815

1a0003c8 <queuesAndSemInit>:
#include "sapi.h"
#include "queuesAndSem.h"


void queuesAndSemInit(void)
{
1a0003c8:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	uint8_t j=1; //variable auxiliar para chequear la correcta creacion de semaforos y colas

	/*----Creacion de Colas----*/

	UARTOutQueue=xQueueCreate( 100, sizeof(char) ); //creo la cola de salida para la UART de 100 char
1a0003ca:	2200      	movs	r2, #0
1a0003cc:	2101      	movs	r1, #1
1a0003ce:	2064      	movs	r0, #100	; 0x64
1a0003d0:	f001 f93b 	bl	1a00164a <xQueueGenericCreate>
1a0003d4:	4b41      	ldr	r3, [pc, #260]	; (1a0004dc <queuesAndSemInit+0x114>)
1a0003d6:	6018      	str	r0, [r3, #0]

	UARTInQueue=xQueueCreate( 200, sizeof(char) ); //creo la cola de entrada para la UART de 200 char
1a0003d8:	2200      	movs	r2, #0
1a0003da:	2101      	movs	r1, #1
1a0003dc:	20c8      	movs	r0, #200	; 0xc8
1a0003de:	f001 f934 	bl	1a00164a <xQueueGenericCreate>
1a0003e2:	4b3f      	ldr	r3, [pc, #252]	; (1a0004e0 <queuesAndSemInit+0x118>)
1a0003e4:	6018      	str	r0, [r3, #0]
	uint8_t j=1; //variable auxiliar para chequear la correcta creacion de semaforos y colas
1a0003e6:	2501      	movs	r5, #1

	for (i=0;i<ADCNUM;i++){
1a0003e8:	2400      	movs	r4, #0
1a0003ea:	e001      	b.n	1a0003f0 <queuesAndSemInit+0x28>
1a0003ec:	3401      	adds	r4, #1
1a0003ee:	b2e4      	uxtb	r4, r4
1a0003f0:	2c01      	cmp	r4, #1
1a0003f2:	d80b      	bhi.n	1a00040c <queuesAndSemInit+0x44>
		ADCQueue[i]=xQueueCreate( 20, sizeof(uint16_t)); //creo el vector de colas para los canales ADC
1a0003f4:	2200      	movs	r2, #0
1a0003f6:	2102      	movs	r1, #2
1a0003f8:	2014      	movs	r0, #20
1a0003fa:	f001 f926 	bl	1a00164a <xQueueGenericCreate>
1a0003fe:	4b39      	ldr	r3, [pc, #228]	; (1a0004e4 <queuesAndSemInit+0x11c>)
1a000400:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (ADCQueue[i]==NULL)
1a000404:	2800      	cmp	r0, #0
1a000406:	d1f1      	bne.n	1a0003ec <queuesAndSemInit+0x24>
			j=0;
1a000408:	2500      	movs	r5, #0
1a00040a:	e7ef      	b.n	1a0003ec <queuesAndSemInit+0x24>
	}

	for (i=0;i<DACNUM;i++){
1a00040c:	2400      	movs	r4, #0
1a00040e:	b1ec      	cbz	r4, 1a00044c <queuesAndSemInit+0x84>
		DACQueue[i]=xQueueCreate( MAXADCSAMPLES, sizeof(uint16_t)); //creo el vector de colas para los canales DAC
		if (DACQueue[i]==NULL)
			j=0;
	}
	DriversTestsQueue = xQueueCreate(DRIVER_TEST_QUEUE_SIZE , sizeof(FSMReg_t)); //cola que marca el estado de la maquina de estados de prueba de driver.
1a000410:	2200      	movs	r2, #0
1a000412:	2128      	movs	r1, #40	; 0x28
1a000414:	2007      	movs	r0, #7
1a000416:	f001 f918 	bl	1a00164a <xQueueGenericCreate>
1a00041a:	4b33      	ldr	r3, [pc, #204]	; (1a0004e8 <queuesAndSemInit+0x120>)
1a00041c:	6018      	str	r0, [r3, #0]

	if((j==0)||(UARTOutQueue==NULL)||(UARTInQueue==NULL)||(DriversTestsQueue==NULL))//chequeo que se hallan creado bien las colas
1a00041e:	b135      	cbz	r5, 1a00042e <queuesAndSemInit+0x66>
1a000420:	4b2e      	ldr	r3, [pc, #184]	; (1a0004dc <queuesAndSemInit+0x114>)
1a000422:	681b      	ldr	r3, [r3, #0]
1a000424:	b11b      	cbz	r3, 1a00042e <queuesAndSemInit+0x66>
1a000426:	4b2e      	ldr	r3, [pc, #184]	; (1a0004e0 <queuesAndSemInit+0x118>)
1a000428:	681b      	ldr	r3, [r3, #0]
1a00042a:	b103      	cbz	r3, 1a00042e <queuesAndSemInit+0x66>
1a00042c:	b910      	cbnz	r0, 1a000434 <queuesAndSemInit+0x6c>
	{
		printf ("Error al crear colas");
1a00042e:	482f      	ldr	r0, [pc, #188]	; (1a0004ec <queuesAndSemInit+0x124>)
1a000430:	f004 ff1c 	bl	1a00526c <iprintf>
	}

	/*----Creacion de Semaforos----*/

	j=1;
	OutQueueSem = xSemaphoreCreateBinary();		//Semaforo de cola de salida para la UART
1a000434:	2203      	movs	r2, #3
1a000436:	2100      	movs	r1, #0
1a000438:	2001      	movs	r0, #1
1a00043a:	f001 f906 	bl	1a00164a <xQueueGenericCreate>
1a00043e:	4b2c      	ldr	r3, [pc, #176]	; (1a0004f0 <queuesAndSemInit+0x128>)
1a000440:	6018      	str	r0, [r3, #0]
	j=1;
1a000442:	2501      	movs	r5, #1
	for (i=0;i<DACNUM;i++){
1a000444:	2400      	movs	r4, #0
1a000446:	b17c      	cbz	r4, 1a000468 <queuesAndSemInit+0xa0>
		DACWriteSem[i]=xSemaphoreCreateBinary();	//creo los semaforos que van a indicar cuando escribir
		if(DACWriteSem[i]==NULL)					//una muestra en los DAC
			j=0;
	}
	for (i=0;i<ADCNUM;i++){
1a000448:	2400      	movs	r4, #0
1a00044a:	e01d      	b.n	1a000488 <queuesAndSemInit+0xc0>
		DACQueue[i]=xQueueCreate( MAXADCSAMPLES, sizeof(uint16_t)); //creo el vector de colas para los canales DAC
1a00044c:	2200      	movs	r2, #0
1a00044e:	2102      	movs	r1, #2
1a000450:	2014      	movs	r0, #20
1a000452:	f001 f8fa 	bl	1a00164a <xQueueGenericCreate>
1a000456:	4b27      	ldr	r3, [pc, #156]	; (1a0004f4 <queuesAndSemInit+0x12c>)
1a000458:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (DACQueue[i]==NULL)
1a00045c:	b110      	cbz	r0, 1a000464 <queuesAndSemInit+0x9c>
	for (i=0;i<DACNUM;i++){
1a00045e:	3401      	adds	r4, #1
1a000460:	b2e4      	uxtb	r4, r4
1a000462:	e7d4      	b.n	1a00040e <queuesAndSemInit+0x46>
			j=0;
1a000464:	4625      	mov	r5, r4
1a000466:	e7fa      	b.n	1a00045e <queuesAndSemInit+0x96>
		DACWriteSem[i]=xSemaphoreCreateBinary();	//creo los semaforos que van a indicar cuando escribir
1a000468:	2203      	movs	r2, #3
1a00046a:	2100      	movs	r1, #0
1a00046c:	2001      	movs	r0, #1
1a00046e:	f001 f8ec 	bl	1a00164a <xQueueGenericCreate>
1a000472:	4b21      	ldr	r3, [pc, #132]	; (1a0004f8 <queuesAndSemInit+0x130>)
1a000474:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if(DACWriteSem[i]==NULL)					//una muestra en los DAC
1a000478:	b110      	cbz	r0, 1a000480 <queuesAndSemInit+0xb8>
	for (i=0;i<DACNUM;i++){
1a00047a:	3401      	adds	r4, #1
1a00047c:	b2e4      	uxtb	r4, r4
1a00047e:	e7e2      	b.n	1a000446 <queuesAndSemInit+0x7e>
			j=0;
1a000480:	4625      	mov	r5, r4
1a000482:	e7fa      	b.n	1a00047a <queuesAndSemInit+0xb2>
	for (i=0;i<ADCNUM;i++){
1a000484:	3401      	adds	r4, #1
1a000486:	b2e4      	uxtb	r4, r4
1a000488:	2c01      	cmp	r4, #1
1a00048a:	d80a      	bhi.n	1a0004a2 <queuesAndSemInit+0xda>
		ADCReadSemCount[i]=xSemaphoreCreateCounting (MAXADCSAMPLES, 0); //semaforo contador para pedir muestras de ADC
1a00048c:	2100      	movs	r1, #0
1a00048e:	2014      	movs	r0, #20
1a000490:	f001 f902 	bl	1a001698 <xQueueCreateCountingSemaphore>
1a000494:	4b19      	ldr	r3, [pc, #100]	; (1a0004fc <queuesAndSemInit+0x134>)
1a000496:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if(ADCReadSemCount[i]==NULL)
1a00049a:	2800      	cmp	r0, #0
1a00049c:	d1f2      	bne.n	1a000484 <queuesAndSemInit+0xbc>
			j=0;
1a00049e:	2500      	movs	r5, #0
1a0004a0:	e7f0      	b.n	1a000484 <queuesAndSemInit+0xbc>
	}
	I2CMutx = xSemaphoreCreateMutex();	//semaforo para proteger el bus I2C
1a0004a2:	2001      	movs	r0, #1
1a0004a4:	f001 f9e2 	bl	1a00186c <xQueueCreateMutex>
1a0004a8:	4b15      	ldr	r3, [pc, #84]	; (1a000500 <queuesAndSemInit+0x138>)
1a0004aa:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(I2CMutx);	//inicializo el bus I2C disponible
1a0004ac:	2300      	movs	r3, #0
1a0004ae:	461a      	mov	r2, r3
1a0004b0:	4619      	mov	r1, r3
1a0004b2:	f001 f911 	bl	1a0016d8 <xQueueGenericSend>
	xSemaphoreGive(OutQueueSem);	//dejo disponible la cola de salila para la UART
1a0004b6:	2300      	movs	r3, #0
1a0004b8:	461a      	mov	r2, r3
1a0004ba:	4619      	mov	r1, r3
1a0004bc:	480c      	ldr	r0, [pc, #48]	; (1a0004f0 <queuesAndSemInit+0x128>)
1a0004be:	6800      	ldr	r0, [r0, #0]
1a0004c0:	f001 f90a 	bl	1a0016d8 <xQueueGenericSend>

	if((j==0)||(OutQueueSem==NULL)||(I2CMutx))	//chequeo que se hallan creado bien los semaforos
1a0004c4:	b12d      	cbz	r5, 1a0004d2 <queuesAndSemInit+0x10a>
1a0004c6:	4b0a      	ldr	r3, [pc, #40]	; (1a0004f0 <queuesAndSemInit+0x128>)
1a0004c8:	681b      	ldr	r3, [r3, #0]
1a0004ca:	b113      	cbz	r3, 1a0004d2 <queuesAndSemInit+0x10a>
1a0004cc:	4b0c      	ldr	r3, [pc, #48]	; (1a000500 <queuesAndSemInit+0x138>)
1a0004ce:	681b      	ldr	r3, [r3, #0]
1a0004d0:	b113      	cbz	r3, 1a0004d8 <queuesAndSemInit+0x110>
		{
			printf ("Error al crear semaforos");
1a0004d2:	480c      	ldr	r0, [pc, #48]	; (1a000504 <queuesAndSemInit+0x13c>)
1a0004d4:	f004 feca 	bl	1a00526c <iprintf>
		}

}
1a0004d8:	bd38      	pop	{r3, r4, r5, pc}
1a0004da:	bf00      	nop
1a0004dc:	10002bd0 	.word	0x10002bd0
1a0004e0:	10002bc8 	.word	0x10002bc8
1a0004e4:	10002bc0 	.word	0x10002bc0
1a0004e8:	10002ba8 	.word	0x10002ba8
1a0004ec:	1a005cc8 	.word	0x1a005cc8
1a0004f0:	10002bbc 	.word	0x10002bbc
1a0004f4:	10002bac 	.word	0x10002bac
1a0004f8:	10002bb0 	.word	0x10002bb0
1a0004fc:	10002bb4 	.word	0x10002bb4
1a000500:	10002bcc 	.word	0x10002bcc
1a000504:	1a005ce0 	.word	0x1a005ce0

1a000508 <sendStringToQueue>:


bool_t sendStringToQueue(QueueHandle_t *Queue, QueueHandle_t *Sem,char *msg)
{
1a000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00050a:	4606      	mov	r6, r0
1a00050c:	460f      	mov	r7, r1
1a00050e:	4615      	mov	r5, r2
	uint8_t i=0;
	xSemaphoreTake(*Sem,portMAX_DELAY); 	//tomo el semaforo de la cola de
1a000510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000514:	6838      	ldr	r0, [r7, #0]
1a000516:	f001 fac7 	bl	1a001aa8 <xQueueSemaphoreTake>
	uint8_t i=0;
1a00051a:	2400      	movs	r4, #0
												//salida de la UART para que nadie mas escriba
	while (msg[i] !=  0)
1a00051c:	e007      	b.n	1a00052e <sendStringToQueue+0x26>
	{
		xQueueSend(*Queue,&msg[i],portMAX_DELAY);	//pongo cada caracter en la cola de UART
1a00051e:	2300      	movs	r3, #0
1a000520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000524:	6830      	ldr	r0, [r6, #0]
1a000526:	f001 f8d7 	bl	1a0016d8 <xQueueGenericSend>
		i++;
1a00052a:	3401      	adds	r4, #1
1a00052c:	b2e4      	uxtb	r4, r4
	while (msg[i] !=  0)
1a00052e:	1929      	adds	r1, r5, r4
1a000530:	5d2b      	ldrb	r3, [r5, r4]
1a000532:	2b00      	cmp	r3, #0
1a000534:	d1f3      	bne.n	1a00051e <sendStringToQueue+0x16>
	}
	xSemaphoreGive(*Sem);	//Devuelvo el semaforo de la cola
1a000536:	461a      	mov	r2, r3
1a000538:	4619      	mov	r1, r3
1a00053a:	6838      	ldr	r0, [r7, #0]
1a00053c:	f001 f8cc 	bl	1a0016d8 <xQueueGenericSend>
}
1a000540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000542:	Address 0x000000001a000542 is out of bounds.


1a000544 <mcp4725NormalSend>:
#include <sapi.h>

#include <MCP4725.h>

bool_t mcp4725NormalSend(mcpData_t *mcpDataX) //le paso un puntero a la estructura que contiene todos los datos de un mcp
{
1a000544:	b530      	push	{r4, r5, lr}
1a000546:	b087      	sub	sp, #28
1a000548:	4604      	mov	r4, r0
	I2CM_XFER_T i2cData;
	uint8_t txBuffer[3];
	static uint32_t ret = 0;


	switch (mcpDataX->comState)
1a00054a:	7983      	ldrb	r3, [r0, #6]
1a00054c:	b12b      	cbz	r3, 1a00055a <mcp4725NormalSend+0x16>
1a00054e:	2b01      	cmp	r3, #1
1a000550:	d02c      	beq.n	1a0005ac <mcp4725NormalSend+0x68>

		ret = FALSE;
		break;
	}
	default:
		ret = FALSE;
1a000552:	4b22      	ldr	r3, [pc, #136]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a000554:	2200      	movs	r2, #0
1a000556:	601a      	str	r2, [r3, #0]
		break;
1a000558:	e024      	b.n	1a0005a4 <mcp4725NormalSend+0x60>
		txBuffer[0] = (mcpDataX->pdMode|WRITE_DAC_REG); //escribir el registro de configuracion
1a00055a:	7943      	ldrb	r3, [r0, #5]
1a00055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a000560:	f88d 3004 	strb.w	r3, [sp, #4]
		txBuffer[1] = (uint8_t)(((mcpDataX->txData)>>4)& (0x00FF)); 		//le paso la parte alta
1a000564:	8903      	ldrh	r3, [r0, #8]
1a000566:	f3c3 1207 	ubfx	r2, r3, #4, #8
1a00056a:	f88d 2005 	strb.w	r2, [sp, #5]
		txBuffer[2] = (uint8_t)(((mcpDataX->txData)<<4)& (0x00F0));		//le paso la parte baja
1a00056e:	011b      	lsls	r3, r3, #4
1a000570:	f88d 3006 	strb.w	r3, [sp, #6]
		i2cData.slaveAddr = mcpDataX->i2cSlaveAddress; //direccion del MCP4725
1a000574:	7903      	ldrb	r3, [r0, #4]
1a000576:	f88d 3008 	strb.w	r3, [sp, #8]
		i2cData.options = 0;
1a00057a:	2500      	movs	r5, #0
1a00057c:	f88d 5009 	strb.w	r5, [sp, #9]
		i2cData.status = 0;
1a000580:	f8ad 500a 	strh.w	r5, [sp, #10]
		i2cData.txBuff = txBuffer; //puntero al buffer de datos a enviar
1a000584:	ab01      	add	r3, sp, #4
1a000586:	9304      	str	r3, [sp, #16]
		i2cData.txSz = 3;	//cantidad de bytes a enviar
1a000588:	2303      	movs	r3, #3
1a00058a:	f8ad 300c 	strh.w	r3, [sp, #12]
		i2cData.rxBuff = 0;
1a00058e:	9505      	str	r5, [sp, #20]
		i2cData.rxSz = 0;
1a000590:	f8ad 500e 	strh.w	r5, [sp, #14]
		Chip_I2CM_Xfer( mcpDataX->i2cNumber, &i2cData); //le paso el puerto I2C que quiero escribir
1a000594:	a902      	add	r1, sp, #8
1a000596:	6800      	ldr	r0, [r0, #0]
1a000598:	f003 fdd4 	bl	1a004144 <Chip_I2CM_Xfer>
		mcpDataX->comState = sending_state;
1a00059c:	2301      	movs	r3, #1
1a00059e:	71a3      	strb	r3, [r4, #6]
		ret=0;
1a0005a0:	4b0e      	ldr	r3, [pc, #56]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a0005a2:	601d      	str	r5, [r3, #0]
	}
	return ret;

}
1a0005a4:	4b0d      	ldr	r3, [pc, #52]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a0005a6:	7818      	ldrb	r0, [r3, #0]
1a0005a8:	b007      	add	sp, #28
1a0005aa:	bd30      	pop	{r4, r5, pc}
		if (Chip_I2CM_StateChanged(mcpDataX->i2cNumber) == 0)//Veo si hay cambio en el controlador de I2C
1a0005ac:	6800      	ldr	r0, [r0, #0]
 * @return	Returns 0 if state didn't change
 * @note
 */
static INLINE uint32_t Chip_I2CM_StateChanged(LPC_I2C_T *pI2C)
{
	return pI2C->CONSET & I2C_CON_SI;
1a0005ae:	6803      	ldr	r3, [r0, #0]
1a0005b0:	f013 0f08 	tst.w	r3, #8
1a0005b4:	d103      	bne.n	1a0005be <mcp4725NormalSend+0x7a>
			ret = FALSE;
1a0005b6:	4b09      	ldr	r3, [pc, #36]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a0005b8:	2200      	movs	r2, #0
1a0005ba:	601a      	str	r2, [r3, #0]
			break;
1a0005bc:	e7f2      	b.n	1a0005a4 <mcp4725NormalSend+0x60>
		ret = Chip_I2CM_XferHandler(mcpDataX->i2cNumber, &i2cData);	//ejecuto el handler de comunicacion I2C
1a0005be:	a902      	add	r1, sp, #8
1a0005c0:	f003 fd42 	bl	1a004048 <Chip_I2CM_XferHandler>
		if (ret != FALSE)	//si devuelve distinto de false significa que ya termino de enviar.
1a0005c4:	b128      	cbz	r0, 1a0005d2 <mcp4725NormalSend+0x8e>
			mcpDataX->comState = dataSet_state;
1a0005c6:	2300      	movs	r3, #0
1a0005c8:	71a3      	strb	r3, [r4, #6]
			ret = TRUE;		//devuelvo TRUE indicando que ya se termino la comunicacion
1a0005ca:	4b04      	ldr	r3, [pc, #16]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a0005cc:	2201      	movs	r2, #1
1a0005ce:	601a      	str	r2, [r3, #0]
			break;
1a0005d0:	e7e8      	b.n	1a0005a4 <mcp4725NormalSend+0x60>
		ret = FALSE;
1a0005d2:	4b02      	ldr	r3, [pc, #8]	; (1a0005dc <mcp4725NormalSend+0x98>)
1a0005d4:	2200      	movs	r2, #0
1a0005d6:	601a      	str	r2, [r3, #0]
		break;
1a0005d8:	e7e4      	b.n	1a0005a4 <mcp4725NormalSend+0x60>
1a0005da:	bf00      	nop
1a0005dc:	1000012c 	.word	0x1000012c

1a0005e0 <salidaUart>:
/*=====[Implementations of public functions]=================================*/

// Task implementation
//Recibe mensajes caracteres por una cola y los envia por la UART
void salidaUart(void* taskParmPtr)
{
1a0005e0:	b500      	push	{lr}
1a0005e2:	b083      	sub	sp, #12
	char dato;
	for (;;)
	{
		xQueueReceive(UARTOutQueue, &dato, portMAX_DELAY); //espero a que venga un dato por la cola
1a0005e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005e8:	f10d 0107 	add.w	r1, sp, #7
1a0005ec:	4b04      	ldr	r3, [pc, #16]	; (1a000600 <salidaUart+0x20>)
1a0005ee:	6818      	ldr	r0, [r3, #0]
1a0005f0:	f001 f9ae 	bl	1a001950 <xQueueReceive>

		uartWriteByte(UART_USB, (uint8_t) dato);	//lo escribo en la UART
1a0005f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005f8:	2003      	movs	r0, #3
1a0005fa:	f003 ff6d 	bl	1a0044d8 <uartWriteByte>
1a0005fe:	e7f1      	b.n	1a0005e4 <salidaUart+0x4>
1a000600:	10002bd0 	.word	0x10002bd0

1a000604 <interprete>:
	}
}

//Interprete de Comandos por UART
void interprete(void* taskParmPtr)
{
1a000604:	b510      	push	{r4, lr}
1a000606:	b08c      	sub	sp, #48	; 0x30
	int hash = 0;
	char dataRead;
	FSMReg_t Prueba; //Registro de FSM para enviar a la cola de la FSM de prueba de drivers
	Prueba.pruebaNum = 0;
1a000608:	2300      	movs	r3, #0
1a00060a:	f88d 3004 	strb.w	r3, [sp, #4]
1a00060e:	e017      	b.n	1a000640 <interprete+0x3c>
		xQueueReceive(UARTInQueue, &dataRead, portMAX_DELAY);
		while (dataRead != LF) 			//Leo uno por uno los datos en el buffer
		{								//y los sumo para hacer un hash simple
			if (dataRead != CR)
				hash += (int) dataRead;	//ya que solo hay dos comandos iniciar y abortar
			xQueueReceive(UARTInQueue, &dataRead, portMAX_DELAY);
1a000610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000614:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000618:	4b1c      	ldr	r3, [pc, #112]	; (1a00068c <interprete+0x88>)
1a00061a:	6818      	ldr	r0, [r3, #0]
1a00061c:	f001 f998 	bl	1a001950 <xQueueReceive>
		while (dataRead != LF) 			//Leo uno por uno los datos en el buffer
1a000620:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000624:	2b0a      	cmp	r3, #10
1a000626:	d003      	beq.n	1a000630 <interprete+0x2c>
			if (dataRead != CR)
1a000628:	2b0d      	cmp	r3, #13
1a00062a:	d0f1      	beq.n	1a000610 <interprete+0xc>
				hash += (int) dataRead;	//ya que solo hay dos comandos iniciar y abortar
1a00062c:	441c      	add	r4, r3
1a00062e:	e7ef      	b.n	1a000610 <interprete+0xc>
		}
		switch (hash)
1a000630:	f240 23df 	movw	r3, #735	; 0x2df
1a000634:	429c      	cmp	r4, r3
1a000636:	d00d      	beq.n	1a000654 <interprete+0x50>
1a000638:	f240 23eb 	movw	r3, #747	; 0x2eb
1a00063c:	429c      	cmp	r4, r3
1a00063e:	d014      	beq.n	1a00066a <interprete+0x66>
		xQueueReceive(UARTInQueue, &dataRead, portMAX_DELAY);
1a000640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000644:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000648:	4b10      	ldr	r3, [pc, #64]	; (1a00068c <interprete+0x88>)
1a00064a:	6818      	ldr	r0, [r3, #0]
1a00064c:	f001 f980 	bl	1a001950 <xQueueReceive>
		while (dataRead != LF) 			//Leo uno por uno los datos en el buffer
1a000650:	2400      	movs	r4, #0
1a000652:	e7e5      	b.n	1a000620 <interprete+0x1c>
		{
		case ('i' + 'n' + 'i' + 'c' + 'i' + 'a' + 'r'): //si llega un comando iniciar, inicio la prueba
		{
			Prueba.state = STATE_INIT;	//cambio el estado a INIT
1a000654:	2300      	movs	r3, #0
1a000656:	f88d 3005 	strb.w	r3, [sp, #5]
			xQueueSend(DriversTestsQueue, &Prueba, portMAX_DELAY); //y lo envio a la cola de prueba de drivers
1a00065a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00065e:	a901      	add	r1, sp, #4
1a000660:	480b      	ldr	r0, [pc, #44]	; (1a000690 <interprete+0x8c>)
1a000662:	6800      	ldr	r0, [r0, #0]
1a000664:	f001 f838 	bl	1a0016d8 <xQueueGenericSend>
			break;
1a000668:	e7ea      	b.n	1a000640 <interprete+0x3c>
		}
		case ('a' + 'b' + 'o' + 'r' + 't' + 'a' + 'r'):	//si llega un comando abortar se detiene
		{
			//y va a condicion segura.
			Prueba.state = STATE_ABORT_ALL, xQueueReset(DriversTestsQueue);
1a00066a:	2309      	movs	r3, #9
1a00066c:	f88d 3005 	strb.w	r3, [sp, #5]
1a000670:	4c07      	ldr	r4, [pc, #28]	; (1a000690 <interprete+0x8c>)
1a000672:	2100      	movs	r1, #0
1a000674:	6820      	ldr	r0, [r4, #0]
1a000676:	f000 ff4d 	bl	1a001514 <xQueueGenericReset>
			xQueueSendToFront(DriversTestsQueue, &Prueba, portMAX_DELAY); //envio el comando ABORT_ALL al principio
1a00067a:	2301      	movs	r3, #1
1a00067c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000680:	a901      	add	r1, sp, #4
1a000682:	6820      	ldr	r0, [r4, #0]
1a000684:	f001 f828 	bl	1a0016d8 <xQueueGenericSend>
			break;														//de la cola para parar las pruebas
1a000688:	e7da      	b.n	1a000640 <interprete+0x3c>
1a00068a:	bf00      	nop
1a00068c:	10002bc8 	.word	0x10002bc8
1a000690:	10002ba8 	.word	0x10002ba8

1a000694 <prueba>:
	}
}

//Prueba de drivers
void prueba(void* taskParmPtr)
{
1a000694:	b530      	push	{r4, r5, lr}
1a000696:	b09d      	sub	sp, #116	; 0x74
	FSMReg_t ChangeFSMReg; //cambios de estado recibidos en cola
	FSMReg_t ActualFSMReg[DRIVER_TESTS_NUM]; //Vector de estados actuales de las distintas instanciaciones de la FSM
	uint8_t i;
	uint8_t j;
	char msg[30];
	for (i = 0; i < DRIVER_TESTS_NUM; i++)	//inicializo cada instanciacion de la maquina de estados
1a000698:	2300      	movs	r3, #0
1a00069a:	2b00      	cmp	r3, #0
1a00069c:	d145      	bne.n	1a00072a <prueba+0x96>
	{
		ActualFSMReg[i].pruebaNum = i;
1a00069e:	0098      	lsls	r0, r3, #2
1a0006a0:	18c1      	adds	r1, r0, r3
1a0006a2:	00ca      	lsls	r2, r1, #3
1a0006a4:	a91c      	add	r1, sp, #112	; 0x70
1a0006a6:	440a      	add	r2, r1
1a0006a8:	f802 3c50 	strb.w	r3, [r2, #-80]
		ActualFSMReg[i].state = STATE_IDLE;
1a0006ac:	210a      	movs	r1, #10
1a0006ae:	f802 1c4f 	strb.w	r1, [r2, #-79]
		ActualFSMReg[i].ADCCHA = 2 * i;
1a0006b2:	0059      	lsls	r1, r3, #1
1a0006b4:	b2c9      	uxtb	r1, r1
1a0006b6:	f802 1c48 	strb.w	r1, [r2, #-72]
		ActualFSMReg[i].ADCCHB = (2 * i) + 1;
1a0006ba:	3101      	adds	r1, #1
1a0006bc:	f802 1c47 	strb.w	r1, [r2, #-71]
		ActualFSMReg[i].DACCHA = i;
1a0006c0:	f802 3c2c 	strb.w	r3, [r2, #-44]
		ActualFSMReg[i].GPIOA = GPIO1;
1a0006c4:	210f      	movs	r1, #15
1a0006c6:	f802 1c2b 	strb.w	r1, [r2, #-43]
		ActualFSMReg[i].i = 0;
1a0006ca:	18c2      	adds	r2, r0, r3
1a0006cc:	00d1      	lsls	r1, r2, #3
1a0006ce:	aa1c      	add	r2, sp, #112	; 0x70
1a0006d0:	4411      	add	r1, r2
1a0006d2:	2200      	movs	r2, #0
1a0006d4:	f801 2c2a 	strb.w	r2, [r1, #-42]
	for (i = 0; i < DRIVER_TESTS_NUM; i++)	//inicializo cada instanciacion de la maquina de estados
1a0006d8:	3301      	adds	r3, #1
1a0006da:	b2db      	uxtb	r3, r3
1a0006dc:	e7dd      	b.n	1a00069a <prueba+0x6>
	}
	for (;;)
	{
		if ((uxQueueSpacesAvailable(DriversTestsQueue))== DRIVER_TEST_QUEUE_SIZE) //si no hay nada para hacer en la cola
		{
			strcpy(msg, "\n\nEsperando Comando\n\n"); //envio mensaje de esperando comando
1a0006de:	466c      	mov	r4, sp
1a0006e0:	4d24      	ldr	r5, [pc, #144]	; (1a000774 <prueba+0xe0>)
1a0006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006e6:	e895 0003 	ldmia.w	r5, {r0, r1}
1a0006ea:	f844 0b04 	str.w	r0, [r4], #4
1a0006ee:	8021      	strh	r1, [r4, #0]
			sendStringToQueue(&UARTOutQueue, &OutQueueSem, &msg[0]);
1a0006f0:	466a      	mov	r2, sp
1a0006f2:	4921      	ldr	r1, [pc, #132]	; (1a000778 <prueba+0xe4>)
1a0006f4:	4821      	ldr	r0, [pc, #132]	; (1a00077c <prueba+0xe8>)
1a0006f6:	f7ff ff07 	bl	1a000508 <sendStringToQueue>
1a0006fa:	e01c      	b.n	1a000736 <prueba+0xa2>
		xQueueReceive(DriversTestsQueue, &ChangeFSMReg, portMAX_DELAY);
		if (ChangeFSMReg.state == STATE_ABORT_ALL) //si llega un mensaje por la cola con el estado STATE_ABORT_ALL
		{	//significa que la cola ya fue reseteada y el unico mensaje es este
			for (i = 0; i < DRIVER_TESTS_NUM; i++)//entonces paso todas las instanciaciones de las FSM de prueba de drivers
			{		//al estado abort y lo pongo en la cola para que se ejecuten
				ActualFSMReg[i].state = STATE_ABORT;
1a0006fc:	00a3      	lsls	r3, r4, #2
1a0006fe:	1919      	adds	r1, r3, r4
1a000700:	00ca      	lsls	r2, r1, #3
1a000702:	a91c      	add	r1, sp, #112	; 0x70
1a000704:	440a      	add	r2, r1
1a000706:	2108      	movs	r1, #8
1a000708:	f802 1c4f 	strb.w	r1, [r2, #-79]
				xQueueSendToFront(DriversTestsQueue, &ActualFSMReg[i],
1a00070c:	4423      	add	r3, r4
1a00070e:	00d9      	lsls	r1, r3, #3
1a000710:	2301      	movs	r3, #1
1a000712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000716:	a808      	add	r0, sp, #32
1a000718:	4401      	add	r1, r0
1a00071a:	4819      	ldr	r0, [pc, #100]	; (1a000780 <prueba+0xec>)
1a00071c:	6800      	ldr	r0, [r0, #0]
1a00071e:	f000 ffdb 	bl	1a0016d8 <xQueueGenericSend>
			for (i = 0; i < DRIVER_TESTS_NUM; i++)//entonces paso todas las instanciaciones de las FSM de prueba de drivers
1a000722:	3401      	adds	r4, #1
1a000724:	b2e4      	uxtb	r4, r4
1a000726:	2c00      	cmp	r4, #0
1a000728:	d0e8      	beq.n	1a0006fc <prueba+0x68>
		if ((uxQueueSpacesAvailable(DriversTestsQueue))== DRIVER_TEST_QUEUE_SIZE) //si no hay nada para hacer en la cola
1a00072a:	4b15      	ldr	r3, [pc, #84]	; (1a000780 <prueba+0xec>)
1a00072c:	6818      	ldr	r0, [r3, #0]
1a00072e:	f001 fa89 	bl	1a001c44 <uxQueueSpacesAvailable>
1a000732:	2807      	cmp	r0, #7
1a000734:	d0d3      	beq.n	1a0006de <prueba+0x4a>
		xQueueReceive(DriversTestsQueue, &ChangeFSMReg, portMAX_DELAY);
1a000736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00073a:	a912      	add	r1, sp, #72	; 0x48
1a00073c:	4b10      	ldr	r3, [pc, #64]	; (1a000780 <prueba+0xec>)
1a00073e:	6818      	ldr	r0, [r3, #0]
1a000740:	f001 f906 	bl	1a001950 <xQueueReceive>
		if (ChangeFSMReg.state == STATE_ABORT_ALL) //si llega un mensaje por la cola con el estado STATE_ABORT_ALL
1a000744:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
1a000748:	2909      	cmp	r1, #9
1a00074a:	d010      	beq.n	1a00076e <prueba+0xda>

			}
		}
		else //si el mensaje no es STATE_ABORT_ALL
		{
			ActualFSMReg[ChangeFSMReg.pruebaNum].state = ChangeFSMReg.state; //tomo el mensaje de cambio de estado de la cola
1a00074c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
1a000750:	0083      	lsls	r3, r0, #2
1a000752:	181c      	adds	r4, r3, r0
1a000754:	00e2      	lsls	r2, r4, #3
1a000756:	ac1c      	add	r4, sp, #112	; 0x70
1a000758:	4422      	add	r2, r4
1a00075a:	f802 1c4f 	strb.w	r1, [r2, #-79]
																			 //y actualizo el de la instanciacion correspondiente
																			 //indicada por ChangeFSMReg.pruebaNum
			FSMPruebaDrivers(&DriversTestsQueue,
1a00075e:	4403      	add	r3, r0
1a000760:	00d9      	lsls	r1, r3, #3
1a000762:	ab08      	add	r3, sp, #32
1a000764:	4419      	add	r1, r3
1a000766:	4806      	ldr	r0, [pc, #24]	; (1a000780 <prueba+0xec>)
1a000768:	f000 f900 	bl	1a00096c <FSMPruebaDrivers>
1a00076c:	e7dd      	b.n	1a00072a <prueba+0x96>
			for (i = 0; i < DRIVER_TESTS_NUM; i++)//entonces paso todas las instanciaciones de las FSM de prueba de drivers
1a00076e:	2400      	movs	r4, #0
1a000770:	e7d9      	b.n	1a000726 <prueba+0x92>
1a000772:	bf00      	nop
1a000774:	1a005cfc 	.word	0x1a005cfc
1a000778:	10002bbc 	.word	0x10002bbc
1a00077c:	10002bd0 	.word	0x10002bd0
1a000780:	10002ba8 	.word	0x10002ba8

1a000784 <tareaDAC>:

//esta tarea espera durante un tiempo "DAC_SAMPLE_PERIODE" para cada canal del DAC y si aparece un semaforo escribe
//el dato que le venga por cola

void tareaDAC(void* taskParmPtr)
{
1a000784:	b530      	push	{r4, r5, lr}
1a000786:	b085      	sub	sp, #20
	TickType_t Time; //Variable donde guardo el momento donde empieza cada ciclo de espera.
	mcpData_t DACData;
	DACData.i2cNumber = LPC_I2C0;	//numero de puerto I2C
1a000788:	4b1f      	ldr	r3, [pc, #124]	; (1a000808 <tareaDAC+0x84>)
1a00078a:	9300      	str	r3, [sp, #0]
	uint8_t i;

	for (;;)
	{
		for (i = 0; i < DACNUM; i++)
1a00078c:	2400      	movs	r4, #0
1a00078e:	2c00      	cmp	r4, #0
1a000790:	d1fc      	bne.n	1a00078c <tareaDAC+0x8>
		{
			Time = xTaskGetTickCount();
1a000792:	f001 fd87 	bl	1a0022a4 <xTaskGetTickCount>
1a000796:	9003      	str	r0, [sp, #12]
			if ((xQueueReceive(DACQueue[i], &DACData.txData, (TickType_t) 0))
1a000798:	4625      	mov	r5, r4
1a00079a:	2200      	movs	r2, #0
1a00079c:	a902      	add	r1, sp, #8
1a00079e:	4b1b      	ldr	r3, [pc, #108]	; (1a00080c <tareaDAC+0x88>)
1a0007a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a0007a4:	f001 f8d4 	bl	1a001950 <xQueueReceive>
1a0007a8:	2801      	cmp	r0, #1
1a0007aa:	d006      	beq.n	1a0007ba <tareaDAC+0x36>
				else//Si no pude enviar el dato al I2C porque estaba ocupado
					//entonces vuelvo a enviar el dato a la cola para mandarlo luego
					xQueueSendToFront(DACQueue[i], &DACData.txData,(TickType_t) (DAC_SAMPLE_PERIOD * portTICK_PERIOD_MS));

			}//Espero a que se complete el ciclo
			vTaskDelayUntil(&Time,(TickType_t) (DAC_SAMPLE_PERIOD * portTICK_PERIOD_MS));
1a0007ac:	2102      	movs	r1, #2
1a0007ae:	a803      	add	r0, sp, #12
1a0007b0:	f001 fe84 	bl	1a0024bc <vTaskDelayUntil>
		for (i = 0; i < DACNUM; i++)
1a0007b4:	3401      	adds	r4, #1
1a0007b6:	b2e4      	uxtb	r4, r4
1a0007b8:	e7e9      	b.n	1a00078e <tareaDAC+0xa>
				switch (i)
1a0007ba:	b93c      	cbnz	r4, 1a0007cc <tareaDAC+0x48>
					DACData.i2cSlaveAddress = 0x60; //direccion del esclavo en el bus I2C '1100000'
1a0007bc:	2360      	movs	r3, #96	; 0x60
1a0007be:	f88d 3004 	strb.w	r3, [sp, #4]
					DACData.pdMode = PD_NORMAL;	//modo de funcionamiento Power Down normal
1a0007c2:	2300      	movs	r3, #0
1a0007c4:	f88d 3005 	strb.w	r3, [sp, #5]
					DACData.comState = dataSet_state; //estado inicial
1a0007c8:	f88d 3006 	strb.w	r3, [sp, #6]
				if (xSemaphoreTake( I2CMutx,(TickType_t) 0 ) == pdTRUE)//si el bus I2C esta disponible
1a0007cc:	2100      	movs	r1, #0
1a0007ce:	4b10      	ldr	r3, [pc, #64]	; (1a000810 <tareaDAC+0x8c>)
1a0007d0:	6818      	ldr	r0, [r3, #0]
1a0007d2:	f001 f969 	bl	1a001aa8 <xQueueSemaphoreTake>
1a0007d6:	2801      	cmp	r0, #1
1a0007d8:	d008      	beq.n	1a0007ec <tareaDAC+0x68>
					xQueueSendToFront(DACQueue[i], &DACData.txData,(TickType_t) (DAC_SAMPLE_PERIOD * portTICK_PERIOD_MS));
1a0007da:	2301      	movs	r3, #1
1a0007dc:	2202      	movs	r2, #2
1a0007de:	a902      	add	r1, sp, #8
1a0007e0:	480a      	ldr	r0, [pc, #40]	; (1a00080c <tareaDAC+0x88>)
1a0007e2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
1a0007e6:	f000 ff77 	bl	1a0016d8 <xQueueGenericSend>
1a0007ea:	e7df      	b.n	1a0007ac <tareaDAC+0x28>
					while (mcp4725NormalSend(&DACData) == FALSE); //Envio el dato por el I2C
1a0007ec:	4668      	mov	r0, sp
1a0007ee:	f7ff fea9 	bl	1a000544 <mcp4725NormalSend>
1a0007f2:	2800      	cmp	r0, #0
1a0007f4:	d0fa      	beq.n	1a0007ec <tareaDAC+0x68>
					xSemaphoreGive(I2CMutx); //Libero el I2C
1a0007f6:	2300      	movs	r3, #0
1a0007f8:	461a      	mov	r2, r3
1a0007fa:	4619      	mov	r1, r3
1a0007fc:	4804      	ldr	r0, [pc, #16]	; (1a000810 <tareaDAC+0x8c>)
1a0007fe:	6800      	ldr	r0, [r0, #0]
1a000800:	f000 ff6a 	bl	1a0016d8 <xQueueGenericSend>
1a000804:	e7d2      	b.n	1a0007ac <tareaDAC+0x28>
1a000806:	bf00      	nop
1a000808:	400a1000 	.word	0x400a1000
1a00080c:	10002bac 	.word	0x10002bac
1a000810:	10002bcc 	.word	0x10002bcc

1a000814 <tareaADC>:
}

//Esta tarea lee los ADC secuencialmente si el semaforo correspondiente a cada uno se activó.
//la ventana de muestreo es ADC_SAMPLE_PERIOD
void tareaADC(void* taskParmPtr)
{
1a000814:	b570      	push	{r4, r5, r6, lr}
1a000816:	b086      	sub	sp, #24
	adsData_t adsData;
	TickType_t Time; //Variable donde guardo el momento donde empieza cada ciclo de espera.
	int16_t readData; //Muestra leida
	for (;;)
	{
		for (i = 0; i < (ADCNUM); i++)
1a000818:	2400      	movs	r4, #0
1a00081a:	e020      	b.n	1a00085e <tareaADC+0x4a>
			if ((xSemaphoreTake(ADCReadSemCount[i], (TickType_t ) 0)) == pdTRUE)
			{ //si se tomó el semaforo del canal "i" del ADC
				switch (i)
				{	//configuracion y direccion de cada canal de ADC
				case 0:
					adsData.i2cNumber = LPC_I2C0;		//numero de puerto I2C
1a00081c:	4b3e      	ldr	r3, [pc, #248]	; (1a000918 <tareaADC+0x104>)
1a00081e:	9303      	str	r3, [sp, #12]
					adsData.i2cSlaveAddress = 0x48; //direccion del esclavo en el bus I2C '1001000'
1a000820:	2348      	movs	r3, #72	; 0x48
1a000822:	f88d 3010 	strb.w	r3, [sp, #16]
					//uso el canal 0 en modo continuo a 860 SPS. La Vref=±4.096 V
					adsData.mode = OS_SET|MUX_A0_GND|PGA_4|MODE_CONT|DR_860|COMP_MODE_TRAD|COMP_POL_HI|COMP_LAT_DIS|COMP_QUE_DIS;
1a000826:	f24c 23e3 	movw	r3, #49891	; 0xc2e3
1a00082a:	f8ad 3012 	strh.w	r3, [sp, #18]
					adsData.comState = dataSet_state; //Estado de la comunicación
1a00082e:	2300      	movs	r3, #0
1a000830:	f88d 3014 	strb.w	r3, [sp, #20]
					break;
				default:
					break;
				}
				//intento tomar el bus I2C
				if (xSemaphoreTake(I2CMutx,(TickType_t) 1 * portTICK_PERIOD_MS)== pdTRUE) //puedo esperar hasta 1 ms
1a000834:	2101      	movs	r1, #1
1a000836:	4b39      	ldr	r3, [pc, #228]	; (1a00091c <tareaADC+0x108>)
1a000838:	6818      	ldr	r0, [r3, #0]
1a00083a:	f001 f935 	bl	1a001aa8 <xQueueSemaphoreTake>
1a00083e:	2801      	cmp	r0, #1
1a000840:	d02c      	beq.n	1a00089c <tareaADC+0x88>
					else
						xSemaphoreGive(ADCReadSemCount[i]); //Si no pude enviar el dato al I2C porque estaba ocupado
															//entonces vuelvo a enviar el semaforo contador una solicitud de muestra
				}
				else
					xSemaphoreGive(ADCReadSemCount[i]); //Si no pude enviar el dato al I2C porque estaba ocupado
1a000842:	2300      	movs	r3, #0
1a000844:	461a      	mov	r2, r3
1a000846:	4619      	mov	r1, r3
1a000848:	4835      	ldr	r0, [pc, #212]	; (1a000920 <tareaADC+0x10c>)
1a00084a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
1a00084e:	f000 ff43 	bl	1a0016d8 <xQueueGenericSend>
														//entonces vuelvo a enviar el semaforo contador una solicitud de muestra

			}
			//else
			vTaskDelayUntil(&Time,(TickType_t) (ADC_SAMPLE_PERIOD * portTICK_PERIOD_MS)); //Espero a que se complete el ciclo
1a000852:	2104      	movs	r1, #4
1a000854:	a802      	add	r0, sp, #8
1a000856:	f001 fe31 	bl	1a0024bc <vTaskDelayUntil>
		for (i = 0; i < (ADCNUM); i++)
1a00085a:	3401      	adds	r4, #1
1a00085c:	b2e4      	uxtb	r4, r4
1a00085e:	2c01      	cmp	r4, #1
1a000860:	d8da      	bhi.n	1a000818 <tareaADC+0x4>
			Time = xTaskGetTickCount();
1a000862:	f001 fd1f 	bl	1a0022a4 <xTaskGetTickCount>
1a000866:	9002      	str	r0, [sp, #8]
			if ((xSemaphoreTake(ADCReadSemCount[i], (TickType_t ) 0)) == pdTRUE)
1a000868:	4625      	mov	r5, r4
1a00086a:	2100      	movs	r1, #0
1a00086c:	4b2c      	ldr	r3, [pc, #176]	; (1a000920 <tareaADC+0x10c>)
1a00086e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a000872:	f001 f919 	bl	1a001aa8 <xQueueSemaphoreTake>
1a000876:	2801      	cmp	r0, #1
1a000878:	d1eb      	bne.n	1a000852 <tareaADC+0x3e>
				switch (i)
1a00087a:	2c00      	cmp	r4, #0
1a00087c:	d0ce      	beq.n	1a00081c <tareaADC+0x8>
1a00087e:	2c01      	cmp	r4, #1
1a000880:	d1d8      	bne.n	1a000834 <tareaADC+0x20>
					adsData.i2cNumber = LPC_I2C0;		//numero de puerto I2C
1a000882:	4b25      	ldr	r3, [pc, #148]	; (1a000918 <tareaADC+0x104>)
1a000884:	9303      	str	r3, [sp, #12]
					adsData.i2cSlaveAddress = 0x48; //direccion del esclavo en el bus I2C '1001000'
1a000886:	2348      	movs	r3, #72	; 0x48
1a000888:	f88d 3010 	strb.w	r3, [sp, #16]
					adsData.mode = OS_SET|MUX_A1_GND|PGA_4|MODE_CONT|DR_860|COMP_MODE_TRAD|COMP_POL_HI|COMP_LAT_DIS|COMP_QUE_DIS;
1a00088c:	f24d 23e3 	movw	r3, #53987	; 0xd2e3
1a000890:	f8ad 3012 	strh.w	r3, [sp, #18]
					adsData.comState = dataSet_state; //Estado de la comunicación
1a000894:	2300      	movs	r3, #0
1a000896:	f88d 3014 	strb.w	r3, [sp, #20]
					break;
1a00089a:	e7cb      	b.n	1a000834 <tareaADC+0x20>
					while (ads1115Init(&adsData) == FALSE); //Realiza la secuencia de envio por el bus I2C
1a00089c:	a803      	add	r0, sp, #12
1a00089e:	f000 fb35 	bl	1a000f0c <ads1115Init>
1a0008a2:	2800      	cmp	r0, #0
1a0008a4:	d0fa      	beq.n	1a00089c <tareaADC+0x88>
					xSemaphoreGive(I2CMutx); //Libero el I2C
1a0008a6:	4e1d      	ldr	r6, [pc, #116]	; (1a00091c <tareaADC+0x108>)
1a0008a8:	2300      	movs	r3, #0
1a0008aa:	461a      	mov	r2, r3
1a0008ac:	4619      	mov	r1, r3
1a0008ae:	6830      	ldr	r0, [r6, #0]
1a0008b0:	f000 ff12 	bl	1a0016d8 <xQueueGenericSend>
					vTaskDelayUntil(&Time,(TickType_t) (3 * portTICK_PERIOD_MS)); //espero 3 miliseg hasta que termine la conversion
1a0008b4:	2103      	movs	r1, #3
1a0008b6:	a802      	add	r0, sp, #8
1a0008b8:	f001 fe00 	bl	1a0024bc <vTaskDelayUntil>
					if (xSemaphoreTake(I2CMutx,(TickType_t) 1 * portTICK_PERIOD_MS) == pdTRUE) //puedo esperar hasta 1 ms
1a0008bc:	2101      	movs	r1, #1
1a0008be:	6830      	ldr	r0, [r6, #0]
1a0008c0:	f001 f8f2 	bl	1a001aa8 <xQueueSemaphoreTake>
1a0008c4:	2801      	cmp	r0, #1
1a0008c6:	d008      	beq.n	1a0008da <tareaADC+0xc6>
						xSemaphoreGive(ADCReadSemCount[i]); //Si no pude enviar el dato al I2C porque estaba ocupado
1a0008c8:	2300      	movs	r3, #0
1a0008ca:	461a      	mov	r2, r3
1a0008cc:	4619      	mov	r1, r3
1a0008ce:	4814      	ldr	r0, [pc, #80]	; (1a000920 <tareaADC+0x10c>)
1a0008d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
1a0008d4:	f000 ff00 	bl	1a0016d8 <xQueueGenericSend>
1a0008d8:	e7bb      	b.n	1a000852 <tareaADC+0x3e>
						while (ads1115ReadRegister(&adsData,ADS1115_CONV_REG) == FALSE); //pido el valor de la muestra al ADC
1a0008da:	2100      	movs	r1, #0
1a0008dc:	a803      	add	r0, sp, #12
1a0008de:	f000 fb5b 	bl	1a000f98 <ads1115ReadRegister>
1a0008e2:	2800      	cmp	r0, #0
1a0008e4:	d0f9      	beq.n	1a0008da <tareaADC+0xc6>
						xSemaphoreGive(I2CMutx); //Libero el I2C
1a0008e6:	2300      	movs	r3, #0
1a0008e8:	461a      	mov	r2, r3
1a0008ea:	4619      	mov	r1, r3
1a0008ec:	480b      	ldr	r0, [pc, #44]	; (1a00091c <tareaADC+0x108>)
1a0008ee:	6800      	ldr	r0, [r0, #0]
1a0008f0:	f000 fef2 	bl	1a0016d8 <xQueueGenericSend>
						readData = (int16_t) (((adsData.rxData[0]) << 8)+ (adsData.rxData[1])); //armo el dato
1a0008f4:	f89d 2015 	ldrb.w	r2, [sp, #21]
1a0008f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a0008fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a000900:	a906      	add	r1, sp, #24
1a000902:	f821 3d12 	strh.w	r3, [r1, #-18]!
						xQueueSend(ADCQueue[i], &readData,1 * portTICK_PERIOD_MS); // y lo envio a la cola del ADC
1a000906:	2300      	movs	r3, #0
1a000908:	2201      	movs	r2, #1
1a00090a:	4806      	ldr	r0, [pc, #24]	; (1a000924 <tareaADC+0x110>)
1a00090c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
1a000910:	f000 fee2 	bl	1a0016d8 <xQueueGenericSend>
1a000914:	e79d      	b.n	1a000852 <tareaADC+0x3e>
1a000916:	bf00      	nop
1a000918:	400a1000 	.word	0x400a1000
1a00091c:	10002bcc 	.word	0x10002bcc
1a000920:	10002bb4 	.word	0x10002bb4
1a000924:	10002bc0 	.word	0x10002bc0

1a000928 <uartUsbReceiveCallback>:
#include "queuesAndSem.h"

//La interrupcion de la UART recibe un dato y lo pone en la cola de la UART para que el interprete de
//comandos procece la información
void uartUsbReceiveCallback( void *unused )
{
1a000928:	b510      	push	{r4, lr}
1a00092a:	b082      	sub	sp, #8
	char dataReceived;
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
1a00092c:	2400      	movs	r4, #0
1a00092e:	9400      	str	r4, [sp, #0]
	dataReceived = uartRxRead(UART_USB); //leo el dato
1a000930:	2003      	movs	r0, #3
1a000932:	f003 fd7f 	bl	1a004434 <uartRxRead>
1a000936:	f88d 0007 	strb.w	r0, [sp, #7]
	xQueueSendFromISR (UARTInQueue,&dataReceived,&xHigherPriorityTaskWoken);//lo pongo en la cola
1a00093a:	4623      	mov	r3, r4
1a00093c:	466a      	mov	r2, sp
1a00093e:	f10d 0107 	add.w	r1, sp, #7
1a000942:	4808      	ldr	r0, [pc, #32]	; (1a000964 <uartUsbReceiveCallback+0x3c>)
1a000944:	6800      	ldr	r0, [r0, #0]
1a000946:	f000 ff9c 	bl	1a001882 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //aviso al RTOS si hay cambios
1a00094a:	9b00      	ldr	r3, [sp, #0]
1a00094c:	b13b      	cbz	r3, 1a00095e <uartUsbReceiveCallback+0x36>
1a00094e:	4b06      	ldr	r3, [pc, #24]	; (1a000968 <uartUsbReceiveCallback+0x40>)
1a000950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000954:	601a      	str	r2, [r3, #0]
1a000956:	f3bf 8f4f 	dsb	sy
1a00095a:	f3bf 8f6f 	isb	sy

}
1a00095e:	b002      	add	sp, #8
1a000960:	bd10      	pop	{r4, pc}
1a000962:	bf00      	nop
1a000964:	10002bc8 	.word	0x10002bc8
1a000968:	e000ed04 	.word	0xe000ed04

1a00096c <FSMPruebaDrivers>:
//Esta funcion recibe un puntero de cola y un registro de la maquina de estados que debe actualizar.
//En la cola envia el siguiente estado a ejecutar.
//Esto se hace asi para que se puedan enviar cambios desde distintas tareas que compartan la cola.

void FSMPruebaDrivers(QueueHandle_t* Queue, FSMReg_t *FSMReg)
{
1a00096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000970:	b082      	sub	sp, #8
1a000972:	4605      	mov	r5, r0
1a000974:	460c      	mov	r4, r1
	volatile uint32_t tempTick;		//Guardo los valores del Tick counter para medir tiempos
	char uartBuff[10];

	/*------Maquina de estados------*/

	switch (FSMReg->state)
1a000976:	784b      	ldrb	r3, [r1, #1]
1a000978:	2b0a      	cmp	r3, #10
1a00097a:	f200 829b 	bhi.w	1a000eb4 <FSMPruebaDrivers+0x548>
1a00097e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a000982:	000b      	.short	0x000b
1a000984:	0079004c 	.word	0x0079004c
1a000988:	029900b5 	.word	0x029900b5
1a00098c:	010a0108 	.word	0x010a0108
1a000990:	024e018b 	.word	0x024e018b
1a000994:	02820299 	.word	0x02820299
	{
	case STATE_INIT:
	{	//inicialización
		gpioWrite(FSMReg->GPIOA, FALSE); //Le quito la alimentación al driver (no deberia estar activa en
1a000998:	2100      	movs	r1, #0
1a00099a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
1a00099e:	f003 ff3d 	bl	1a00481c <gpioWrite>
										 //este punto pero es buena practica asegurarse.
		gpioWrite(LED1, FALSE);	//El led1 indica si el GPIOA esta activo (solo para la demostracion)
1a0009a2:	2100      	movs	r1, #0
1a0009a4:	202b      	movs	r0, #43	; 0x2b
1a0009a6:	f003 ff39 	bl	1a00481c <gpioWrite>

		//Armo el mensaje de inicio de prueba y lo envio a la cola de salida de la UART
		//No usar sprintf porque llena la memoria
		strcpy(msg, "Inicio prueba N ");
1a0009aa:	4fb0      	ldr	r7, [pc, #704]	; (1a000c6c <FSMPruebaDrivers+0x300>)
1a0009ac:	4eb0      	ldr	r6, [pc, #704]	; (1a000c70 <FSMPruebaDrivers+0x304>)
1a0009ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a0009b0:	6038      	str	r0, [r7, #0]
1a0009b2:	6079      	str	r1, [r7, #4]
1a0009b4:	60ba      	str	r2, [r7, #8]
1a0009b6:	60fb      	str	r3, [r7, #12]
1a0009b8:	7833      	ldrb	r3, [r6, #0]
1a0009ba:	743b      	strb	r3, [r7, #16]
		msg2[0] = (char) (FSMReg->pruebaNum + '1');
1a0009bc:	7823      	ldrb	r3, [r4, #0]
1a0009be:	3331      	adds	r3, #49	; 0x31
1a0009c0:	49ac      	ldr	r1, [pc, #688]	; (1a000c74 <FSMPruebaDrivers+0x308>)
1a0009c2:	700b      	strb	r3, [r1, #0]
		msg2[1] = CR;
1a0009c4:	230d      	movs	r3, #13
1a0009c6:	704b      	strb	r3, [r1, #1]
		msg2[2] = LF;
1a0009c8:	230a      	movs	r3, #10
1a0009ca:	708b      	strb	r3, [r1, #2]
		msg2[3] = 0;
1a0009cc:	2600      	movs	r6, #0
1a0009ce:	70ce      	strb	r6, [r1, #3]
		strcat(msg, msg2);
1a0009d0:	4638      	mov	r0, r7
1a0009d2:	f004 fd0a 	bl	1a0053ea <strcat>
		sendStringToQueue(&UARTOutQueue, &OutQueueSem, &msg[0]);
1a0009d6:	463a      	mov	r2, r7
1a0009d8:	49a7      	ldr	r1, [pc, #668]	; (1a000c78 <FSMPruebaDrivers+0x30c>)
1a0009da:	48a8      	ldr	r0, [pc, #672]	; (1a000c7c <FSMPruebaDrivers+0x310>)
1a0009dc:	f7ff fd94 	bl	1a000508 <sendStringToQueue>
		FSMReg->state = STATE_DAC_SET;	//paso al siguiente estado
1a0009e0:	2301      	movs	r3, #1
1a0009e2:	7063      	strb	r3, [r4, #1]
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute luego
1a0009e4:	4633      	mov	r3, r6
1a0009e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0009ea:	4621      	mov	r1, r4
1a0009ec:	6828      	ldr	r0, [r5, #0]
1a0009ee:	f000 fe73 	bl	1a0016d8 <xQueueGenericSend>
		for (i = 0; i < 3; i++)
1a0009f2:	4633      	mov	r3, r6
1a0009f4:	e009      	b.n	1a000a0a <FSMPruebaDrivers+0x9e>
		{
			FSMReg->ADCCHAPROM[i] = 0;//inicializo los vectores de medicion (ADC)
1a0009f6:	1c9a      	adds	r2, r3, #2
1a0009f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
1a0009fc:	2100      	movs	r1, #0
1a0009fe:	6051      	str	r1, [r2, #4]
			FSMReg->ADCCHBPROM[i] = 0;//Aqui se van a guardar los valores promedio de las muestras tomadas
1a000a00:	1d9a      	adds	r2, r3, #6
1a000a02:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for (i = 0; i < 3; i++)
1a000a06:	3301      	adds	r3, #1
1a000a08:	b29b      	uxth	r3, r3
1a000a0a:	2b02      	cmp	r3, #2
1a000a0c:	d9f3      	bls.n	1a0009f6 <FSMPruebaDrivers+0x8a>
		}
		FSMReg->i = 0; //indice auxiliar de la instanciacion actual de la maquina de estados
1a000a0e:	2300      	movs	r3, #0
1a000a10:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		gpioWrite(LED1, FALSE);
		printf("ERROR");
		break;
	}
	return;
}
1a000a14:	b002      	add	sp, #8
1a000a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (FSMReg->i)
1a000a1a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
1a000a1e:	2b0a      	cmp	r3, #10
1a000a20:	d01e      	beq.n	1a000a60 <FSMPruebaDrivers+0xf4>
1a000a22:	2b14      	cmp	r3, #20
1a000a24:	d021      	beq.n	1a000a6a <FSMPruebaDrivers+0xfe>
1a000a26:	b1b3      	cbz	r3, 1a000a56 <FSMPruebaDrivers+0xea>
		xQueueSend(DACQueue[FSMReg->pruebaNum], &DACValue, portMAX_DELAY); //pongo en la cola del DAC el dato a escribir
1a000a28:	7826      	ldrb	r6, [r4, #0]
1a000a2a:	2300      	movs	r3, #0
1a000a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000a30:	a901      	add	r1, sp, #4
1a000a32:	4893      	ldr	r0, [pc, #588]	; (1a000c80 <FSMPruebaDrivers+0x314>)
1a000a34:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
1a000a38:	f000 fe4e 	bl	1a0016d8 <xQueueGenericSend>
		FSMReg->tickRegister = xTaskGetTickCount(); //tomo el estado del tick para la demora
1a000a3c:	f001 fc32 	bl	1a0022a4 <xTaskGetTickCount>
1a000a40:	6060      	str	r0, [r4, #4]
		FSMReg->state = STATE_WAIT_100MS;	//paso al siguiente estado
1a000a42:	2302      	movs	r3, #2
1a000a44:	7063      	strb	r3, [r4, #1]
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute
1a000a46:	2300      	movs	r3, #0
1a000a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000a4c:	4621      	mov	r1, r4
1a000a4e:	6828      	ldr	r0, [r5, #0]
1a000a50:	f000 fe42 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000a54:	e7de      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
			DACValue = (uint16_t) (DAC_SCALE * DACVAL0); 	//Valores a setear en el DAC convertidos a uint16
1a000a56:	f240 43d9 	movw	r3, #1241	; 0x4d9
1a000a5a:	f8ad 3004 	strh.w	r3, [sp, #4]
			break;											//para cada medicion
1a000a5e:	e7e3      	b.n	1a000a28 <FSMPruebaDrivers+0xbc>
			DACValue = (uint16_t) (DAC_SCALE * DACVAL1);
1a000a60:	f640 13b2 	movw	r3, #2482	; 0x9b2
1a000a64:	f8ad 3004 	strh.w	r3, [sp, #4]
			break;
1a000a68:	e7de      	b.n	1a000a28 <FSMPruebaDrivers+0xbc>
			DACValue = (uint16_t) (DAC_SCALE * DACVAL2);
1a000a6a:	f640 638b 	movw	r3, #3723	; 0xe8b
1a000a6e:	f8ad 3004 	strh.w	r3, [sp, #4]
			break;
1a000a72:	e7d9      	b.n	1a000a28 <FSMPruebaDrivers+0xbc>
		tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a000a74:	f001 fc16 	bl	1a0022a4 <xTaskGetTickCount>
1a000a78:	9000      	str	r0, [sp, #0]
		if (tempTick >= FSMReg->tickRegister) //chequeo que el Tick counter no se haya reiniciado
1a000a7a:	6862      	ldr	r2, [r4, #4]
1a000a7c:	9b00      	ldr	r3, [sp, #0]
1a000a7e:	429a      	cmp	r2, r3
1a000a80:	d818      	bhi.n	1a000ab4 <FSMPruebaDrivers+0x148>
			if ((tempTick - FSMReg->tickRegister)
1a000a82:	9b00      	ldr	r3, [sp, #0]
1a000a84:	1a9b      	subs	r3, r3, r2
1a000a86:	2b64      	cmp	r3, #100	; 0x64
1a000a88:	d90c      	bls.n	1a000aa4 <FSMPruebaDrivers+0x138>
				FSMReg->tickRegister = xTaskGetTickCount(); //guardo el tick por si se necesita reiniciar
1a000a8a:	f001 fc0b 	bl	1a0022a4 <xTaskGetTickCount>
1a000a8e:	6060      	str	r0, [r4, #4]
				FSMReg->state = STATE_DRIVER_EN_AND_DELAY;	//paso al siguiente estado
1a000a90:	2303      	movs	r3, #3
1a000a92:	7063      	strb	r3, [r4, #1]
				xQueueSend(*Queue, FSMReg, portMAX_DELAY); 	//lo envio a la cola para que se ejecute
1a000a94:	2300      	movs	r3, #0
1a000a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000a9a:	4621      	mov	r1, r4
1a000a9c:	6828      	ldr	r0, [r5, #0]
1a000a9e:	f000 fe1b 	bl	1a0016d8 <xQueueGenericSend>
1a000aa2:	e7b7      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
				xQueueSend(*Queue, FSMReg, portMAX_DELAY); //no hay cambio de estado, envio lo mismo a la cola
1a000aa4:	2300      	movs	r3, #0
1a000aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000aaa:	4621      	mov	r1, r4
1a000aac:	6828      	ldr	r0, [r5, #0]
1a000aae:	f000 fe13 	bl	1a0016d8 <xQueueGenericSend>
1a000ab2:	e7af      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
			if ((tempTick + (0xFFFF - FSMReg->tickRegister))
1a000ab4:	9b00      	ldr	r3, [sp, #0]
1a000ab6:	1a9b      	subs	r3, r3, r2
1a000ab8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a000abc:	33ff      	adds	r3, #255	; 0xff
1a000abe:	2b64      	cmp	r3, #100	; 0x64
1a000ac0:	d90c      	bls.n	1a000adc <FSMPruebaDrivers+0x170>
				FSMReg->tickRegister = xTaskGetTickCount(); //guardo el tick por si se necesita reiniciar
1a000ac2:	f001 fbef 	bl	1a0022a4 <xTaskGetTickCount>
1a000ac6:	6060      	str	r0, [r4, #4]
				FSMReg->state = STATE_DRIVER_EN_AND_DELAY;//paso al siguiente estado
1a000ac8:	2303      	movs	r3, #3
1a000aca:	7063      	strb	r3, [r4, #1]
				xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute
1a000acc:	2300      	movs	r3, #0
1a000ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ad2:	4621      	mov	r1, r4
1a000ad4:	6828      	ldr	r0, [r5, #0]
1a000ad6:	f000 fdff 	bl	1a0016d8 <xQueueGenericSend>
1a000ada:	e79b      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
				xQueueSend(*Queue, FSMReg, portMAX_DELAY); //no hay cambio de estado, envio lo mismo a la cola
1a000adc:	2300      	movs	r3, #0
1a000ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ae2:	4621      	mov	r1, r4
1a000ae4:	6828      	ldr	r0, [r5, #0]
1a000ae6:	f000 fdf7 	bl	1a0016d8 <xQueueGenericSend>
1a000aea:	e793      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
		switch (FSMReg->i)
1a000aec:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
1a000af0:	2b1d      	cmp	r3, #29
1a000af2:	d82b      	bhi.n	1a000b4c <FSMPruebaDrivers+0x1e0>
1a000af4:	e8df f003 	tbb	[pc, r3]
1a000af8:	1b1b1b12 	.word	0x1b1b1b12
1a000afc:	1b1b1b1b 	.word	0x1b1b1b1b
1a000b00:	1b1b0f1b 	.word	0x1b1b0f1b
1a000b04:	1b1b1b1b 	.word	0x1b1b1b1b
1a000b08:	0f1b1b1b 	.word	0x0f1b1b1b
1a000b0c:	1b1b1b1b 	.word	0x1b1b1b1b
1a000b10:	1b1b1b1b 	.word	0x1b1b1b1b
1a000b14:	0f1b      	.short	0x0f1b
			FSMReg->state = STATE_REQUEST_ADCS;	//paso al siguiente estado
1a000b16:	2305      	movs	r3, #5
1a000b18:	704b      	strb	r3, [r1, #1]
			break;
1a000b1a:	e00a      	b.n	1a000b32 <FSMPruebaDrivers+0x1c6>
			gpioWrite(FSMReg->GPIOA, TRUE);	 //Enciendo el driver
1a000b1c:	2101      	movs	r1, #1
1a000b1e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
1a000b22:	f003 fe7b 	bl	1a00481c <gpioWrite>
			gpioWrite(LED1, TRUE); 			//enciendo el led para que se vea que el driver esta encendido
1a000b26:	2101      	movs	r1, #1
1a000b28:	202b      	movs	r0, #43	; 0x2b
1a000b2a:	f003 fe77 	bl	1a00481c <gpioWrite>
			FSMReg->state = STATE_WAIT_100MS;	//vuelvo a hacer la demora
1a000b2e:	2302      	movs	r3, #2
1a000b30:	7063      	strb	r3, [r4, #1]
		FSMReg->i++; //incremento el indice para el siguiente reingreso a la FSM
1a000b32:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
1a000b36:	3301      	adds	r3, #1
1a000b38:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //Envio el estado la cola para que se ejecute luego
1a000b3c:	2300      	movs	r3, #0
1a000b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b42:	4621      	mov	r1, r4
1a000b44:	6828      	ldr	r0, [r5, #0]
1a000b46:	f000 fdc7 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000b4a:	e763      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
			printf("ERROR"); //no debe llegar nunca aqui
1a000b4c:	484d      	ldr	r0, [pc, #308]	; (1a000c84 <FSMPruebaDrivers+0x318>)
1a000b4e:	f004 fb8d 	bl	1a00526c <iprintf>
1a000b52:	e7fe      	b.n	1a000b52 <FSMPruebaDrivers+0x1e6>
			xSemaphoreGive(ADCReadSemCount[FSMReg->ADCCHA]); //pido 10 muestras a dos canales de ADC
1a000b54:	7a20      	ldrb	r0, [r4, #8]
1a000b56:	4f4c      	ldr	r7, [pc, #304]	; (1a000c88 <FSMPruebaDrivers+0x31c>)
1a000b58:	2300      	movs	r3, #0
1a000b5a:	461a      	mov	r2, r3
1a000b5c:	4619      	mov	r1, r3
1a000b5e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
1a000b62:	f000 fdb9 	bl	1a0016d8 <xQueueGenericSend>
			xSemaphoreGive(ADCReadSemCount[FSMReg->ADCCHB]);
1a000b66:	7a60      	ldrb	r0, [r4, #9]
1a000b68:	2300      	movs	r3, #0
1a000b6a:	461a      	mov	r2, r3
1a000b6c:	4619      	mov	r1, r3
1a000b6e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
1a000b72:	f000 fdb1 	bl	1a0016d8 <xQueueGenericSend>
		for (i = 0; i < 10; i++)
1a000b76:	3601      	adds	r6, #1
1a000b78:	b2b6      	uxth	r6, r6
1a000b7a:	2e09      	cmp	r6, #9
1a000b7c:	d9ea      	bls.n	1a000b54 <FSMPruebaDrivers+0x1e8>
		FSMReg->state = STATE_READ_ADCS;	//paso al siguiente estado
1a000b7e:	2306      	movs	r3, #6
1a000b80:	7063      	strb	r3, [r4, #1]
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute luego
1a000b82:	2300      	movs	r3, #0
1a000b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b88:	4621      	mov	r1, r4
1a000b8a:	6828      	ldr	r0, [r5, #0]
1a000b8c:	f000 fda4 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000b90:	e740      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
		for (i = 0; i < 10; i++)
1a000b92:	2600      	movs	r6, #0
1a000b94:	e7f1      	b.n	1a000b7a <FSMPruebaDrivers+0x20e>
		switch (FSMReg->i)
1a000b96:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
1a000b9a:	2b14      	cmp	r3, #20
1a000b9c:	d007      	beq.n	1a000bae <FSMPruebaDrivers+0x242>
1a000b9e:	2b1e      	cmp	r3, #30
1a000ba0:	d007      	beq.n	1a000bb2 <FSMPruebaDrivers+0x246>
1a000ba2:	2b0a      	cmp	r3, #10
1a000ba4:	d003      	beq.n	1a000bae <FSMPruebaDrivers+0x242>
			printf("ERROR"); //no debe llegar nunca aqui
1a000ba6:	4837      	ldr	r0, [pc, #220]	; (1a000c84 <FSMPruebaDrivers+0x318>)
1a000ba8:	f004 fb60 	bl	1a00526c <iprintf>
1a000bac:	e7fe      	b.n	1a000bac <FSMPruebaDrivers+0x240>
			FSMReg->state = STATE_DAC_SET;//si todavia no llegue a la tercer medicion vuelvo al
1a000bae:	2201      	movs	r2, #1
1a000bb0:	7062      	strb	r2, [r4, #1]
			if (FSMReg->i == 30)				//si estoy en la 3er medicion
1a000bb2:	2b1e      	cmp	r3, #30
1a000bb4:	d101      	bne.n	1a000bba <FSMPruebaDrivers+0x24e>
				FSMReg->state = STATE_CHECK;	//paso al siguiente estado
1a000bb6:	2307      	movs	r3, #7
1a000bb8:	7063      	strb	r3, [r4, #1]
		for (i = 0; i < 10; i++)
1a000bba:	2600      	movs	r6, #0
1a000bbc:	e030      	b.n	1a000c20 <FSMPruebaDrivers+0x2b4>
				xQueueReceive(ADCQueue[FSMReg->ADCCHA], &ADCDataTemp,portMAX_DELAY);
1a000bbe:	7a23      	ldrb	r3, [r4, #8]
1a000bc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1a000c94 <FSMPruebaDrivers+0x328>
1a000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000bc8:	f10d 0106 	add.w	r1, sp, #6
1a000bcc:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
1a000bd0:	f000 febe 	bl	1a001950 <xQueueReceive>
				FSMReg->ADCCHAPROM[(FSMReg->i / 10) - 1] += (ADCDataTemp); //el indice FSMReg->i hay que dividirlo por 10 porque va de 10 en 10.
1a000bd4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
1a000bd8:	4f2c      	ldr	r7, [pc, #176]	; (1a000c8c <FSMPruebaDrivers+0x320>)
1a000bda:	fba7 2303 	umull	r2, r3, r7, r3
1a000bde:	08db      	lsrs	r3, r3, #3
1a000be0:	3301      	adds	r3, #1
1a000be2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1a000be6:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
1a000bea:	685a      	ldr	r2, [r3, #4]
1a000bec:	440a      	add	r2, r1
1a000bee:	605a      	str	r2, [r3, #4]
				xQueueReceive(ADCQueue[FSMReg->ADCCHB], &ADCDataTemp,portMAX_DELAY);
1a000bf0:	7a63      	ldrb	r3, [r4, #9]
1a000bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000bf6:	f10d 0106 	add.w	r1, sp, #6
1a000bfa:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
1a000bfe:	f000 fea7 	bl	1a001950 <xQueueReceive>
				FSMReg->ADCCHBPROM[(FSMReg->i / 10) - 1] += (ADCDataTemp);
1a000c02:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
1a000c06:	fba7 2303 	umull	r2, r3, r7, r3
1a000c0a:	08db      	lsrs	r3, r3, #3
1a000c0c:	3305      	adds	r3, #5
1a000c0e:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
1a000c12:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000c16:	440a      	add	r2, r1
1a000c18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for (i = 0; i < 10; i++)	//calculo los promedios de las mediciones
1a000c1c:	3601      	adds	r6, #1
1a000c1e:	b2b6      	uxth	r6, r6
1a000c20:	2e09      	cmp	r6, #9
1a000c22:	d9cc      	bls.n	1a000bbe <FSMPruebaDrivers+0x252>
			FSMReg->ADCCHAPROM[(FSMReg->i / 10) - 1] =FSMReg->ADCCHAPROM[(FSMReg->i / 10) - 1] / 10;
1a000c24:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
1a000c28:	4a18      	ldr	r2, [pc, #96]	; (1a000c8c <FSMPruebaDrivers+0x320>)
1a000c2a:	fba2 2303 	umull	r2, r3, r2, r3
1a000c2e:	08db      	lsrs	r3, r3, #3
1a000c30:	1c58      	adds	r0, r3, #1
1a000c32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
1a000c36:	6842      	ldr	r2, [r0, #4]
1a000c38:	4915      	ldr	r1, [pc, #84]	; (1a000c90 <FSMPruebaDrivers+0x324>)
1a000c3a:	fb81 7602 	smull	r7, r6, r1, r2
1a000c3e:	17d2      	asrs	r2, r2, #31
1a000c40:	ebc2 02a6 	rsb	r2, r2, r6, asr #2
1a000c44:	6042      	str	r2, [r0, #4]
			FSMReg->ADCCHBPROM[(FSMReg->i / 10) - 1] =FSMReg->ADCCHBPROM[(FSMReg->i / 10) - 1] / 10;
1a000c46:	3305      	adds	r3, #5
1a000c48:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000c4c:	fb81 0102 	smull	r0, r1, r1, r2
1a000c50:	17d2      	asrs	r2, r2, #31
1a000c52:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
1a000c56:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			xQueueSend(*Queue, FSMReg, portMAX_DELAY); //Envio el estado a la cola para que se ejecute luego
1a000c5a:	2300      	movs	r3, #0
1a000c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c60:	4621      	mov	r1, r4
1a000c62:	6828      	ldr	r0, [r5, #0]
1a000c64:	f000 fd38 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000c68:	e6d4      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
1a000c6a:	bf00      	nop
1a000c6c:	10002bd4 	.word	0x10002bd4
1a000c70:	1a005d14 	.word	0x1a005d14
1a000c74:	10002c24 	.word	0x10002c24
1a000c78:	10002bbc 	.word	0x10002bbc
1a000c7c:	10002bd0 	.word	0x10002bd0
1a000c80:	10002bac 	.word	0x10002bac
1a000c84:	1a005d28 	.word	0x1a005d28
1a000c88:	10002bb4 	.word	0x10002bb4
1a000c8c:	cccccccd 	.word	0xcccccccd
1a000c90:	66666667 	.word	0x66666667
1a000c94:	10002bc0 	.word	0x10002bc0
		strcpy(msg, "Resultados Prueba N ");
1a000c98:	4f8d      	ldr	r7, [pc, #564]	; (1a000ed0 <FSMPruebaDrivers+0x564>)
1a000c9a:	4e8e      	ldr	r6, [pc, #568]	; (1a000ed4 <FSMPruebaDrivers+0x568>)
1a000c9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000c9e:	6038      	str	r0, [r7, #0]
1a000ca0:	6079      	str	r1, [r7, #4]
1a000ca2:	60ba      	str	r2, [r7, #8]
1a000ca4:	60fb      	str	r3, [r7, #12]
1a000ca6:	6830      	ldr	r0, [r6, #0]
1a000ca8:	6138      	str	r0, [r7, #16]
1a000caa:	7933      	ldrb	r3, [r6, #4]
1a000cac:	753b      	strb	r3, [r7, #20]
		int64ToString((FSMReg->pruebaNum + 1), msg2, 10);
1a000cae:	7820      	ldrb	r0, [r4, #0]
1a000cb0:	3001      	adds	r0, #1
1a000cb2:	4e89      	ldr	r6, [pc, #548]	; (1a000ed8 <FSMPruebaDrivers+0x56c>)
1a000cb4:	230a      	movs	r3, #10
1a000cb6:	4632      	mov	r2, r6
1a000cb8:	17c1      	asrs	r1, r0, #31
1a000cba:	f003 fe1f 	bl	1a0048fc <int64ToString>
		strcat(msg, msg2);
1a000cbe:	4631      	mov	r1, r6
1a000cc0:	4638      	mov	r0, r7
1a000cc2:	f004 fb92 	bl	1a0053ea <strcat>
		if ((ADC_A0MIN < FSMReg->ADCCHAPROM[0])	//si la medicion 1 del canal A esta entre el valor Minimo
1a000cc6:	68e3      	ldr	r3, [r4, #12]
				&& (FSMReg->ADCCHAPROM[0] < ADC_A0MAX )//y el valor Maximo
1a000cc8:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
1a000ccc:	3b01      	subs	r3, #1
		if ((ADC_A0MIN < FSMReg->ADCCHAPROM[0])	//si la medicion 1 del canal A esta entre el valor Minimo
1a000cce:	f640 427e 	movw	r2, #3198	; 0xc7e
1a000cd2:	4293      	cmp	r3, r2
1a000cd4:	d806      	bhi.n	1a000ce4 <FSMPruebaDrivers+0x378>
				&& (ADC_B0MIN < FSMReg->ADCCHBPROM[0])	// y lo mismo para el canal B
1a000cd6:	69a3      	ldr	r3, [r4, #24]
1a000cd8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
1a000cdc:	dd02      	ble.n	1a000ce4 <FSMPruebaDrivers+0x378>
				&& (FSMReg->ADCCHBPROM[0] < ADC_B0MAX ))
1a000cde:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
1a000ce2:	db68      	blt.n	1a000db6 <FSMPruebaDrivers+0x44a>
			strcat(msg, "\n\tMedicion 1 NO PASA \n");	//Igual para la medicion 2 y 3
1a000ce4:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 1a000ed0 <FSMPruebaDrivers+0x564>
1a000ce8:	4640      	mov	r0, r8
1a000cea:	f004 fb8d 	bl	1a005408 <strlen>
1a000cee:	4684      	mov	ip, r0
1a000cf0:	eb00 0708 	add.w	r7, r0, r8
1a000cf4:	4e79      	ldr	r6, [pc, #484]	; (1a000edc <FSMPruebaDrivers+0x570>)
1a000cf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000cf8:	f84c 0008 	str.w	r0, [ip, r8]
1a000cfc:	6079      	str	r1, [r7, #4]
1a000cfe:	60ba      	str	r2, [r7, #8]
1a000d00:	60fb      	str	r3, [r7, #12]
1a000d02:	6830      	ldr	r0, [r6, #0]
1a000d04:	6138      	str	r0, [r7, #16]
1a000d06:	88b2      	ldrh	r2, [r6, #4]
1a000d08:	79b3      	ldrb	r3, [r6, #6]
1a000d0a:	82ba      	strh	r2, [r7, #20]
1a000d0c:	75bb      	strb	r3, [r7, #22]
		if ((ADC_A1MIN < FSMReg->ADCCHAPROM[1])
1a000d0e:	6923      	ldr	r3, [r4, #16]
				&& (FSMReg->ADCCHAPROM[1] < ADC_A1MAX )
1a000d10:	f5a3 5361 	sub.w	r3, r3, #14400	; 0x3840
1a000d14:	3b01      	subs	r3, #1
		if ((ADC_A1MIN < FSMReg->ADCCHAPROM[1])
1a000d16:	f640 427e 	movw	r2, #3198	; 0xc7e
1a000d1a:	4293      	cmp	r3, r2
1a000d1c:	d807      	bhi.n	1a000d2e <FSMPruebaDrivers+0x3c2>
				&& (ADC_B1MIN < FSMReg->ADCCHBPROM[1])
1a000d1e:	69e3      	ldr	r3, [r4, #28]
1a000d20:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
1a000d24:	dd03      	ble.n	1a000d2e <FSMPruebaDrivers+0x3c2>
				&& (FSMReg->ADCCHBPROM[1] < ADC_B1MAX ))
1a000d26:	f242 225f 	movw	r2, #8799	; 0x225f
1a000d2a:	4293      	cmp	r3, r2
1a000d2c:	dd53      	ble.n	1a000dd6 <FSMPruebaDrivers+0x46a>
			strcat(msg, "\tMedicion 2 NO PASA \n");
1a000d2e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 1a000ed0 <FSMPruebaDrivers+0x564>
1a000d32:	4640      	mov	r0, r8
1a000d34:	f004 fb68 	bl	1a005408 <strlen>
1a000d38:	4684      	mov	ip, r0
1a000d3a:	eb00 0708 	add.w	r7, r0, r8
1a000d3e:	4e68      	ldr	r6, [pc, #416]	; (1a000ee0 <FSMPruebaDrivers+0x574>)
1a000d40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000d42:	f84c 0008 	str.w	r0, [ip, r8]
1a000d46:	6079      	str	r1, [r7, #4]
1a000d48:	60ba      	str	r2, [r7, #8]
1a000d4a:	60fb      	str	r3, [r7, #12]
1a000d4c:	6830      	ldr	r0, [r6, #0]
1a000d4e:	6138      	str	r0, [r7, #16]
1a000d50:	88b3      	ldrh	r3, [r6, #4]
1a000d52:	82bb      	strh	r3, [r7, #20]
		if ((ADC_A2MIN < FSMReg->ADCCHAPROM[2])
1a000d54:	6963      	ldr	r3, [r4, #20]
				&& (FSMReg->ADCCHAPROM[2] < ADC_A2MAX )
1a000d56:	f5a3 43af 	sub.w	r3, r3, #22400	; 0x5780
1a000d5a:	3b01      	subs	r3, #1
		if ((ADC_A2MIN < FSMReg->ADCCHAPROM[2])
1a000d5c:	f640 427e 	movw	r2, #3198	; 0xc7e
1a000d60:	4293      	cmp	r3, r2
1a000d62:	d806      	bhi.n	1a000d72 <FSMPruebaDrivers+0x406>
				&& (ADC_B2MIN < FSMReg->ADCCHBPROM[2])
1a000d64:	6a23      	ldr	r3, [r4, #32]
1a000d66:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
1a000d6a:	dd02      	ble.n	1a000d72 <FSMPruebaDrivers+0x406>
				&& (FSMReg->ADCCHBPROM[2] < ADC_B2MAX ))
1a000d6c:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
1a000d70:	db43      	blt.n	1a000dfa <FSMPruebaDrivers+0x48e>
			strcat(msg, "\tMedicion 3 NO PASA \n");
1a000d72:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1a000ed0 <FSMPruebaDrivers+0x564>
1a000d76:	4640      	mov	r0, r8
1a000d78:	f004 fb46 	bl	1a005408 <strlen>
1a000d7c:	4684      	mov	ip, r0
1a000d7e:	eb00 0708 	add.w	r7, r0, r8
1a000d82:	4e58      	ldr	r6, [pc, #352]	; (1a000ee4 <FSMPruebaDrivers+0x578>)
1a000d84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000d86:	f84c 0008 	str.w	r0, [ip, r8]
1a000d8a:	6079      	str	r1, [r7, #4]
1a000d8c:	60ba      	str	r2, [r7, #8]
1a000d8e:	60fb      	str	r3, [r7, #12]
1a000d90:	6830      	ldr	r0, [r6, #0]
1a000d92:	6138      	str	r0, [r7, #16]
1a000d94:	88b3      	ldrh	r3, [r6, #4]
1a000d96:	82bb      	strh	r3, [r7, #20]
		sendStringToQueue(&UARTOutQueue, &OutQueueSem, &msg[0]);
1a000d98:	4a4d      	ldr	r2, [pc, #308]	; (1a000ed0 <FSMPruebaDrivers+0x564>)
1a000d9a:	4953      	ldr	r1, [pc, #332]	; (1a000ee8 <FSMPruebaDrivers+0x57c>)
1a000d9c:	4853      	ldr	r0, [pc, #332]	; (1a000eec <FSMPruebaDrivers+0x580>)
1a000d9e:	f7ff fbb3 	bl	1a000508 <sendStringToQueue>
		FSMReg->state = STATE_IDLE;	//paso al estado IDLE
1a000da2:	230a      	movs	r3, #10
1a000da4:	7063      	strb	r3, [r4, #1]
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute
1a000da6:	2300      	movs	r3, #0
1a000da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000dac:	4621      	mov	r1, r4
1a000dae:	6828      	ldr	r0, [r5, #0]
1a000db0:	f000 fc92 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000db4:	e62e      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
			strcat(msg, "\n\tMedicion 1 OK \n");		//entonces la medicion 1 esta OK
1a000db6:	46b8      	mov	r8, r7
1a000db8:	4638      	mov	r0, r7
1a000dba:	f004 fb25 	bl	1a005408 <strlen>
1a000dbe:	4684      	mov	ip, r0
1a000dc0:	19c7      	adds	r7, r0, r7
1a000dc2:	4e4b      	ldr	r6, [pc, #300]	; (1a000ef0 <FSMPruebaDrivers+0x584>)
1a000dc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000dc6:	f84c 0008 	str.w	r0, [ip, r8]
1a000dca:	6079      	str	r1, [r7, #4]
1a000dcc:	60ba      	str	r2, [r7, #8]
1a000dce:	60fb      	str	r3, [r7, #12]
1a000dd0:	8833      	ldrh	r3, [r6, #0]
1a000dd2:	823b      	strh	r3, [r7, #16]
1a000dd4:	e79b      	b.n	1a000d0e <FSMPruebaDrivers+0x3a2>
			strcat(msg, "\tMedicion 2 OK \n");
1a000dd6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1a000ed0 <FSMPruebaDrivers+0x564>
1a000dda:	4640      	mov	r0, r8
1a000ddc:	f004 fb14 	bl	1a005408 <strlen>
1a000de0:	4684      	mov	ip, r0
1a000de2:	eb00 0708 	add.w	r7, r0, r8
1a000de6:	4e43      	ldr	r6, [pc, #268]	; (1a000ef4 <FSMPruebaDrivers+0x588>)
1a000de8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000dea:	f84c 0008 	str.w	r0, [ip, r8]
1a000dee:	6079      	str	r1, [r7, #4]
1a000df0:	60ba      	str	r2, [r7, #8]
1a000df2:	60fb      	str	r3, [r7, #12]
1a000df4:	7833      	ldrb	r3, [r6, #0]
1a000df6:	743b      	strb	r3, [r7, #16]
1a000df8:	e7ac      	b.n	1a000d54 <FSMPruebaDrivers+0x3e8>
			strcat(msg, "\tMedicion 3 OK \n");
1a000dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1a000ed0 <FSMPruebaDrivers+0x564>
1a000dfe:	4640      	mov	r0, r8
1a000e00:	f004 fb02 	bl	1a005408 <strlen>
1a000e04:	4684      	mov	ip, r0
1a000e06:	eb00 0708 	add.w	r7, r0, r8
1a000e0a:	4e3b      	ldr	r6, [pc, #236]	; (1a000ef8 <FSMPruebaDrivers+0x58c>)
1a000e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000e0e:	f84c 0008 	str.w	r0, [ip, r8]
1a000e12:	6079      	str	r1, [r7, #4]
1a000e14:	60ba      	str	r2, [r7, #8]
1a000e16:	60fb      	str	r3, [r7, #12]
1a000e18:	7833      	ldrb	r3, [r6, #0]
1a000e1a:	743b      	strb	r3, [r7, #16]
1a000e1c:	e7bc      	b.n	1a000d98 <FSMPruebaDrivers+0x42c>
		gpioWrite(FSMReg->GPIOA, FALSE); //Apago el driver
1a000e1e:	2100      	movs	r1, #0
1a000e20:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
1a000e24:	f003 fcfa 	bl	1a00481c <gpioWrite>
		gpioWrite(LED1, FALSE);
1a000e28:	2100      	movs	r1, #0
1a000e2a:	202b      	movs	r0, #43	; 0x2b
1a000e2c:	f003 fcf6 	bl	1a00481c <gpioWrite>
		strcpy(msg, "\n\nPrueba N ");
1a000e30:	4e27      	ldr	r6, [pc, #156]	; (1a000ed0 <FSMPruebaDrivers+0x564>)
1a000e32:	4b32      	ldr	r3, [pc, #200]	; (1a000efc <FSMPruebaDrivers+0x590>)
1a000e34:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000e36:	6030      	str	r0, [r6, #0]
1a000e38:	6071      	str	r1, [r6, #4]
1a000e3a:	60b2      	str	r2, [r6, #8]
		int64ToString(FSMReg->pruebaNum, msg2, 10);
1a000e3c:	4f26      	ldr	r7, [pc, #152]	; (1a000ed8 <FSMPruebaDrivers+0x56c>)
1a000e3e:	230a      	movs	r3, #10
1a000e40:	463a      	mov	r2, r7
1a000e42:	7820      	ldrb	r0, [r4, #0]
1a000e44:	2100      	movs	r1, #0
1a000e46:	f003 fd59 	bl	1a0048fc <int64ToString>
		strcat(msg, msg2);
1a000e4a:	4639      	mov	r1, r7
1a000e4c:	4630      	mov	r0, r6
1a000e4e:	f004 facc 	bl	1a0053ea <strcat>
		strcat(msg, " detenida\n\n");
1a000e52:	4630      	mov	r0, r6
1a000e54:	f004 fad8 	bl	1a005408 <strlen>
1a000e58:	4684      	mov	ip, r0
1a000e5a:	1987      	adds	r7, r0, r6
1a000e5c:	4b28      	ldr	r3, [pc, #160]	; (1a000f00 <FSMPruebaDrivers+0x594>)
1a000e5e:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000e60:	f84c 0006 	str.w	r0, [ip, r6]
1a000e64:	6079      	str	r1, [r7, #4]
1a000e66:	60ba      	str	r2, [r7, #8]
		sendStringToQueue(&UARTOutQueue, &OutQueueSem, &msg[0]); //envio mensaje de Prueba abortada
1a000e68:	4632      	mov	r2, r6
1a000e6a:	491f      	ldr	r1, [pc, #124]	; (1a000ee8 <FSMPruebaDrivers+0x57c>)
1a000e6c:	481f      	ldr	r0, [pc, #124]	; (1a000eec <FSMPruebaDrivers+0x580>)
1a000e6e:	f7ff fb4b 	bl	1a000508 <sendStringToQueue>
		FSMReg->state = STATE_IDLE;	//paso al estado IDLE
1a000e72:	230a      	movs	r3, #10
1a000e74:	7063      	strb	r3, [r4, #1]
		xQueueSend(*Queue, FSMReg, portMAX_DELAY); //lo envio a la cola para que se ejecute
1a000e76:	2300      	movs	r3, #0
1a000e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000e7c:	4621      	mov	r1, r4
1a000e7e:	6828      	ldr	r0, [r5, #0]
1a000e80:	f000 fc2a 	bl	1a0016d8 <xQueueGenericSend>
		break;
1a000e84:	e5c6      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
		DACValue = 0; //pongo el DAC en cero
1a000e86:	2500      	movs	r5, #0
1a000e88:	a902      	add	r1, sp, #8
1a000e8a:	f821 5d04 	strh.w	r5, [r1, #-4]!
		xQueueSend(DACQueue[FSMReg->pruebaNum], &DACValue, portMAX_DELAY); //pongo en la cola el dato a escribir
1a000e8e:	7826      	ldrb	r6, [r4, #0]
1a000e90:	462b      	mov	r3, r5
1a000e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000e96:	481b      	ldr	r0, [pc, #108]	; (1a000f04 <FSMPruebaDrivers+0x598>)
1a000e98:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
1a000e9c:	f000 fc1c 	bl	1a0016d8 <xQueueGenericSend>
		gpioWrite(FSMReg->GPIOA, FALSE); //Apago el driver
1a000ea0:	4629      	mov	r1, r5
1a000ea2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
1a000ea6:	f003 fcb9 	bl	1a00481c <gpioWrite>
		gpioWrite(LED1, FALSE);
1a000eaa:	4629      	mov	r1, r5
1a000eac:	202b      	movs	r0, #43	; 0x2b
1a000eae:	f003 fcb5 	bl	1a00481c <gpioWrite>
		break;
1a000eb2:	e5af      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
		gpioWrite(FSMReg->GPIOA, FALSE); //Apago el driver
1a000eb4:	2100      	movs	r1, #0
1a000eb6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
1a000eba:	f003 fcaf 	bl	1a00481c <gpioWrite>
		gpioWrite(LED1, FALSE);
1a000ebe:	2100      	movs	r1, #0
1a000ec0:	202b      	movs	r0, #43	; 0x2b
1a000ec2:	f003 fcab 	bl	1a00481c <gpioWrite>
		printf("ERROR");
1a000ec6:	4810      	ldr	r0, [pc, #64]	; (1a000f08 <FSMPruebaDrivers+0x59c>)
1a000ec8:	f004 f9d0 	bl	1a00526c <iprintf>
	return;
1a000ecc:	e5a2      	b.n	1a000a14 <FSMPruebaDrivers+0xa8>
1a000ece:	bf00      	nop
1a000ed0:	10002bd4 	.word	0x10002bd4
1a000ed4:	1a005d30 	.word	0x1a005d30
1a000ed8:	10002c24 	.word	0x10002c24
1a000edc:	1a005d5c 	.word	0x1a005d5c
1a000ee0:	1a005d88 	.word	0x1a005d88
1a000ee4:	1a005db4 	.word	0x1a005db4
1a000ee8:	10002bbc 	.word	0x10002bbc
1a000eec:	10002bd0 	.word	0x10002bd0
1a000ef0:	1a005d48 	.word	0x1a005d48
1a000ef4:	1a005d74 	.word	0x1a005d74
1a000ef8:	1a005da0 	.word	0x1a005da0
1a000efc:	1a005dcc 	.word	0x1a005dcc
1a000f00:	1a005dd8 	.word	0x1a005dd8
1a000f04:	10002bac 	.word	0x10002bac
1a000f08:	1a005d28 	.word	0x1a005d28

1a000f0c <ads1115Init>:
//Esta funcion escribe el registro Config  segun la informacion que le paso
//por un puntero a la estructura que contiene todos los datos de un ADS1115
//Si devuelve TRUE es que termino de enviar
//si devuelve FALSE hay que volver a llamar a la funcion hasta que devuelva TRUE porque no termino
bool_t ads1115Init ( adsData_t *adsDataX)
	{
1a000f0c:	b570      	push	{r4, r5, r6, lr}
1a000f0e:	b086      	sub	sp, #24
1a000f10:	4604      	mov	r4, r0
	uint8_t modeHI;
	uint8_t modeLO;



	switch (adsDataX->comState)
1a000f12:	7a03      	ldrb	r3, [r0, #8]
1a000f14:	b12b      	cbz	r3, 1a000f22 <ads1115Init+0x16>
1a000f16:	2b01      	cmp	r3, #1
1a000f18:	d027      	beq.n	1a000f6a <ads1115Init+0x5e>
				ret = TRUE;
			}
			break;
		}
		default:
			ret = FALSE;
1a000f1a:	4b1e      	ldr	r3, [pc, #120]	; (1a000f94 <ads1115Init+0x88>)
1a000f1c:	2200      	movs	r2, #0
1a000f1e:	601a      	str	r2, [r3, #0]
			break;
1a000f20:	e01f      	b.n	1a000f62 <ads1115Init+0x56>
			modeHI = adsDataX->mode >>8;	//Reparto la variable mode en 2 bytes
1a000f22:	88c3      	ldrh	r3, [r0, #6]
1a000f24:	0a1a      	lsrs	r2, r3, #8
			txBuffer[0] = (uint8_t)ADS1115_CONFIG_REG; 	//Indico que voy a escribir el registro de configuración
1a000f26:	2601      	movs	r6, #1
1a000f28:	f88d 6004 	strb.w	r6, [sp, #4]
			txBuffer[1] = modeHI; 		//le paso la parte alta al handler
1a000f2c:	f88d 2005 	strb.w	r2, [sp, #5]
			txBuffer[2] = modeLO;		//le paso la parte baja	al handler
1a000f30:	f88d 3006 	strb.w	r3, [sp, #6]
			i2cData.slaveAddr = adsDataX->i2cSlaveAddress; //
1a000f34:	7903      	ldrb	r3, [r0, #4]
1a000f36:	f88d 3008 	strb.w	r3, [sp, #8]
			i2cData.options   = 0;
1a000f3a:	2500      	movs	r5, #0
1a000f3c:	f88d 5009 	strb.w	r5, [sp, #9]
			i2cData.status    = 0;
1a000f40:	f8ad 500a 	strh.w	r5, [sp, #10]
			i2cData.txBuff    = txBuffer;
1a000f44:	ab01      	add	r3, sp, #4
1a000f46:	9304      	str	r3, [sp, #16]
			i2cData.txSz      = 6;
1a000f48:	2306      	movs	r3, #6
1a000f4a:	f8ad 300c 	strh.w	r3, [sp, #12]
			i2cData.rxBuff    = 0;
1a000f4e:	9505      	str	r5, [sp, #20]
			i2cData.rxSz      = 0;
1a000f50:	f8ad 500e 	strh.w	r5, [sp, #14]
				   Chip_I2CM_Xfer(adsDataX->i2cNumber, &i2cData); //le paso el puerto I2C que quiero escribir
1a000f54:	a902      	add	r1, sp, #8
1a000f56:	6800      	ldr	r0, [r0, #0]
1a000f58:	f003 f8f4 	bl	1a004144 <Chip_I2CM_Xfer>
				   adsDataX->comState = sending_state; //paso al siguiente estado
1a000f5c:	7226      	strb	r6, [r4, #8]
				   ret = FALSE;
1a000f5e:	4b0d      	ldr	r3, [pc, #52]	; (1a000f94 <ads1115Init+0x88>)
1a000f60:	601d      	str	r5, [r3, #0]
	}
	return ret;

	}
1a000f62:	4b0c      	ldr	r3, [pc, #48]	; (1a000f94 <ads1115Init+0x88>)
1a000f64:	7818      	ldrb	r0, [r3, #0]
1a000f66:	b006      	add	sp, #24
1a000f68:	bd70      	pop	{r4, r5, r6, pc}
			if ( Chip_I2CM_StateChanged(adsDataX->i2cNumber) == 0)
1a000f6a:	6800      	ldr	r0, [r0, #0]
1a000f6c:	6803      	ldr	r3, [r0, #0]
1a000f6e:	f013 0f08 	tst.w	r3, #8
1a000f72:	d102      	bne.n	1a000f7a <ads1115Init+0x6e>
				ret = FALSE;
1a000f74:	4b07      	ldr	r3, [pc, #28]	; (1a000f94 <ads1115Init+0x88>)
1a000f76:	2200      	movs	r2, #0
1a000f78:	601a      	str	r2, [r3, #0]
			ret = Chip_I2CM_XferHandler(adsDataX->i2cNumber, &i2cData);	//ejecuto el handler
1a000f7a:	a902      	add	r1, sp, #8
1a000f7c:	f003 f864 	bl	1a004048 <Chip_I2CM_XferHandler>
1a000f80:	4b04      	ldr	r3, [pc, #16]	; (1a000f94 <ads1115Init+0x88>)
1a000f82:	6018      	str	r0, [r3, #0]
			if(ret!=FALSE){
1a000f84:	2800      	cmp	r0, #0
1a000f86:	d0ec      	beq.n	1a000f62 <ads1115Init+0x56>
				adsDataX->comState = dataSet_state;
1a000f88:	2300      	movs	r3, #0
1a000f8a:	7223      	strb	r3, [r4, #8]
				ret = TRUE;
1a000f8c:	4b01      	ldr	r3, [pc, #4]	; (1a000f94 <ads1115Init+0x88>)
1a000f8e:	2201      	movs	r2, #1
1a000f90:	601a      	str	r2, [r3, #0]
1a000f92:	e7e6      	b.n	1a000f62 <ads1115Init+0x56>
1a000f94:	10000130 	.word	0x10000130

1a000f98 <ads1115ReadRegister>:

//Esta funcion lee un registro que le indico mediante regNumber en el ADS que le indico con la estructura adsDataX
//Si devuelve TRUE es que termino de leer
//si devuelve FALSE hay que volver a llamar a la funcion hasta que devuelva TRUE porque no termino
bool_t ads1115ReadRegister ( adsData_t *adsDataX,uint8_t regNumber )
{
1a000f98:	b570      	push	{r4, r5, r6, lr}
1a000f9a:	b086      	sub	sp, #24
1a000f9c:	4604      	mov	r4, r0
1a000f9e:	f88d 1007 	strb.w	r1, [sp, #7]

	{
		I2CM_XFER_T i2cData;
		static uint32_t ret=0;
		// Armo el la estructura i2cData para pasarle al handler de comunicacion I2C
		switch (adsDataX->comState)
1a000fa2:	7a03      	ldrb	r3, [r0, #8]
1a000fa4:	b12b      	cbz	r3, 1a000fb2 <ads1115ReadRegister+0x1a>
1a000fa6:	2b01      	cmp	r3, #1
1a000fa8:	d022      	beq.n	1a000ff0 <ads1115ReadRegister+0x58>
					break;
				}
				break;
			}
			default:
				ret = FALSE;
1a000faa:	4b1c      	ldr	r3, [pc, #112]	; (1a00101c <ads1115ReadRegister+0x84>)
1a000fac:	2200      	movs	r2, #0
1a000fae:	601a      	str	r2, [r3, #0]
				break;
1a000fb0:	e01a      	b.n	1a000fe8 <ads1115ReadRegister+0x50>
				i2cData.slaveAddr = adsDataX->i2cSlaveAddress;
1a000fb2:	7903      	ldrb	r3, [r0, #4]
1a000fb4:	f88d 3008 	strb.w	r3, [sp, #8]
				i2cData.options   = 0;
1a000fb8:	2500      	movs	r5, #0
1a000fba:	f88d 5009 	strb.w	r5, [sp, #9]
				i2cData.status    = 0;
1a000fbe:	f8ad 500a 	strh.w	r5, [sp, #10]
				i2cData.txBuff    = &regNumber;
1a000fc2:	f10d 0307 	add.w	r3, sp, #7
1a000fc6:	9304      	str	r3, [sp, #16]
				i2cData.txSz      = 1;
1a000fc8:	2601      	movs	r6, #1
1a000fca:	f8ad 600c 	strh.w	r6, [sp, #12]
				i2cData.rxBuff    = adsDataX->rxData;
1a000fce:	f100 0309 	add.w	r3, r0, #9
1a000fd2:	9305      	str	r3, [sp, #20]
				i2cData.rxSz      = 2;
1a000fd4:	2302      	movs	r3, #2
1a000fd6:	f8ad 300e 	strh.w	r3, [sp, #14]
					   Chip_I2CM_Xfer(adsDataX->i2cNumber, &i2cData); //le paso el puerto I2C que quiero escribir
1a000fda:	a902      	add	r1, sp, #8
1a000fdc:	6800      	ldr	r0, [r0, #0]
1a000fde:	f003 f8b1 	bl	1a004144 <Chip_I2CM_Xfer>
					   adsDataX->comState = sending_state;
1a000fe2:	7226      	strb	r6, [r4, #8]
					   ret = FALSE;
1a000fe4:	4b0d      	ldr	r3, [pc, #52]	; (1a00101c <ads1115ReadRegister+0x84>)
1a000fe6:	601d      	str	r5, [r3, #0]
		}
		return ret;

		}
}
1a000fe8:	4b0c      	ldr	r3, [pc, #48]	; (1a00101c <ads1115ReadRegister+0x84>)
1a000fea:	7818      	ldrb	r0, [r3, #0]
1a000fec:	b006      	add	sp, #24
1a000fee:	bd70      	pop	{r4, r5, r6, pc}
				if ( Chip_I2CM_StateChanged(adsDataX->i2cNumber) == 0)
1a000ff0:	6800      	ldr	r0, [r0, #0]
1a000ff2:	6803      	ldr	r3, [r0, #0]
1a000ff4:	f013 0f08 	tst.w	r3, #8
1a000ff8:	d103      	bne.n	1a001002 <ads1115ReadRegister+0x6a>
					ret = FALSE;
1a000ffa:	4b08      	ldr	r3, [pc, #32]	; (1a00101c <ads1115ReadRegister+0x84>)
1a000ffc:	2200      	movs	r2, #0
1a000ffe:	601a      	str	r2, [r3, #0]
					break;
1a001000:	e7f2      	b.n	1a000fe8 <ads1115ReadRegister+0x50>
				ret = Chip_I2CM_XferHandler(adsDataX->i2cNumber, &i2cData);	//ejecuto el handler
1a001002:	a902      	add	r1, sp, #8
1a001004:	f003 f820 	bl	1a004048 <Chip_I2CM_XferHandler>
1a001008:	4b04      	ldr	r3, [pc, #16]	; (1a00101c <ads1115ReadRegister+0x84>)
1a00100a:	6018      	str	r0, [r3, #0]
				if(ret!=FALSE)
1a00100c:	2800      	cmp	r0, #0
1a00100e:	d0eb      	beq.n	1a000fe8 <ads1115ReadRegister+0x50>
					adsDataX->comState = dataSet_state;
1a001010:	2300      	movs	r3, #0
1a001012:	7223      	strb	r3, [r4, #8]
					ret = TRUE;
1a001014:	4b01      	ldr	r3, [pc, #4]	; (1a00101c <ads1115ReadRegister+0x84>)
1a001016:	2201      	movs	r2, #1
1a001018:	601a      	str	r2, [r3, #0]
					break;
1a00101a:	e7e5      	b.n	1a000fe8 <ads1115ReadRegister+0x50>
1a00101c:	10000134 	.word	0x10000134

1a001020 <initialise_monitor_handles>:
}
1a001020:	4770      	bx	lr
1a001022:	Address 0x000000001a001022 is out of bounds.


1a001024 <Reset_Handler>:
void Reset_Handler(void) {
1a001024:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001026:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001028:	4b19      	ldr	r3, [pc, #100]	; (1a001090 <Reset_Handler+0x6c>)
1a00102a:	4a1a      	ldr	r2, [pc, #104]	; (1a001094 <Reset_Handler+0x70>)
1a00102c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00102e:	3304      	adds	r3, #4
1a001030:	4a19      	ldr	r2, [pc, #100]	; (1a001098 <Reset_Handler+0x74>)
1a001032:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001034:	2300      	movs	r3, #0
1a001036:	e005      	b.n	1a001044 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001038:	4a18      	ldr	r2, [pc, #96]	; (1a00109c <Reset_Handler+0x78>)
1a00103a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001042:	3301      	adds	r3, #1
1a001044:	2b07      	cmp	r3, #7
1a001046:	d9f7      	bls.n	1a001038 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001048:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00104a:	4b15      	ldr	r3, [pc, #84]	; (1a0010a0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00104c:	e007      	b.n	1a00105e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00104e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001052:	689a      	ldr	r2, [r3, #8]
1a001054:	6859      	ldr	r1, [r3, #4]
1a001056:	6818      	ldr	r0, [r3, #0]
1a001058:	f7ff f897 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00105c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00105e:	4a11      	ldr	r2, [pc, #68]	; (1a0010a4 <Reset_Handler+0x80>)
1a001060:	4293      	cmp	r3, r2
1a001062:	d3f4      	bcc.n	1a00104e <Reset_Handler+0x2a>
1a001064:	e006      	b.n	1a001074 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001066:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001068:	6859      	ldr	r1, [r3, #4]
1a00106a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00106e:	f7ff f89b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001072:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001074:	4a0c      	ldr	r2, [pc, #48]	; (1a0010a8 <Reset_Handler+0x84>)
1a001076:	4293      	cmp	r3, r2
1a001078:	d3f5      	bcc.n	1a001066 <Reset_Handler+0x42>
    SystemInit();
1a00107a:	f003 f8c5 	bl	1a004208 <SystemInit>
    __libc_init_array();
1a00107e:	f004 f815 	bl	1a0050ac <__libc_init_array>
    initialise_monitor_handles();
1a001082:	f7ff ffcd 	bl	1a001020 <initialise_monitor_handles>
    main();
1a001086:	f7ff f93b 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a00108a:	bf30      	wfi
1a00108c:	e7fd      	b.n	1a00108a <Reset_Handler+0x66>
1a00108e:	bf00      	nop
1a001090:	40053100 	.word	0x40053100
1a001094:	10df1000 	.word	0x10df1000
1a001098:	01dff7ff 	.word	0x01dff7ff
1a00109c:	e000e280 	.word	0xe000e280
1a0010a0:	1a000114 	.word	0x1a000114
1a0010a4:	1a000150 	.word	0x1a000150
1a0010a8:	1a000178 	.word	0x1a000178

1a0010ac <_fini>:
void _fini(void) {}
1a0010ac:	4770      	bx	lr

1a0010ae <_init>:
void _init(void) {}
1a0010ae:	4770      	bx	lr

1a0010b0 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0010b0:	2309      	movs	r3, #9
1a0010b2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010b8:	4770      	bx	lr

1a0010ba <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0010ba:	2358      	movs	r3, #88	; 0x58
1a0010bc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0010be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010c2:	4770      	bx	lr

1a0010c4 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0010c4:	2902      	cmp	r1, #2
1a0010c6:	d801      	bhi.n	1a0010cc <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0010c8:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0010ca:	4770      	bx	lr
       SET_ERR(EBADF);
1a0010cc:	2309      	movs	r3, #9
1a0010ce:	6003      	str	r3, [r0, #0]
       return -1;
1a0010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010d4:	4770      	bx	lr

1a0010d6 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0010d6:	2358      	movs	r3, #88	; 0x58
1a0010d8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0010da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010de:	4770      	bx	lr

1a0010e0 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0010e0:	2902      	cmp	r1, #2
1a0010e2:	d81f      	bhi.n	1a001124 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0010e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0010e8:	461d      	mov	r5, r3
1a0010ea:	4617      	mov	r7, r2
1a0010ec:	4606      	mov	r6, r0
  size_t i = 0;
1a0010ee:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0010f0:	42ac      	cmp	r4, r5
1a0010f2:	d211      	bcs.n	1a001118 <_read_r+0x38>
         int c = __stdio_getchar();
1a0010f4:	f002 f96d 	bl	1a0033d2 <__stdio_getchar>
         if( c != -1 ){
1a0010f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0010fc:	d0f8      	beq.n	1a0010f0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0010fe:	f104 0801 	add.w	r8, r4, #1
1a001102:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a001104:	280d      	cmp	r0, #13
1a001106:	d003      	beq.n	1a001110 <_read_r+0x30>
1a001108:	280a      	cmp	r0, #10
1a00110a:	d001      	beq.n	1a001110 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00110c:	4644      	mov	r4, r8
1a00110e:	e7ef      	b.n	1a0010f0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001110:	f002 f95f 	bl	1a0033d2 <__stdio_getchar>
               return i;
1a001114:	4640      	mov	r0, r8
1a001116:	e003      	b.n	1a001120 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a001118:	2313      	movs	r3, #19
1a00111a:	6033      	str	r3, [r6, #0]
      return -1;
1a00111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a001120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a001124:	2313      	movs	r3, #19
1a001126:	6003      	str	r3, [r0, #0]
      return -1;
1a001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00112c:	4770      	bx	lr

1a00112e <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00112e:	2902      	cmp	r1, #2
1a001130:	d80c      	bhi.n	1a00114c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a001132:	b570      	push	{r4, r5, r6, lr}
1a001134:	461d      	mov	r5, r3
1a001136:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001138:	2400      	movs	r4, #0
1a00113a:	e003      	b.n	1a001144 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a00113c:	5d30      	ldrb	r0, [r6, r4]
1a00113e:	f002 f943 	bl	1a0033c8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a001142:	3401      	adds	r4, #1
1a001144:	42ac      	cmp	r4, r5
1a001146:	d3f9      	bcc.n	1a00113c <_write_r+0xe>
       return n;
1a001148:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00114a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00114c:	2313      	movs	r3, #19
1a00114e:	6003      	str	r3, [r0, #0]
       return -1;
1a001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001154:	4770      	bx	lr
1a001156:	Address 0x000000001a001156 is out of bounds.


1a001158 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001158:	4b05      	ldr	r3, [pc, #20]	; (1a001170 <_sbrk_r+0x18>)
1a00115a:	681b      	ldr	r3, [r3, #0]
1a00115c:	b123      	cbz	r3, 1a001168 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00115e:	4b04      	ldr	r3, [pc, #16]	; (1a001170 <_sbrk_r+0x18>)
1a001160:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001162:	4401      	add	r1, r0
1a001164:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001166:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001168:	4b01      	ldr	r3, [pc, #4]	; (1a001170 <_sbrk_r+0x18>)
1a00116a:	4a02      	ldr	r2, [pc, #8]	; (1a001174 <_sbrk_r+0x1c>)
1a00116c:	601a      	str	r2, [r3, #0]
1a00116e:	e7f6      	b.n	1a00115e <_sbrk_r+0x6>
1a001170:	10000138 	.word	0x10000138
1a001174:	10002c78 	.word	0x10002c78

1a001178 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a001178:	4a12      	ldr	r2, [pc, #72]	; (1a0011c4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00117a:	f012 0f07 	tst.w	r2, #7
1a00117e:	d01e      	beq.n	1a0011be <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a001180:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001182:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a001186:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00118a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00118c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00118e:	480e      	ldr	r0, [pc, #56]	; (1a0011c8 <prvHeapInit+0x50>)
1a001190:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a001192:	2100      	movs	r1, #0
1a001194:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a001196:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a001198:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00119a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00119e:	480b      	ldr	r0, [pc, #44]	; (1a0011cc <prvHeapInit+0x54>)
1a0011a0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a0011a2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0011a4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0011a6:	1a99      	subs	r1, r3, r2
1a0011a8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0011aa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0011ac:	4b08      	ldr	r3, [pc, #32]	; (1a0011d0 <prvHeapInit+0x58>)
1a0011ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0011b0:	4b08      	ldr	r3, [pc, #32]	; (1a0011d4 <prvHeapInit+0x5c>)
1a0011b2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0011b4:	4b08      	ldr	r3, [pc, #32]	; (1a0011d8 <prvHeapInit+0x60>)
1a0011b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0011ba:	601a      	str	r2, [r3, #0]
}
1a0011bc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0011c2:	e7e4      	b.n	1a00118e <prvHeapInit+0x16>
1a0011c4:	10000140 	.word	0x10000140
1a0011c8:	1000214c 	.word	0x1000214c
1a0011cc:	1000013c 	.word	0x1000013c
1a0011d0:	10002148 	.word	0x10002148
1a0011d4:	10002144 	.word	0x10002144
1a0011d8:	10002140 	.word	0x10002140

1a0011dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0011dc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0011de:	4b13      	ldr	r3, [pc, #76]	; (1a00122c <prvInsertBlockIntoFreeList+0x50>)
1a0011e0:	681a      	ldr	r2, [r3, #0]
1a0011e2:	4282      	cmp	r2, r0
1a0011e4:	d31b      	bcc.n	1a00121e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0011e6:	6859      	ldr	r1, [r3, #4]
1a0011e8:	185c      	adds	r4, r3, r1
1a0011ea:	4284      	cmp	r4, r0
1a0011ec:	d103      	bne.n	1a0011f6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0011ee:	6840      	ldr	r0, [r0, #4]
1a0011f0:	4401      	add	r1, r0
1a0011f2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a0011f4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0011f6:	6841      	ldr	r1, [r0, #4]
1a0011f8:	1844      	adds	r4, r0, r1
1a0011fa:	42a2      	cmp	r2, r4
1a0011fc:	d113      	bne.n	1a001226 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0011fe:	4c0c      	ldr	r4, [pc, #48]	; (1a001230 <prvInsertBlockIntoFreeList+0x54>)
1a001200:	6824      	ldr	r4, [r4, #0]
1a001202:	42a2      	cmp	r2, r4
1a001204:	d00d      	beq.n	1a001222 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a001206:	6852      	ldr	r2, [r2, #4]
1a001208:	4411      	add	r1, r2
1a00120a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a00120c:	681a      	ldr	r2, [r3, #0]
1a00120e:	6812      	ldr	r2, [r2, #0]
1a001210:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a001212:	4298      	cmp	r0, r3
1a001214:	d000      	beq.n	1a001218 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a001216:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a001218:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00121c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00121e:	4613      	mov	r3, r2
1a001220:	e7de      	b.n	1a0011e0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a001222:	6004      	str	r4, [r0, #0]
1a001224:	e7f5      	b.n	1a001212 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a001226:	6002      	str	r2, [r0, #0]
1a001228:	e7f3      	b.n	1a001212 <prvInsertBlockIntoFreeList+0x36>
1a00122a:	bf00      	nop
1a00122c:	1000214c 	.word	0x1000214c
1a001230:	1000013c 	.word	0x1000013c

1a001234 <pvPortMalloc>:
{
1a001234:	b570      	push	{r4, r5, r6, lr}
1a001236:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a001238:	f001 f82c 	bl	1a002294 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a00123c:	4b3f      	ldr	r3, [pc, #252]	; (1a00133c <pvPortMalloc+0x108>)
1a00123e:	681b      	ldr	r3, [r3, #0]
1a001240:	b1a3      	cbz	r3, 1a00126c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a001242:	4b3f      	ldr	r3, [pc, #252]	; (1a001340 <pvPortMalloc+0x10c>)
1a001244:	681b      	ldr	r3, [r3, #0]
1a001246:	421c      	tst	r4, r3
1a001248:	d013      	beq.n	1a001272 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a00124a:	f001 f8bd 	bl	1a0023c8 <xTaskResumeAll>
void *pvReturn = NULL;
1a00124e:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a001250:	f000 fdc2 	bl	1a001dd8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a001254:	f016 0f07 	tst.w	r6, #7
1a001258:	d06e      	beq.n	1a001338 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00125a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00125e:	f383 8811 	msr	BASEPRI, r3
1a001262:	f3bf 8f6f 	isb	sy
1a001266:	f3bf 8f4f 	dsb	sy
1a00126a:	e7fe      	b.n	1a00126a <pvPortMalloc+0x36>
			prvHeapInit();
1a00126c:	f7ff ff84 	bl	1a001178 <prvHeapInit>
1a001270:	e7e7      	b.n	1a001242 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a001272:	b194      	cbz	r4, 1a00129a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a001274:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a001276:	f014 0f07 	tst.w	r4, #7
1a00127a:	d00e      	beq.n	1a00129a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00127c:	f024 0407 	bic.w	r4, r4, #7
1a001280:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a001282:	f004 0307 	and.w	r3, r4, #7
1a001286:	b143      	cbz	r3, 1a00129a <pvPortMalloc+0x66>
1a001288:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00128c:	f383 8811 	msr	BASEPRI, r3
1a001290:	f3bf 8f6f 	isb	sy
1a001294:	f3bf 8f4f 	dsb	sy
1a001298:	e7fe      	b.n	1a001298 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00129a:	b134      	cbz	r4, 1a0012aa <pvPortMalloc+0x76>
1a00129c:	4b29      	ldr	r3, [pc, #164]	; (1a001344 <pvPortMalloc+0x110>)
1a00129e:	681b      	ldr	r3, [r3, #0]
1a0012a0:	42a3      	cmp	r3, r4
1a0012a2:	d306      	bcc.n	1a0012b2 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a0012a4:	4b28      	ldr	r3, [pc, #160]	; (1a001348 <pvPortMalloc+0x114>)
1a0012a6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0012a8:	e009      	b.n	1a0012be <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a0012aa:	f001 f88d 	bl	1a0023c8 <xTaskResumeAll>
void *pvReturn = NULL;
1a0012ae:	2600      	movs	r6, #0
1a0012b0:	e7ce      	b.n	1a001250 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a0012b2:	f001 f889 	bl	1a0023c8 <xTaskResumeAll>
void *pvReturn = NULL;
1a0012b6:	2600      	movs	r6, #0
1a0012b8:	e7ca      	b.n	1a001250 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a0012ba:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0012bc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0012be:	686a      	ldr	r2, [r5, #4]
1a0012c0:	42a2      	cmp	r2, r4
1a0012c2:	d202      	bcs.n	1a0012ca <pvPortMalloc+0x96>
1a0012c4:	682a      	ldr	r2, [r5, #0]
1a0012c6:	2a00      	cmp	r2, #0
1a0012c8:	d1f7      	bne.n	1a0012ba <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a0012ca:	4a1c      	ldr	r2, [pc, #112]	; (1a00133c <pvPortMalloc+0x108>)
1a0012cc:	6812      	ldr	r2, [r2, #0]
1a0012ce:	42aa      	cmp	r2, r5
1a0012d0:	d014      	beq.n	1a0012fc <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0012d2:	681e      	ldr	r6, [r3, #0]
1a0012d4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0012d6:	682a      	ldr	r2, [r5, #0]
1a0012d8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0012da:	686b      	ldr	r3, [r5, #4]
1a0012dc:	1b1b      	subs	r3, r3, r4
1a0012de:	2b10      	cmp	r3, #16
1a0012e0:	d914      	bls.n	1a00130c <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0012e2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0012e4:	f010 0f07 	tst.w	r0, #7
1a0012e8:	d00c      	beq.n	1a001304 <pvPortMalloc+0xd0>
1a0012ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ee:	f383 8811 	msr	BASEPRI, r3
1a0012f2:	f3bf 8f6f 	isb	sy
1a0012f6:	f3bf 8f4f 	dsb	sy
1a0012fa:	e7fe      	b.n	1a0012fa <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a0012fc:	f001 f864 	bl	1a0023c8 <xTaskResumeAll>
void *pvReturn = NULL;
1a001300:	2600      	movs	r6, #0
1a001302:	e7a5      	b.n	1a001250 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a001304:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a001306:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a001308:	f7ff ff68 	bl	1a0011dc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a00130c:	686a      	ldr	r2, [r5, #4]
1a00130e:	490d      	ldr	r1, [pc, #52]	; (1a001344 <pvPortMalloc+0x110>)
1a001310:	680b      	ldr	r3, [r1, #0]
1a001312:	1a9b      	subs	r3, r3, r2
1a001314:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a001316:	490d      	ldr	r1, [pc, #52]	; (1a00134c <pvPortMalloc+0x118>)
1a001318:	6809      	ldr	r1, [r1, #0]
1a00131a:	428b      	cmp	r3, r1
1a00131c:	d201      	bcs.n	1a001322 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00131e:	490b      	ldr	r1, [pc, #44]	; (1a00134c <pvPortMalloc+0x118>)
1a001320:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a001322:	4b07      	ldr	r3, [pc, #28]	; (1a001340 <pvPortMalloc+0x10c>)
1a001324:	681b      	ldr	r3, [r3, #0]
1a001326:	4313      	orrs	r3, r2
1a001328:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a00132a:	2300      	movs	r3, #0
1a00132c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a00132e:	f001 f84b 	bl	1a0023c8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a001332:	2e00      	cmp	r6, #0
1a001334:	d18e      	bne.n	1a001254 <pvPortMalloc+0x20>
1a001336:	e78b      	b.n	1a001250 <pvPortMalloc+0x1c>
}
1a001338:	4630      	mov	r0, r6
1a00133a:	bd70      	pop	{r4, r5, r6, pc}
1a00133c:	1000013c 	.word	0x1000013c
1a001340:	10002140 	.word	0x10002140
1a001344:	10002144 	.word	0x10002144
1a001348:	1000214c 	.word	0x1000214c
1a00134c:	10002148 	.word	0x10002148

1a001350 <vPortFree>:
	if( pv != NULL )
1a001350:	b380      	cbz	r0, 1a0013b4 <vPortFree+0x64>
{
1a001352:	b538      	push	{r3, r4, r5, lr}
1a001354:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a001356:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00135a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00135e:	4916      	ldr	r1, [pc, #88]	; (1a0013b8 <vPortFree+0x68>)
1a001360:	6809      	ldr	r1, [r1, #0]
1a001362:	420a      	tst	r2, r1
1a001364:	d108      	bne.n	1a001378 <vPortFree+0x28>
1a001366:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00136a:	f383 8811 	msr	BASEPRI, r3
1a00136e:	f3bf 8f6f 	isb	sy
1a001372:	f3bf 8f4f 	dsb	sy
1a001376:	e7fe      	b.n	1a001376 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a001378:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00137c:	b140      	cbz	r0, 1a001390 <vPortFree+0x40>
1a00137e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001382:	f383 8811 	msr	BASEPRI, r3
1a001386:	f3bf 8f6f 	isb	sy
1a00138a:	f3bf 8f4f 	dsb	sy
1a00138e:	e7fe      	b.n	1a00138e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a001390:	ea22 0201 	bic.w	r2, r2, r1
1a001394:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a001398:	f000 ff7c 	bl	1a002294 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00139c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a0013a0:	4a06      	ldr	r2, [pc, #24]	; (1a0013bc <vPortFree+0x6c>)
1a0013a2:	6813      	ldr	r3, [r2, #0]
1a0013a4:	440b      	add	r3, r1
1a0013a6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a0013a8:	4628      	mov	r0, r5
1a0013aa:	f7ff ff17 	bl	1a0011dc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a0013ae:	f001 f80b 	bl	1a0023c8 <xTaskResumeAll>
}
1a0013b2:	bd38      	pop	{r3, r4, r5, pc}
1a0013b4:	4770      	bx	lr
1a0013b6:	bf00      	nop
1a0013b8:	10002140 	.word	0x10002140
1a0013bc:	10002144 	.word	0x10002144

1a0013c0 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a0013c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a0013c2:	b123      	cbz	r3, 1a0013ce <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a0013c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0013c6:	6818      	ldr	r0, [r3, #0]
1a0013c8:	f1c0 0007 	rsb	r0, r0, #7
1a0013cc:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a0013ce:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a0013d0:	4770      	bx	lr

1a0013d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0013d2:	b510      	push	{r4, lr}
1a0013d4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0013d6:	f001 fda5 	bl	1a002f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0013da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0013dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0013de:	429a      	cmp	r2, r3
1a0013e0:	d004      	beq.n	1a0013ec <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0013e2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0013e4:	f001 fdc0 	bl	1a002f68 <vPortExitCritical>

	return xReturn;
}
1a0013e8:	4620      	mov	r0, r4
1a0013ea:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0013ec:	2401      	movs	r4, #1
1a0013ee:	e7f9      	b.n	1a0013e4 <prvIsQueueFull+0x12>

1a0013f0 <prvIsQueueEmpty>:
{
1a0013f0:	b510      	push	{r4, lr}
1a0013f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0013f4:	f001 fd96 	bl	1a002f24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0013f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0013fa:	b123      	cbz	r3, 1a001406 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0013fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0013fe:	f001 fdb3 	bl	1a002f68 <vPortExitCritical>
}
1a001402:	4620      	mov	r0, r4
1a001404:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a001406:	2401      	movs	r4, #1
1a001408:	e7f9      	b.n	1a0013fe <prvIsQueueEmpty+0xe>

1a00140a <prvCopyDataToQueue>:
{
1a00140a:	b570      	push	{r4, r5, r6, lr}
1a00140c:	4604      	mov	r4, r0
1a00140e:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001410:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001412:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001414:	b95a      	cbnz	r2, 1a00142e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001416:	6803      	ldr	r3, [r0, #0]
1a001418:	b11b      	cbz	r3, 1a001422 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00141a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00141c:	3501      	adds	r5, #1
1a00141e:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001420:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001422:	6840      	ldr	r0, [r0, #4]
1a001424:	f001 fa38 	bl	1a002898 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a001428:	2300      	movs	r3, #0
1a00142a:	6063      	str	r3, [r4, #4]
1a00142c:	e7f6      	b.n	1a00141c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00142e:	b96e      	cbnz	r6, 1a00144c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001430:	6880      	ldr	r0, [r0, #8]
1a001432:	f003 fe5f 	bl	1a0050f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a001436:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001438:	68a3      	ldr	r3, [r4, #8]
1a00143a:	4413      	add	r3, r2
1a00143c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00143e:	6862      	ldr	r2, [r4, #4]
1a001440:	4293      	cmp	r3, r2
1a001442:	d319      	bcc.n	1a001478 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001444:	6823      	ldr	r3, [r4, #0]
1a001446:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a001448:	2000      	movs	r0, #0
1a00144a:	e7e7      	b.n	1a00141c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00144c:	68c0      	ldr	r0, [r0, #12]
1a00144e:	f003 fe51 	bl	1a0050f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001452:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001454:	4252      	negs	r2, r2
1a001456:	68e3      	ldr	r3, [r4, #12]
1a001458:	4413      	add	r3, r2
1a00145a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00145c:	6821      	ldr	r1, [r4, #0]
1a00145e:	428b      	cmp	r3, r1
1a001460:	d202      	bcs.n	1a001468 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001462:	6863      	ldr	r3, [r4, #4]
1a001464:	441a      	add	r2, r3
1a001466:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a001468:	2e02      	cmp	r6, #2
1a00146a:	d001      	beq.n	1a001470 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00146c:	2000      	movs	r0, #0
1a00146e:	e7d5      	b.n	1a00141c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001470:	b125      	cbz	r5, 1a00147c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001472:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001474:	2000      	movs	r0, #0
1a001476:	e7d1      	b.n	1a00141c <prvCopyDataToQueue+0x12>
1a001478:	2000      	movs	r0, #0
1a00147a:	e7cf      	b.n	1a00141c <prvCopyDataToQueue+0x12>
1a00147c:	2000      	movs	r0, #0
1a00147e:	e7cd      	b.n	1a00141c <prvCopyDataToQueue+0x12>

1a001480 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001480:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001482:	b172      	cbz	r2, 1a0014a2 <prvCopyDataFromQueue+0x22>
{
1a001484:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001486:	68c3      	ldr	r3, [r0, #12]
1a001488:	4413      	add	r3, r2
1a00148a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00148c:	6844      	ldr	r4, [r0, #4]
1a00148e:	42a3      	cmp	r3, r4
1a001490:	d301      	bcc.n	1a001496 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001492:	6803      	ldr	r3, [r0, #0]
1a001494:	60c3      	str	r3, [r0, #12]
1a001496:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001498:	68c1      	ldr	r1, [r0, #12]
1a00149a:	4620      	mov	r0, r4
1a00149c:	f003 fe2a 	bl	1a0050f4 <memcpy>
}
1a0014a0:	bd10      	pop	{r4, pc}
1a0014a2:	4770      	bx	lr

1a0014a4 <prvUnlockQueue>:
{
1a0014a4:	b538      	push	{r3, r4, r5, lr}
1a0014a6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0014a8:	f001 fd3c 	bl	1a002f24 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0014ac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0014b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0014b2:	e003      	b.n	1a0014bc <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0014b4:	f001 f97e 	bl	1a0027b4 <vTaskMissedYield>
			--cTxLock;
1a0014b8:	3c01      	subs	r4, #1
1a0014ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0014bc:	2c00      	cmp	r4, #0
1a0014be:	dd08      	ble.n	1a0014d2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0014c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0014c2:	b133      	cbz	r3, 1a0014d2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0014c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0014c8:	f001 f8e2 	bl	1a002690 <xTaskRemoveFromEventList>
1a0014cc:	2800      	cmp	r0, #0
1a0014ce:	d0f3      	beq.n	1a0014b8 <prvUnlockQueue+0x14>
1a0014d0:	e7f0      	b.n	1a0014b4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0014d2:	23ff      	movs	r3, #255	; 0xff
1a0014d4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0014d8:	f001 fd46 	bl	1a002f68 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0014dc:	f001 fd22 	bl	1a002f24 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0014e0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0014e4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014e6:	e003      	b.n	1a0014f0 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0014e8:	f001 f964 	bl	1a0027b4 <vTaskMissedYield>
				--cRxLock;
1a0014ec:	3c01      	subs	r4, #1
1a0014ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014f0:	2c00      	cmp	r4, #0
1a0014f2:	dd08      	ble.n	1a001506 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014f4:	692b      	ldr	r3, [r5, #16]
1a0014f6:	b133      	cbz	r3, 1a001506 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014f8:	f105 0010 	add.w	r0, r5, #16
1a0014fc:	f001 f8c8 	bl	1a002690 <xTaskRemoveFromEventList>
1a001500:	2800      	cmp	r0, #0
1a001502:	d0f3      	beq.n	1a0014ec <prvUnlockQueue+0x48>
1a001504:	e7f0      	b.n	1a0014e8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001506:	23ff      	movs	r3, #255	; 0xff
1a001508:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00150c:	f001 fd2c 	bl	1a002f68 <vPortExitCritical>
}
1a001510:	bd38      	pop	{r3, r4, r5, pc}
1a001512:	Address 0x000000001a001512 is out of bounds.


1a001514 <xQueueGenericReset>:
{
1a001514:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a001516:	b940      	cbnz	r0, 1a00152a <xQueueGenericReset+0x16>
1a001518:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00151c:	f383 8811 	msr	BASEPRI, r3
1a001520:	f3bf 8f6f 	isb	sy
1a001524:	f3bf 8f4f 	dsb	sy
1a001528:	e7fe      	b.n	1a001528 <xQueueGenericReset+0x14>
1a00152a:	4604      	mov	r4, r0
1a00152c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00152e:	f001 fcf9 	bl	1a002f24 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001532:	6821      	ldr	r1, [r4, #0]
1a001534:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001536:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001538:	fb03 1002 	mla	r0, r3, r2, r1
1a00153c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00153e:	2000      	movs	r0, #0
1a001540:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001542:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001544:	3a01      	subs	r2, #1
1a001546:	fb02 1303 	mla	r3, r2, r3, r1
1a00154a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00154c:	23ff      	movs	r3, #255	; 0xff
1a00154e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001556:	b9a5      	cbnz	r5, 1a001582 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001558:	6923      	ldr	r3, [r4, #16]
1a00155a:	b91b      	cbnz	r3, 1a001564 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00155c:	f001 fd04 	bl	1a002f68 <vPortExitCritical>
}
1a001560:	2001      	movs	r0, #1
1a001562:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001564:	f104 0010 	add.w	r0, r4, #16
1a001568:	f001 f892 	bl	1a002690 <xTaskRemoveFromEventList>
1a00156c:	2800      	cmp	r0, #0
1a00156e:	d0f5      	beq.n	1a00155c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001570:	4b08      	ldr	r3, [pc, #32]	; (1a001594 <xQueueGenericReset+0x80>)
1a001572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001576:	601a      	str	r2, [r3, #0]
1a001578:	f3bf 8f4f 	dsb	sy
1a00157c:	f3bf 8f6f 	isb	sy
1a001580:	e7ec      	b.n	1a00155c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001582:	f104 0010 	add.w	r0, r4, #16
1a001586:	f000 fbb0 	bl	1a001cea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00158a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00158e:	f000 fbac 	bl	1a001cea <vListInitialise>
1a001592:	e7e3      	b.n	1a00155c <xQueueGenericReset+0x48>
1a001594:	e000ed04 	.word	0xe000ed04

1a001598 <prvInitialiseNewQueue>:
{
1a001598:	b538      	push	{r3, r4, r5, lr}
1a00159a:	461d      	mov	r5, r3
1a00159c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00159e:	460b      	mov	r3, r1
1a0015a0:	b149      	cbz	r1, 1a0015b6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0015a2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0015a4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0015a6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0015a8:	2101      	movs	r1, #1
1a0015aa:	4620      	mov	r0, r4
1a0015ac:	f7ff ffb2 	bl	1a001514 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0015b0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0015b4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0015b6:	6024      	str	r4, [r4, #0]
1a0015b8:	e7f4      	b.n	1a0015a4 <prvInitialiseNewQueue+0xc>

1a0015ba <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0015ba:	b940      	cbnz	r0, 1a0015ce <xQueueGenericCreateStatic+0x14>
1a0015bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015c0:	f383 8811 	msr	BASEPRI, r3
1a0015c4:	f3bf 8f6f 	isb	sy
1a0015c8:	f3bf 8f4f 	dsb	sy
1a0015cc:	e7fe      	b.n	1a0015cc <xQueueGenericCreateStatic+0x12>
	{
1a0015ce:	b510      	push	{r4, lr}
1a0015d0:	b084      	sub	sp, #16
1a0015d2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0015d4:	b153      	cbz	r3, 1a0015ec <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0015d6:	b192      	cbz	r2, 1a0015fe <xQueueGenericCreateStatic+0x44>
1a0015d8:	b989      	cbnz	r1, 1a0015fe <xQueueGenericCreateStatic+0x44>
1a0015da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015de:	f383 8811 	msr	BASEPRI, r3
1a0015e2:	f3bf 8f6f 	isb	sy
1a0015e6:	f3bf 8f4f 	dsb	sy
1a0015ea:	e7fe      	b.n	1a0015ea <xQueueGenericCreateStatic+0x30>
1a0015ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015f0:	f383 8811 	msr	BASEPRI, r3
1a0015f4:	f3bf 8f6f 	isb	sy
1a0015f8:	f3bf 8f4f 	dsb	sy
1a0015fc:	e7fe      	b.n	1a0015fc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0015fe:	b94a      	cbnz	r2, 1a001614 <xQueueGenericCreateStatic+0x5a>
1a001600:	b141      	cbz	r1, 1a001614 <xQueueGenericCreateStatic+0x5a>
1a001602:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001606:	f383 8811 	msr	BASEPRI, r3
1a00160a:	f3bf 8f6f 	isb	sy
1a00160e:	f3bf 8f4f 	dsb	sy
1a001612:	e7fe      	b.n	1a001612 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001614:	2050      	movs	r0, #80	; 0x50
1a001616:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001618:	9803      	ldr	r0, [sp, #12]
1a00161a:	2850      	cmp	r0, #80	; 0x50
1a00161c:	d008      	beq.n	1a001630 <xQueueGenericCreateStatic+0x76>
1a00161e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001622:	f383 8811 	msr	BASEPRI, r3
1a001626:	f3bf 8f6f 	isb	sy
1a00162a:	f3bf 8f4f 	dsb	sy
1a00162e:	e7fe      	b.n	1a00162e <xQueueGenericCreateStatic+0x74>
1a001630:	4620      	mov	r0, r4
1a001632:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001634:	2301      	movs	r3, #1
1a001636:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00163a:	9400      	str	r4, [sp, #0]
1a00163c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001640:	f7ff ffaa 	bl	1a001598 <prvInitialiseNewQueue>
	}
1a001644:	4620      	mov	r0, r4
1a001646:	b004      	add	sp, #16
1a001648:	bd10      	pop	{r4, pc}

1a00164a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00164a:	b940      	cbnz	r0, 1a00165e <xQueueGenericCreate+0x14>
1a00164c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001650:	f383 8811 	msr	BASEPRI, r3
1a001654:	f3bf 8f6f 	isb	sy
1a001658:	f3bf 8f4f 	dsb	sy
1a00165c:	e7fe      	b.n	1a00165c <xQueueGenericCreate+0x12>
	{
1a00165e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001660:	b083      	sub	sp, #12
1a001662:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001664:	b111      	cbz	r1, 1a00166c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001666:	fb01 f000 	mul.w	r0, r1, r0
1a00166a:	e000      	b.n	1a00166e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a00166c:	2000      	movs	r0, #0
1a00166e:	4617      	mov	r7, r2
1a001670:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001672:	3050      	adds	r0, #80	; 0x50
1a001674:	f7ff fdde 	bl	1a001234 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001678:	4605      	mov	r5, r0
1a00167a:	b150      	cbz	r0, 1a001692 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a00167c:	2300      	movs	r3, #0
1a00167e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001682:	9000      	str	r0, [sp, #0]
1a001684:	463b      	mov	r3, r7
1a001686:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00168a:	4621      	mov	r1, r4
1a00168c:	4630      	mov	r0, r6
1a00168e:	f7ff ff83 	bl	1a001598 <prvInitialiseNewQueue>
	}
1a001692:	4628      	mov	r0, r5
1a001694:	b003      	add	sp, #12
1a001696:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001698 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
1a001698:	b940      	cbnz	r0, 1a0016ac <xQueueCreateCountingSemaphore+0x14>
1a00169a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00169e:	f383 8811 	msr	BASEPRI, r3
1a0016a2:	f3bf 8f6f 	isb	sy
1a0016a6:	f3bf 8f4f 	dsb	sy
1a0016aa:	e7fe      	b.n	1a0016aa <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
1a0016ac:	4288      	cmp	r0, r1
1a0016ae:	d208      	bcs.n	1a0016c2 <xQueueCreateCountingSemaphore+0x2a>
1a0016b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016b4:	f383 8811 	msr	BASEPRI, r3
1a0016b8:	f3bf 8f6f 	isb	sy
1a0016bc:	f3bf 8f4f 	dsb	sy
1a0016c0:	e7fe      	b.n	1a0016c0 <xQueueCreateCountingSemaphore+0x28>
	{
1a0016c2:	b510      	push	{r4, lr}
1a0016c4:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
1a0016c6:	2202      	movs	r2, #2
1a0016c8:	2100      	movs	r1, #0
1a0016ca:	f7ff ffbe 	bl	1a00164a <xQueueGenericCreate>
		if( xHandle != NULL )
1a0016ce:	4603      	mov	r3, r0
1a0016d0:	b100      	cbz	r0, 1a0016d4 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
1a0016d2:	6384      	str	r4, [r0, #56]	; 0x38
	}
1a0016d4:	4618      	mov	r0, r3
1a0016d6:	bd10      	pop	{r4, pc}

1a0016d8 <xQueueGenericSend>:
{
1a0016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0016da:	b085      	sub	sp, #20
1a0016dc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0016de:	b160      	cbz	r0, 1a0016fa <xQueueGenericSend+0x22>
1a0016e0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0016e2:	b999      	cbnz	r1, 1a00170c <xQueueGenericSend+0x34>
1a0016e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0016e6:	b18a      	cbz	r2, 1a00170c <xQueueGenericSend+0x34>
1a0016e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016ec:	f383 8811 	msr	BASEPRI, r3
1a0016f0:	f3bf 8f6f 	isb	sy
1a0016f4:	f3bf 8f4f 	dsb	sy
1a0016f8:	e7fe      	b.n	1a0016f8 <xQueueGenericSend+0x20>
1a0016fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016fe:	f383 8811 	msr	BASEPRI, r3
1a001702:	f3bf 8f6f 	isb	sy
1a001706:	f3bf 8f4f 	dsb	sy
1a00170a:	e7fe      	b.n	1a00170a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00170c:	2b02      	cmp	r3, #2
1a00170e:	d10b      	bne.n	1a001728 <xQueueGenericSend+0x50>
1a001710:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001712:	2a01      	cmp	r2, #1
1a001714:	d008      	beq.n	1a001728 <xQueueGenericSend+0x50>
1a001716:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00171a:	f383 8811 	msr	BASEPRI, r3
1a00171e:	f3bf 8f6f 	isb	sy
1a001722:	f3bf 8f4f 	dsb	sy
1a001726:	e7fe      	b.n	1a001726 <xQueueGenericSend+0x4e>
1a001728:	461e      	mov	r6, r3
1a00172a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00172c:	f001 f848 	bl	1a0027c0 <xTaskGetSchedulerState>
1a001730:	b950      	cbnz	r0, 1a001748 <xQueueGenericSend+0x70>
1a001732:	9b01      	ldr	r3, [sp, #4]
1a001734:	b153      	cbz	r3, 1a00174c <xQueueGenericSend+0x74>
1a001736:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00173a:	f383 8811 	msr	BASEPRI, r3
1a00173e:	f3bf 8f6f 	isb	sy
1a001742:	f3bf 8f4f 	dsb	sy
1a001746:	e7fe      	b.n	1a001746 <xQueueGenericSend+0x6e>
1a001748:	2500      	movs	r5, #0
1a00174a:	e03a      	b.n	1a0017c2 <xQueueGenericSend+0xea>
1a00174c:	2500      	movs	r5, #0
1a00174e:	e038      	b.n	1a0017c2 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001750:	4632      	mov	r2, r6
1a001752:	4639      	mov	r1, r7
1a001754:	4620      	mov	r0, r4
1a001756:	f7ff fe58 	bl	1a00140a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00175c:	b94b      	cbnz	r3, 1a001772 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00175e:	b1a8      	cbz	r0, 1a00178c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001760:	4b3b      	ldr	r3, [pc, #236]	; (1a001850 <xQueueGenericSend+0x178>)
1a001762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001766:	601a      	str	r2, [r3, #0]
1a001768:	f3bf 8f4f 	dsb	sy
1a00176c:	f3bf 8f6f 	isb	sy
1a001770:	e00c      	b.n	1a00178c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001772:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001776:	f000 ff8b 	bl	1a002690 <xTaskRemoveFromEventList>
1a00177a:	b138      	cbz	r0, 1a00178c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a00177c:	4b34      	ldr	r3, [pc, #208]	; (1a001850 <xQueueGenericSend+0x178>)
1a00177e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001782:	601a      	str	r2, [r3, #0]
1a001784:	f3bf 8f4f 	dsb	sy
1a001788:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00178c:	f001 fbec 	bl	1a002f68 <vPortExitCritical>
				return pdPASS;
1a001790:	2001      	movs	r0, #1
}
1a001792:	b005      	add	sp, #20
1a001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a001796:	f001 fbe7 	bl	1a002f68 <vPortExitCritical>
					return errQUEUE_FULL;
1a00179a:	2000      	movs	r0, #0
1a00179c:	e7f9      	b.n	1a001792 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00179e:	a802      	add	r0, sp, #8
1a0017a0:	f000 ffbc 	bl	1a00271c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0017a4:	2501      	movs	r5, #1
1a0017a6:	e019      	b.n	1a0017dc <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0017a8:	2300      	movs	r3, #0
1a0017aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0017ae:	e021      	b.n	1a0017f4 <xQueueGenericSend+0x11c>
1a0017b0:	2300      	movs	r3, #0
1a0017b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0017b6:	e023      	b.n	1a001800 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0017b8:	4620      	mov	r0, r4
1a0017ba:	f7ff fe73 	bl	1a0014a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0017be:	f000 fe03 	bl	1a0023c8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0017c2:	f001 fbaf 	bl	1a002f24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0017c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0017c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0017ca:	429a      	cmp	r2, r3
1a0017cc:	d3c0      	bcc.n	1a001750 <xQueueGenericSend+0x78>
1a0017ce:	2e02      	cmp	r6, #2
1a0017d0:	d0be      	beq.n	1a001750 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0017d2:	9b01      	ldr	r3, [sp, #4]
1a0017d4:	2b00      	cmp	r3, #0
1a0017d6:	d0de      	beq.n	1a001796 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0017d8:	2d00      	cmp	r5, #0
1a0017da:	d0e0      	beq.n	1a00179e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0017dc:	f001 fbc4 	bl	1a002f68 <vPortExitCritical>
		vTaskSuspendAll();
1a0017e0:	f000 fd58 	bl	1a002294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0017e4:	f001 fb9e 	bl	1a002f24 <vPortEnterCritical>
1a0017e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0017ec:	b25b      	sxtb	r3, r3
1a0017ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017f2:	d0d9      	beq.n	1a0017a8 <xQueueGenericSend+0xd0>
1a0017f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0017f8:	b25b      	sxtb	r3, r3
1a0017fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017fe:	d0d7      	beq.n	1a0017b0 <xQueueGenericSend+0xd8>
1a001800:	f001 fbb2 	bl	1a002f68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001804:	a901      	add	r1, sp, #4
1a001806:	a802      	add	r0, sp, #8
1a001808:	f000 ff94 	bl	1a002734 <xTaskCheckForTimeOut>
1a00180c:	b9c8      	cbnz	r0, 1a001842 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00180e:	4620      	mov	r0, r4
1a001810:	f7ff fddf 	bl	1a0013d2 <prvIsQueueFull>
1a001814:	2800      	cmp	r0, #0
1a001816:	d0cf      	beq.n	1a0017b8 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001818:	9901      	ldr	r1, [sp, #4]
1a00181a:	f104 0010 	add.w	r0, r4, #16
1a00181e:	f000 ff03 	bl	1a002628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001822:	4620      	mov	r0, r4
1a001824:	f7ff fe3e 	bl	1a0014a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001828:	f000 fdce 	bl	1a0023c8 <xTaskResumeAll>
1a00182c:	2800      	cmp	r0, #0
1a00182e:	d1c8      	bne.n	1a0017c2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001830:	4b07      	ldr	r3, [pc, #28]	; (1a001850 <xQueueGenericSend+0x178>)
1a001832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001836:	601a      	str	r2, [r3, #0]
1a001838:	f3bf 8f4f 	dsb	sy
1a00183c:	f3bf 8f6f 	isb	sy
1a001840:	e7bf      	b.n	1a0017c2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001842:	4620      	mov	r0, r4
1a001844:	f7ff fe2e 	bl	1a0014a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001848:	f000 fdbe 	bl	1a0023c8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a00184c:	2000      	movs	r0, #0
1a00184e:	e7a0      	b.n	1a001792 <xQueueGenericSend+0xba>
1a001850:	e000ed04 	.word	0xe000ed04

1a001854 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a001854:	b148      	cbz	r0, 1a00186a <prvInitialiseMutex+0x16>
	{
1a001856:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a001858:	2100      	movs	r1, #0
1a00185a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a00185c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a00185e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a001860:	460b      	mov	r3, r1
1a001862:	460a      	mov	r2, r1
1a001864:	f7ff ff38 	bl	1a0016d8 <xQueueGenericSend>
	}
1a001868:	bd08      	pop	{r3, pc}
1a00186a:	4770      	bx	lr

1a00186c <xQueueCreateMutex>:
	{
1a00186c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a00186e:	4602      	mov	r2, r0
1a001870:	2100      	movs	r1, #0
1a001872:	2001      	movs	r0, #1
1a001874:	f7ff fee9 	bl	1a00164a <xQueueGenericCreate>
1a001878:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a00187a:	f7ff ffeb 	bl	1a001854 <prvInitialiseMutex>
	}
1a00187e:	4620      	mov	r0, r4
1a001880:	bd10      	pop	{r4, pc}

1a001882 <xQueueGenericSendFromISR>:
{
1a001882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001886:	b160      	cbz	r0, 1a0018a2 <xQueueGenericSendFromISR+0x20>
1a001888:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00188a:	b999      	cbnz	r1, 1a0018b4 <xQueueGenericSendFromISR+0x32>
1a00188c:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a00188e:	b188      	cbz	r0, 1a0018b4 <xQueueGenericSendFromISR+0x32>
1a001890:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001894:	f383 8811 	msr	BASEPRI, r3
1a001898:	f3bf 8f6f 	isb	sy
1a00189c:	f3bf 8f4f 	dsb	sy
1a0018a0:	e7fe      	b.n	1a0018a0 <xQueueGenericSendFromISR+0x1e>
1a0018a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018a6:	f383 8811 	msr	BASEPRI, r3
1a0018aa:	f3bf 8f6f 	isb	sy
1a0018ae:	f3bf 8f4f 	dsb	sy
1a0018b2:	e7fe      	b.n	1a0018b2 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0018b4:	2b02      	cmp	r3, #2
1a0018b6:	d10b      	bne.n	1a0018d0 <xQueueGenericSendFromISR+0x4e>
1a0018b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0018ba:	2801      	cmp	r0, #1
1a0018bc:	d008      	beq.n	1a0018d0 <xQueueGenericSendFromISR+0x4e>
1a0018be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c2:	f383 8811 	msr	BASEPRI, r3
1a0018c6:	f3bf 8f6f 	isb	sy
1a0018ca:	f3bf 8f4f 	dsb	sy
1a0018ce:	e7fe      	b.n	1a0018ce <xQueueGenericSendFromISR+0x4c>
1a0018d0:	461f      	mov	r7, r3
1a0018d2:	4690      	mov	r8, r2
1a0018d4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0018d6:	f001 fc4f 	bl	1a003178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0018da:	f3ef 8611 	mrs	r6, BASEPRI
1a0018de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018e2:	f383 8811 	msr	BASEPRI, r3
1a0018e6:	f3bf 8f6f 	isb	sy
1a0018ea:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0018ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0018f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0018f2:	429a      	cmp	r2, r3
1a0018f4:	d303      	bcc.n	1a0018fe <xQueueGenericSendFromISR+0x7c>
1a0018f6:	2f02      	cmp	r7, #2
1a0018f8:	d001      	beq.n	1a0018fe <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a0018fa:	2000      	movs	r0, #0
1a0018fc:	e00f      	b.n	1a00191e <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0018fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001902:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001904:	463a      	mov	r2, r7
1a001906:	4649      	mov	r1, r9
1a001908:	4620      	mov	r0, r4
1a00190a:	f7ff fd7e 	bl	1a00140a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00190e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001912:	d008      	beq.n	1a001926 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001914:	1c6b      	adds	r3, r5, #1
1a001916:	b25b      	sxtb	r3, r3
1a001918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00191c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00191e:	f386 8811 	msr	BASEPRI, r6
}
1a001922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001926:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001928:	b15b      	cbz	r3, 1a001942 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00192a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00192e:	f000 feaf 	bl	1a002690 <xTaskRemoveFromEventList>
1a001932:	b140      	cbz	r0, 1a001946 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001934:	f1b8 0f00 	cmp.w	r8, #0
1a001938:	d007      	beq.n	1a00194a <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00193a:	2001      	movs	r0, #1
1a00193c:	f8c8 0000 	str.w	r0, [r8]
1a001940:	e7ed      	b.n	1a00191e <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001942:	2001      	movs	r0, #1
1a001944:	e7eb      	b.n	1a00191e <xQueueGenericSendFromISR+0x9c>
1a001946:	2001      	movs	r0, #1
1a001948:	e7e9      	b.n	1a00191e <xQueueGenericSendFromISR+0x9c>
1a00194a:	2001      	movs	r0, #1
1a00194c:	e7e7      	b.n	1a00191e <xQueueGenericSendFromISR+0x9c>
1a00194e:	Address 0x000000001a00194e is out of bounds.


1a001950 <xQueueReceive>:
{
1a001950:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001952:	b085      	sub	sp, #20
1a001954:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001956:	b160      	cbz	r0, 1a001972 <xQueueReceive+0x22>
1a001958:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00195a:	b999      	cbnz	r1, 1a001984 <xQueueReceive+0x34>
1a00195c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00195e:	b18b      	cbz	r3, 1a001984 <xQueueReceive+0x34>
	__asm volatile
1a001960:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001964:	f383 8811 	msr	BASEPRI, r3
1a001968:	f3bf 8f6f 	isb	sy
1a00196c:	f3bf 8f4f 	dsb	sy
1a001970:	e7fe      	b.n	1a001970 <xQueueReceive+0x20>
1a001972:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001976:	f383 8811 	msr	BASEPRI, r3
1a00197a:	f3bf 8f6f 	isb	sy
1a00197e:	f3bf 8f4f 	dsb	sy
1a001982:	e7fe      	b.n	1a001982 <xQueueReceive+0x32>
1a001984:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001986:	f000 ff1b 	bl	1a0027c0 <xTaskGetSchedulerState>
1a00198a:	b950      	cbnz	r0, 1a0019a2 <xQueueReceive+0x52>
1a00198c:	9b01      	ldr	r3, [sp, #4]
1a00198e:	b153      	cbz	r3, 1a0019a6 <xQueueReceive+0x56>
1a001990:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001994:	f383 8811 	msr	BASEPRI, r3
1a001998:	f3bf 8f6f 	isb	sy
1a00199c:	f3bf 8f4f 	dsb	sy
1a0019a0:	e7fe      	b.n	1a0019a0 <xQueueReceive+0x50>
1a0019a2:	2600      	movs	r6, #0
1a0019a4:	e03e      	b.n	1a001a24 <xQueueReceive+0xd4>
1a0019a6:	2600      	movs	r6, #0
1a0019a8:	e03c      	b.n	1a001a24 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0019aa:	4639      	mov	r1, r7
1a0019ac:	4620      	mov	r0, r4
1a0019ae:	f7ff fd67 	bl	1a001480 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0019b2:	3d01      	subs	r5, #1
1a0019b4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0019b6:	6923      	ldr	r3, [r4, #16]
1a0019b8:	b923      	cbnz	r3, 1a0019c4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0019ba:	f001 fad5 	bl	1a002f68 <vPortExitCritical>
				return pdPASS;
1a0019be:	2001      	movs	r0, #1
}
1a0019c0:	b005      	add	sp, #20
1a0019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0019c4:	f104 0010 	add.w	r0, r4, #16
1a0019c8:	f000 fe62 	bl	1a002690 <xTaskRemoveFromEventList>
1a0019cc:	2800      	cmp	r0, #0
1a0019ce:	d0f4      	beq.n	1a0019ba <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0019d0:	4b34      	ldr	r3, [pc, #208]	; (1a001aa4 <xQueueReceive+0x154>)
1a0019d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d6:	601a      	str	r2, [r3, #0]
1a0019d8:	f3bf 8f4f 	dsb	sy
1a0019dc:	f3bf 8f6f 	isb	sy
1a0019e0:	e7eb      	b.n	1a0019ba <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0019e2:	f001 fac1 	bl	1a002f68 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0019e6:	2000      	movs	r0, #0
1a0019e8:	e7ea      	b.n	1a0019c0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0019ea:	a802      	add	r0, sp, #8
1a0019ec:	f000 fe96 	bl	1a00271c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0019f0:	2601      	movs	r6, #1
1a0019f2:	e021      	b.n	1a001a38 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a0019f4:	2300      	movs	r3, #0
1a0019f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0019fa:	e029      	b.n	1a001a50 <xQueueReceive+0x100>
1a0019fc:	2300      	movs	r3, #0
1a0019fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001a02:	e02b      	b.n	1a001a5c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001a04:	4620      	mov	r0, r4
1a001a06:	f7ff fd4d 	bl	1a0014a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001a0a:	f000 fcdd 	bl	1a0023c8 <xTaskResumeAll>
1a001a0e:	e009      	b.n	1a001a24 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001a10:	4620      	mov	r0, r4
1a001a12:	f7ff fd47 	bl	1a0014a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001a16:	f000 fcd7 	bl	1a0023c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001a1a:	4620      	mov	r0, r4
1a001a1c:	f7ff fce8 	bl	1a0013f0 <prvIsQueueEmpty>
1a001a20:	2800      	cmp	r0, #0
1a001a22:	d13d      	bne.n	1a001aa0 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001a24:	f001 fa7e 	bl	1a002f24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001a28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001a2a:	2d00      	cmp	r5, #0
1a001a2c:	d1bd      	bne.n	1a0019aa <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001a2e:	9b01      	ldr	r3, [sp, #4]
1a001a30:	2b00      	cmp	r3, #0
1a001a32:	d0d6      	beq.n	1a0019e2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001a34:	2e00      	cmp	r6, #0
1a001a36:	d0d8      	beq.n	1a0019ea <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001a38:	f001 fa96 	bl	1a002f68 <vPortExitCritical>
		vTaskSuspendAll();
1a001a3c:	f000 fc2a 	bl	1a002294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001a40:	f001 fa70 	bl	1a002f24 <vPortEnterCritical>
1a001a44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001a48:	b25b      	sxtb	r3, r3
1a001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a4e:	d0d1      	beq.n	1a0019f4 <xQueueReceive+0xa4>
1a001a50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a54:	b25b      	sxtb	r3, r3
1a001a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a5a:	d0cf      	beq.n	1a0019fc <xQueueReceive+0xac>
1a001a5c:	f001 fa84 	bl	1a002f68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001a60:	a901      	add	r1, sp, #4
1a001a62:	a802      	add	r0, sp, #8
1a001a64:	f000 fe66 	bl	1a002734 <xTaskCheckForTimeOut>
1a001a68:	2800      	cmp	r0, #0
1a001a6a:	d1d1      	bne.n	1a001a10 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001a6c:	4620      	mov	r0, r4
1a001a6e:	f7ff fcbf 	bl	1a0013f0 <prvIsQueueEmpty>
1a001a72:	2800      	cmp	r0, #0
1a001a74:	d0c6      	beq.n	1a001a04 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001a76:	9901      	ldr	r1, [sp, #4]
1a001a78:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a7c:	f000 fdd4 	bl	1a002628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001a80:	4620      	mov	r0, r4
1a001a82:	f7ff fd0f 	bl	1a0014a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001a86:	f000 fc9f 	bl	1a0023c8 <xTaskResumeAll>
1a001a8a:	2800      	cmp	r0, #0
1a001a8c:	d1ca      	bne.n	1a001a24 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001a8e:	4b05      	ldr	r3, [pc, #20]	; (1a001aa4 <xQueueReceive+0x154>)
1a001a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a94:	601a      	str	r2, [r3, #0]
1a001a96:	f3bf 8f4f 	dsb	sy
1a001a9a:	f3bf 8f6f 	isb	sy
1a001a9e:	e7c1      	b.n	1a001a24 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001aa0:	2000      	movs	r0, #0
1a001aa2:	e78d      	b.n	1a0019c0 <xQueueReceive+0x70>
1a001aa4:	e000ed04 	.word	0xe000ed04

1a001aa8 <xQueueSemaphoreTake>:
{
1a001aa8:	b570      	push	{r4, r5, r6, lr}
1a001aaa:	b084      	sub	sp, #16
1a001aac:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001aae:	b940      	cbnz	r0, 1a001ac2 <xQueueSemaphoreTake+0x1a>
1a001ab0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ab4:	f383 8811 	msr	BASEPRI, r3
1a001ab8:	f3bf 8f6f 	isb	sy
1a001abc:	f3bf 8f4f 	dsb	sy
1a001ac0:	e7fe      	b.n	1a001ac0 <xQueueSemaphoreTake+0x18>
1a001ac2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001ac4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001ac6:	b143      	cbz	r3, 1a001ada <xQueueSemaphoreTake+0x32>
1a001ac8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001acc:	f383 8811 	msr	BASEPRI, r3
1a001ad0:	f3bf 8f6f 	isb	sy
1a001ad4:	f3bf 8f4f 	dsb	sy
1a001ad8:	e7fe      	b.n	1a001ad8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001ada:	f000 fe71 	bl	1a0027c0 <xTaskGetSchedulerState>
1a001ade:	b950      	cbnz	r0, 1a001af6 <xQueueSemaphoreTake+0x4e>
1a001ae0:	9b01      	ldr	r3, [sp, #4]
1a001ae2:	b15b      	cbz	r3, 1a001afc <xQueueSemaphoreTake+0x54>
1a001ae4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae8:	f383 8811 	msr	BASEPRI, r3
1a001aec:	f3bf 8f6f 	isb	sy
1a001af0:	f3bf 8f4f 	dsb	sy
1a001af4:	e7fe      	b.n	1a001af4 <xQueueSemaphoreTake+0x4c>
1a001af6:	2500      	movs	r5, #0
1a001af8:	462e      	mov	r6, r5
1a001afa:	e051      	b.n	1a001ba0 <xQueueSemaphoreTake+0xf8>
1a001afc:	2500      	movs	r5, #0
1a001afe:	462e      	mov	r6, r5
1a001b00:	e04e      	b.n	1a001ba0 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001b02:	3b01      	subs	r3, #1
1a001b04:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001b06:	6823      	ldr	r3, [r4, #0]
1a001b08:	b913      	cbnz	r3, 1a001b10 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001b0a:	f000 ff7d 	bl	1a002a08 <pvTaskIncrementMutexHeldCount>
1a001b0e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001b10:	6923      	ldr	r3, [r4, #16]
1a001b12:	b163      	cbz	r3, 1a001b2e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001b14:	f104 0010 	add.w	r0, r4, #16
1a001b18:	f000 fdba 	bl	1a002690 <xTaskRemoveFromEventList>
1a001b1c:	b138      	cbz	r0, 1a001b2e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a001b1e:	4b48      	ldr	r3, [pc, #288]	; (1a001c40 <xQueueSemaphoreTake+0x198>)
1a001b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b24:	601a      	str	r2, [r3, #0]
1a001b26:	f3bf 8f4f 	dsb	sy
1a001b2a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001b2e:	f001 fa1b 	bl	1a002f68 <vPortExitCritical>
				return pdPASS;
1a001b32:	2501      	movs	r5, #1
}
1a001b34:	4628      	mov	r0, r5
1a001b36:	b004      	add	sp, #16
1a001b38:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001b3a:	b145      	cbz	r5, 1a001b4e <xQueueSemaphoreTake+0xa6>
1a001b3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b40:	f383 8811 	msr	BASEPRI, r3
1a001b44:	f3bf 8f6f 	isb	sy
1a001b48:	f3bf 8f4f 	dsb	sy
1a001b4c:	e7fe      	b.n	1a001b4c <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a001b4e:	f001 fa0b 	bl	1a002f68 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001b52:	e7ef      	b.n	1a001b34 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001b54:	a802      	add	r0, sp, #8
1a001b56:	f000 fde1 	bl	1a00271c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001b5a:	2601      	movs	r6, #1
1a001b5c:	e02a      	b.n	1a001bb4 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a001b5e:	2300      	movs	r3, #0
1a001b60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001b64:	e032      	b.n	1a001bcc <xQueueSemaphoreTake+0x124>
1a001b66:	2300      	movs	r3, #0
1a001b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001b6c:	e034      	b.n	1a001bd8 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a001b6e:	f001 f9d9 	bl	1a002f24 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001b72:	6860      	ldr	r0, [r4, #4]
1a001b74:	f000 fe34 	bl	1a0027e0 <xTaskPriorityInherit>
1a001b78:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001b7a:	f001 f9f5 	bl	1a002f68 <vPortExitCritical>
1a001b7e:	e03b      	b.n	1a001bf8 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001b80:	4620      	mov	r0, r4
1a001b82:	f7ff fc8f 	bl	1a0014a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001b86:	f000 fc1f 	bl	1a0023c8 <xTaskResumeAll>
1a001b8a:	e009      	b.n	1a001ba0 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001b8c:	4620      	mov	r0, r4
1a001b8e:	f7ff fc89 	bl	1a0014a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001b92:	f000 fc19 	bl	1a0023c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b96:	4620      	mov	r0, r4
1a001b98:	f7ff fc2a 	bl	1a0013f0 <prvIsQueueEmpty>
1a001b9c:	2800      	cmp	r0, #0
1a001b9e:	d140      	bne.n	1a001c22 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001ba0:	f001 f9c0 	bl	1a002f24 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001ba6:	2b00      	cmp	r3, #0
1a001ba8:	d1ab      	bne.n	1a001b02 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001baa:	9b01      	ldr	r3, [sp, #4]
1a001bac:	2b00      	cmp	r3, #0
1a001bae:	d0c4      	beq.n	1a001b3a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001bb0:	2e00      	cmp	r6, #0
1a001bb2:	d0cf      	beq.n	1a001b54 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001bb4:	f001 f9d8 	bl	1a002f68 <vPortExitCritical>
		vTaskSuspendAll();
1a001bb8:	f000 fb6c 	bl	1a002294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001bbc:	f001 f9b2 	bl	1a002f24 <vPortEnterCritical>
1a001bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001bc4:	b25b      	sxtb	r3, r3
1a001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bca:	d0c8      	beq.n	1a001b5e <xQueueSemaphoreTake+0xb6>
1a001bcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001bd0:	b25b      	sxtb	r3, r3
1a001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bd6:	d0c6      	beq.n	1a001b66 <xQueueSemaphoreTake+0xbe>
1a001bd8:	f001 f9c6 	bl	1a002f68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001bdc:	a901      	add	r1, sp, #4
1a001bde:	a802      	add	r0, sp, #8
1a001be0:	f000 fda8 	bl	1a002734 <xTaskCheckForTimeOut>
1a001be4:	2800      	cmp	r0, #0
1a001be6:	d1d1      	bne.n	1a001b8c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001be8:	4620      	mov	r0, r4
1a001bea:	f7ff fc01 	bl	1a0013f0 <prvIsQueueEmpty>
1a001bee:	2800      	cmp	r0, #0
1a001bf0:	d0c6      	beq.n	1a001b80 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001bf2:	6823      	ldr	r3, [r4, #0]
1a001bf4:	2b00      	cmp	r3, #0
1a001bf6:	d0ba      	beq.n	1a001b6e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001bf8:	9901      	ldr	r1, [sp, #4]
1a001bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001bfe:	f000 fd13 	bl	1a002628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001c02:	4620      	mov	r0, r4
1a001c04:	f7ff fc4e 	bl	1a0014a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001c08:	f000 fbde 	bl	1a0023c8 <xTaskResumeAll>
1a001c0c:	2800      	cmp	r0, #0
1a001c0e:	d1c7      	bne.n	1a001ba0 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001c10:	4b0b      	ldr	r3, [pc, #44]	; (1a001c40 <xQueueSemaphoreTake+0x198>)
1a001c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c16:	601a      	str	r2, [r3, #0]
1a001c18:	f3bf 8f4f 	dsb	sy
1a001c1c:	f3bf 8f6f 	isb	sy
1a001c20:	e7be      	b.n	1a001ba0 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a001c22:	2d00      	cmp	r5, #0
1a001c24:	d086      	beq.n	1a001b34 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001c26:	f001 f97d 	bl	1a002f24 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001c2a:	4620      	mov	r0, r4
1a001c2c:	f7ff fbc8 	bl	1a0013c0 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001c30:	4601      	mov	r1, r0
1a001c32:	6860      	ldr	r0, [r4, #4]
1a001c34:	f000 fe88 	bl	1a002948 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001c38:	f001 f996 	bl	1a002f68 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001c3c:	2500      	movs	r5, #0
1a001c3e:	e779      	b.n	1a001b34 <xQueueSemaphoreTake+0x8c>
1a001c40:	e000ed04 	.word	0xe000ed04

1a001c44 <uxQueueSpacesAvailable>:
	configASSERT( pxQueue );
1a001c44:	b940      	cbnz	r0, 1a001c58 <uxQueueSpacesAvailable+0x14>
1a001c46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c4a:	f383 8811 	msr	BASEPRI, r3
1a001c4e:	f3bf 8f6f 	isb	sy
1a001c52:	f3bf 8f4f 	dsb	sy
1a001c56:	e7fe      	b.n	1a001c56 <uxQueueSpacesAvailable+0x12>
{
1a001c58:	b510      	push	{r4, lr}
1a001c5a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001c5c:	f001 f962 	bl	1a002f24 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1a001c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001c62:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1a001c64:	1b1c      	subs	r4, r3, r4
	taskEXIT_CRITICAL();
1a001c66:	f001 f97f 	bl	1a002f68 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a001c6a:	4620      	mov	r0, r4
1a001c6c:	bd10      	pop	{r4, pc}
1a001c6e:	Address 0x000000001a001c6e is out of bounds.


1a001c70 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001c70:	2300      	movs	r3, #0
1a001c72:	2b07      	cmp	r3, #7
1a001c74:	d80c      	bhi.n	1a001c90 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001c76:	4a07      	ldr	r2, [pc, #28]	; (1a001c94 <vQueueAddToRegistry+0x24>)
1a001c78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001c7c:	b10a      	cbz	r2, 1a001c82 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001c7e:	3301      	adds	r3, #1
1a001c80:	e7f7      	b.n	1a001c72 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001c82:	4a04      	ldr	r2, [pc, #16]	; (1a001c94 <vQueueAddToRegistry+0x24>)
1a001c84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001c8c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001c8e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001c90:	4770      	bx	lr
1a001c92:	bf00      	nop
1a001c94:	10002c30 	.word	0x10002c30

1a001c98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001c98:	b570      	push	{r4, r5, r6, lr}
1a001c9a:	4604      	mov	r4, r0
1a001c9c:	460d      	mov	r5, r1
1a001c9e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001ca0:	f001 f940 	bl	1a002f24 <vPortEnterCritical>
1a001ca4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001ca8:	b25b      	sxtb	r3, r3
1a001caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001cae:	d00d      	beq.n	1a001ccc <vQueueWaitForMessageRestricted+0x34>
1a001cb0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001cb4:	b25b      	sxtb	r3, r3
1a001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001cba:	d00b      	beq.n	1a001cd4 <vQueueWaitForMessageRestricted+0x3c>
1a001cbc:	f001 f954 	bl	1a002f68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001cc2:	b15b      	cbz	r3, 1a001cdc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001cc4:	4620      	mov	r0, r4
1a001cc6:	f7ff fbed 	bl	1a0014a4 <prvUnlockQueue>
	}
1a001cca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001ccc:	2300      	movs	r3, #0
1a001cce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001cd2:	e7ed      	b.n	1a001cb0 <vQueueWaitForMessageRestricted+0x18>
1a001cd4:	2300      	movs	r3, #0
1a001cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001cda:	e7ef      	b.n	1a001cbc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001cdc:	4632      	mov	r2, r6
1a001cde:	4629      	mov	r1, r5
1a001ce0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001ce4:	f000 fcb8 	bl	1a002658 <vTaskPlaceOnEventListRestricted>
1a001ce8:	e7ec      	b.n	1a001cc4 <vQueueWaitForMessageRestricted+0x2c>

1a001cea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001cea:	f100 0308 	add.w	r3, r0, #8
1a001cee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001cf4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001cf6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001cf8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001cfa:	2300      	movs	r3, #0
1a001cfc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001cfe:	4770      	bx	lr

1a001d00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001d00:	2300      	movs	r3, #0
1a001d02:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001d04:	4770      	bx	lr

1a001d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001d06:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001d08:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001d0a:	689a      	ldr	r2, [r3, #8]
1a001d0c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001d0e:	689a      	ldr	r2, [r3, #8]
1a001d10:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001d12:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001d14:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001d16:	6803      	ldr	r3, [r0, #0]
1a001d18:	3301      	adds	r3, #1
1a001d1a:	6003      	str	r3, [r0, #0]
}
1a001d1c:	4770      	bx	lr

1a001d1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001d1e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001d20:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001d22:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001d26:	d002      	beq.n	1a001d2e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001d28:	f100 0208 	add.w	r2, r0, #8
1a001d2c:	e002      	b.n	1a001d34 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001d2e:	6902      	ldr	r2, [r0, #16]
1a001d30:	e004      	b.n	1a001d3c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001d32:	461a      	mov	r2, r3
1a001d34:	6853      	ldr	r3, [r2, #4]
1a001d36:	681c      	ldr	r4, [r3, #0]
1a001d38:	42ac      	cmp	r4, r5
1a001d3a:	d9fa      	bls.n	1a001d32 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001d3c:	6853      	ldr	r3, [r2, #4]
1a001d3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001d40:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001d42:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001d44:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001d46:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001d48:	6803      	ldr	r3, [r0, #0]
1a001d4a:	3301      	adds	r3, #1
1a001d4c:	6003      	str	r3, [r0, #0]
}
1a001d4e:	bc30      	pop	{r4, r5}
1a001d50:	4770      	bx	lr

1a001d52 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001d52:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001d54:	6842      	ldr	r2, [r0, #4]
1a001d56:	6881      	ldr	r1, [r0, #8]
1a001d58:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001d5a:	6882      	ldr	r2, [r0, #8]
1a001d5c:	6841      	ldr	r1, [r0, #4]
1a001d5e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001d60:	685a      	ldr	r2, [r3, #4]
1a001d62:	4282      	cmp	r2, r0
1a001d64:	d006      	beq.n	1a001d74 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001d66:	2200      	movs	r2, #0
1a001d68:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001d6a:	681a      	ldr	r2, [r3, #0]
1a001d6c:	3a01      	subs	r2, #1
1a001d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001d70:	6818      	ldr	r0, [r3, #0]
}
1a001d72:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001d74:	6882      	ldr	r2, [r0, #8]
1a001d76:	605a      	str	r2, [r3, #4]
1a001d78:	e7f5      	b.n	1a001d66 <uxListRemove+0x14>
1a001d7a:	Address 0x000000001a001d7a is out of bounds.


1a001d7c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001d7c:	4b03      	ldr	r3, [pc, #12]	; (1a001d8c <vApplicationGetIdleTaskMemory+0x10>)
1a001d7e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001d80:	4b03      	ldr	r3, [pc, #12]	; (1a001d90 <vApplicationGetIdleTaskMemory+0x14>)
1a001d82:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001d84:	235a      	movs	r3, #90	; 0x5a
1a001d86:	6013      	str	r3, [r2, #0]
}
1a001d88:	4770      	bx	lr
1a001d8a:	bf00      	nop
1a001d8c:	1000285c 	.word	0x1000285c
1a001d90:	10002154 	.word	0x10002154

1a001d94 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001d94:	4b03      	ldr	r3, [pc, #12]	; (1a001da4 <vApplicationGetTimerTaskMemory+0x10>)
1a001d96:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001d98:	4b03      	ldr	r3, [pc, #12]	; (1a001da8 <vApplicationGetTimerTaskMemory+0x14>)
1a001d9a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001d9c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001da0:	6013      	str	r3, [r2, #0]
1a001da2:	4770      	bx	lr
1a001da4:	100028bc 	.word	0x100028bc
1a001da8:	100022bc 	.word	0x100022bc

1a001dac <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001dac:	b510      	push	{r4, lr}
1a001dae:	b082      	sub	sp, #8
1a001db0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001db2:	9001      	str	r0, [sp, #4]
1a001db4:	2300      	movs	r3, #0
1a001db6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001db8:	f001 f8b4 	bl	1a002f24 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001dbc:	9901      	ldr	r1, [sp, #4]
1a001dbe:	4622      	mov	r2, r4
1a001dc0:	4804      	ldr	r0, [pc, #16]	; (1a001dd4 <vAssertCalled+0x28>)
1a001dc2:	f003 fa53 	bl	1a00526c <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001dc6:	9b00      	ldr	r3, [sp, #0]
1a001dc8:	2b00      	cmp	r3, #0
1a001dca:	d0fc      	beq.n	1a001dc6 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001dcc:	f001 f8cc 	bl	1a002f68 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001dd0:	b002      	add	sp, #8
1a001dd2:	bd10      	pop	{r4, pc}
1a001dd4:	1a005e58 	.word	0x1a005e58

1a001dd8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001dd8:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001dda:	4804      	ldr	r0, [pc, #16]	; (1a001dec <vApplicationMallocFailedHook+0x14>)
1a001ddc:	f003 faba 	bl	1a005354 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001de0:	4903      	ldr	r1, [pc, #12]	; (1a001df0 <vApplicationMallocFailedHook+0x18>)
1a001de2:	202c      	movs	r0, #44	; 0x2c
1a001de4:	f7ff ffe2 	bl	1a001dac <vAssertCalled>
}
1a001de8:	bd08      	pop	{r3, pc}
1a001dea:	bf00      	nop
1a001dec:	1a005de4 	.word	0x1a005de4
1a001df0:	1a005e08 	.word	0x1a005e08

1a001df4 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001df4:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001df6:	4804      	ldr	r0, [pc, #16]	; (1a001e08 <vApplicationStackOverflowHook+0x14>)
1a001df8:	f003 fa38 	bl	1a00526c <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001dfc:	4903      	ldr	r1, [pc, #12]	; (1a001e0c <vApplicationStackOverflowHook+0x18>)
1a001dfe:	2050      	movs	r0, #80	; 0x50
1a001e00:	f7ff ffd4 	bl	1a001dac <vAssertCalled>
}
1a001e04:	bd08      	pop	{r3, pc}
1a001e06:	bf00      	nop
1a001e08:	1a005e28 	.word	0x1a005e28
1a001e0c:	1a005e08 	.word	0x1a005e08

1a001e10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001e10:	4b08      	ldr	r3, [pc, #32]	; (1a001e34 <prvResetNextTaskUnblockTime+0x24>)
1a001e12:	681b      	ldr	r3, [r3, #0]
1a001e14:	681b      	ldr	r3, [r3, #0]
1a001e16:	b13b      	cbz	r3, 1a001e28 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001e18:	4b06      	ldr	r3, [pc, #24]	; (1a001e34 <prvResetNextTaskUnblockTime+0x24>)
1a001e1a:	681b      	ldr	r3, [r3, #0]
1a001e1c:	68db      	ldr	r3, [r3, #12]
1a001e1e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001e20:	685a      	ldr	r2, [r3, #4]
1a001e22:	4b05      	ldr	r3, [pc, #20]	; (1a001e38 <prvResetNextTaskUnblockTime+0x28>)
1a001e24:	601a      	str	r2, [r3, #0]
	}
}
1a001e26:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001e28:	4b03      	ldr	r3, [pc, #12]	; (1a001e38 <prvResetNextTaskUnblockTime+0x28>)
1a001e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e2e:	601a      	str	r2, [r3, #0]
1a001e30:	4770      	bx	lr
1a001e32:	bf00      	nop
1a001e34:	10002920 	.word	0x10002920
1a001e38:	100029f4 	.word	0x100029f4

1a001e3c <prvInitialiseNewTask>:
{
1a001e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001e40:	4681      	mov	r9, r0
1a001e42:	460d      	mov	r5, r1
1a001e44:	4617      	mov	r7, r2
1a001e46:	469a      	mov	sl, r3
1a001e48:	9e08      	ldr	r6, [sp, #32]
1a001e4a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001e4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001e50:	0092      	lsls	r2, r2, #2
1a001e52:	21a5      	movs	r1, #165	; 0xa5
1a001e54:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001e56:	f003 f958 	bl	1a00510a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001e5c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001e60:	3a01      	subs	r2, #1
1a001e62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001e66:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001e6a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001e6c:	2300      	movs	r3, #0
1a001e6e:	2b0f      	cmp	r3, #15
1a001e70:	d807      	bhi.n	1a001e82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001e72:	5ce9      	ldrb	r1, [r5, r3]
1a001e74:	18e2      	adds	r2, r4, r3
1a001e76:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001e7a:	5cea      	ldrb	r2, [r5, r3]
1a001e7c:	b10a      	cbz	r2, 1a001e82 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001e7e:	3301      	adds	r3, #1
1a001e80:	e7f5      	b.n	1a001e6e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001e82:	2300      	movs	r3, #0
1a001e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001e88:	2e06      	cmp	r6, #6
1a001e8a:	d900      	bls.n	1a001e8e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001e8c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001e8e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001e90:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001e92:	2500      	movs	r5, #0
1a001e94:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001e96:	1d20      	adds	r0, r4, #4
1a001e98:	f7ff ff32 	bl	1a001d00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001e9c:	f104 0018 	add.w	r0, r4, #24
1a001ea0:	f7ff ff2e 	bl	1a001d00 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001ea4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ea6:	f1c6 0607 	rsb	r6, r6, #7
1a001eaa:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001eac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001eae:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001eb0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001eb4:	4652      	mov	r2, sl
1a001eb6:	4649      	mov	r1, r9
1a001eb8:	4638      	mov	r0, r7
1a001eba:	f001 f80b 	bl	1a002ed4 <pxPortInitialiseStack>
1a001ebe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001ec0:	f1b8 0f00 	cmp.w	r8, #0
1a001ec4:	d001      	beq.n	1a001eca <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001ec6:	f8c8 4000 	str.w	r4, [r8]
}
1a001eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ece:	Address 0x000000001a001ece is out of bounds.


1a001ed0 <prvInitialiseTaskLists>:
{
1a001ed0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001ed2:	2400      	movs	r4, #0
1a001ed4:	e007      	b.n	1a001ee6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001ed6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001eda:	0093      	lsls	r3, r2, #2
1a001edc:	480e      	ldr	r0, [pc, #56]	; (1a001f18 <prvInitialiseTaskLists+0x48>)
1a001ede:	4418      	add	r0, r3
1a001ee0:	f7ff ff03 	bl	1a001cea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001ee4:	3401      	adds	r4, #1
1a001ee6:	2c06      	cmp	r4, #6
1a001ee8:	d9f5      	bls.n	1a001ed6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001eea:	4d0c      	ldr	r5, [pc, #48]	; (1a001f1c <prvInitialiseTaskLists+0x4c>)
1a001eec:	4628      	mov	r0, r5
1a001eee:	f7ff fefc 	bl	1a001cea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001ef2:	4c0b      	ldr	r4, [pc, #44]	; (1a001f20 <prvInitialiseTaskLists+0x50>)
1a001ef4:	4620      	mov	r0, r4
1a001ef6:	f7ff fef8 	bl	1a001cea <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001efa:	480a      	ldr	r0, [pc, #40]	; (1a001f24 <prvInitialiseTaskLists+0x54>)
1a001efc:	f7ff fef5 	bl	1a001cea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001f00:	4809      	ldr	r0, [pc, #36]	; (1a001f28 <prvInitialiseTaskLists+0x58>)
1a001f02:	f7ff fef2 	bl	1a001cea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001f06:	4809      	ldr	r0, [pc, #36]	; (1a001f2c <prvInitialiseTaskLists+0x5c>)
1a001f08:	f7ff feef 	bl	1a001cea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001f0c:	4b08      	ldr	r3, [pc, #32]	; (1a001f30 <prvInitialiseTaskLists+0x60>)
1a001f0e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001f10:	4b08      	ldr	r3, [pc, #32]	; (1a001f34 <prvInitialiseTaskLists+0x64>)
1a001f12:	601c      	str	r4, [r3, #0]
}
1a001f14:	bd38      	pop	{r3, r4, r5, pc}
1a001f16:	bf00      	nop
1a001f18:	10002928 	.word	0x10002928
1a001f1c:	100029cc 	.word	0x100029cc
1a001f20:	100029e0 	.word	0x100029e0
1a001f24:	100029fc 	.word	0x100029fc
1a001f28:	10002a28 	.word	0x10002a28
1a001f2c:	10002a14 	.word	0x10002a14
1a001f30:	10002920 	.word	0x10002920
1a001f34:	10002924 	.word	0x10002924

1a001f38 <prvAddNewTaskToReadyList>:
{
1a001f38:	b510      	push	{r4, lr}
1a001f3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001f3c:	f000 fff2 	bl	1a002f24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001f40:	4a21      	ldr	r2, [pc, #132]	; (1a001fc8 <prvAddNewTaskToReadyList+0x90>)
1a001f42:	6813      	ldr	r3, [r2, #0]
1a001f44:	3301      	adds	r3, #1
1a001f46:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001f48:	4b20      	ldr	r3, [pc, #128]	; (1a001fcc <prvAddNewTaskToReadyList+0x94>)
1a001f4a:	681b      	ldr	r3, [r3, #0]
1a001f4c:	b15b      	cbz	r3, 1a001f66 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001f4e:	4b20      	ldr	r3, [pc, #128]	; (1a001fd0 <prvAddNewTaskToReadyList+0x98>)
1a001f50:	681b      	ldr	r3, [r3, #0]
1a001f52:	b96b      	cbnz	r3, 1a001f70 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001f54:	4b1d      	ldr	r3, [pc, #116]	; (1a001fcc <prvAddNewTaskToReadyList+0x94>)
1a001f56:	681b      	ldr	r3, [r3, #0]
1a001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001f5c:	429a      	cmp	r2, r3
1a001f5e:	d807      	bhi.n	1a001f70 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001f60:	4b1a      	ldr	r3, [pc, #104]	; (1a001fcc <prvAddNewTaskToReadyList+0x94>)
1a001f62:	601c      	str	r4, [r3, #0]
1a001f64:	e004      	b.n	1a001f70 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001f66:	4b19      	ldr	r3, [pc, #100]	; (1a001fcc <prvAddNewTaskToReadyList+0x94>)
1a001f68:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001f6a:	6813      	ldr	r3, [r2, #0]
1a001f6c:	2b01      	cmp	r3, #1
1a001f6e:	d027      	beq.n	1a001fc0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001f70:	4a18      	ldr	r2, [pc, #96]	; (1a001fd4 <prvAddNewTaskToReadyList+0x9c>)
1a001f72:	6813      	ldr	r3, [r2, #0]
1a001f74:	3301      	adds	r3, #1
1a001f76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001f78:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001f7c:	2201      	movs	r2, #1
1a001f7e:	409a      	lsls	r2, r3
1a001f80:	4915      	ldr	r1, [pc, #84]	; (1a001fd8 <prvAddNewTaskToReadyList+0xa0>)
1a001f82:	6808      	ldr	r0, [r1, #0]
1a001f84:	4302      	orrs	r2, r0
1a001f86:	600a      	str	r2, [r1, #0]
1a001f88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f8c:	009a      	lsls	r2, r3, #2
1a001f8e:	1d21      	adds	r1, r4, #4
1a001f90:	4812      	ldr	r0, [pc, #72]	; (1a001fdc <prvAddNewTaskToReadyList+0xa4>)
1a001f92:	4410      	add	r0, r2
1a001f94:	f7ff feb7 	bl	1a001d06 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001f98:	f000 ffe6 	bl	1a002f68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001f9c:	4b0c      	ldr	r3, [pc, #48]	; (1a001fd0 <prvAddNewTaskToReadyList+0x98>)
1a001f9e:	681b      	ldr	r3, [r3, #0]
1a001fa0:	b16b      	cbz	r3, 1a001fbe <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001fa2:	4b0a      	ldr	r3, [pc, #40]	; (1a001fcc <prvAddNewTaskToReadyList+0x94>)
1a001fa4:	681b      	ldr	r3, [r3, #0]
1a001fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001faa:	429a      	cmp	r2, r3
1a001fac:	d207      	bcs.n	1a001fbe <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001fae:	4b0c      	ldr	r3, [pc, #48]	; (1a001fe0 <prvAddNewTaskToReadyList+0xa8>)
1a001fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001fb4:	601a      	str	r2, [r3, #0]
1a001fb6:	f3bf 8f4f 	dsb	sy
1a001fba:	f3bf 8f6f 	isb	sy
}
1a001fbe:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001fc0:	f7ff ff86 	bl	1a001ed0 <prvInitialiseTaskLists>
1a001fc4:	e7d4      	b.n	1a001f70 <prvAddNewTaskToReadyList+0x38>
1a001fc6:	bf00      	nop
1a001fc8:	100029b4 	.word	0x100029b4
1a001fcc:	1000291c 	.word	0x1000291c
1a001fd0:	10002a10 	.word	0x10002a10
1a001fd4:	100029c4 	.word	0x100029c4
1a001fd8:	100029c8 	.word	0x100029c8
1a001fdc:	10002928 	.word	0x10002928
1a001fe0:	e000ed04 	.word	0xe000ed04

1a001fe4 <prvDeleteTCB>:
	{
1a001fe4:	b510      	push	{r4, lr}
1a001fe6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001fe8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001fec:	b933      	cbnz	r3, 1a001ffc <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001fee:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001ff0:	f7ff f9ae 	bl	1a001350 <vPortFree>
				vPortFree( pxTCB );
1a001ff4:	4620      	mov	r0, r4
1a001ff6:	f7ff f9ab 	bl	1a001350 <vPortFree>
	}
1a001ffa:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001ffc:	2b01      	cmp	r3, #1
1a001ffe:	d00a      	beq.n	1a002016 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a002000:	2b02      	cmp	r3, #2
1a002002:	d0fa      	beq.n	1a001ffa <prvDeleteTCB+0x16>
1a002004:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002008:	f383 8811 	msr	BASEPRI, r3
1a00200c:	f3bf 8f6f 	isb	sy
1a002010:	f3bf 8f4f 	dsb	sy
1a002014:	e7fe      	b.n	1a002014 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a002016:	f7ff f99b 	bl	1a001350 <vPortFree>
1a00201a:	e7ee      	b.n	1a001ffa <prvDeleteTCB+0x16>

1a00201c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00201c:	4b0f      	ldr	r3, [pc, #60]	; (1a00205c <prvCheckTasksWaitingTermination+0x40>)
1a00201e:	681b      	ldr	r3, [r3, #0]
1a002020:	b1d3      	cbz	r3, 1a002058 <prvCheckTasksWaitingTermination+0x3c>
{
1a002022:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a002024:	f000 ff7e 	bl	1a002f24 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a002028:	4b0d      	ldr	r3, [pc, #52]	; (1a002060 <prvCheckTasksWaitingTermination+0x44>)
1a00202a:	68db      	ldr	r3, [r3, #12]
1a00202c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00202e:	1d20      	adds	r0, r4, #4
1a002030:	f7ff fe8f 	bl	1a001d52 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a002034:	4a0b      	ldr	r2, [pc, #44]	; (1a002064 <prvCheckTasksWaitingTermination+0x48>)
1a002036:	6813      	ldr	r3, [r2, #0]
1a002038:	3b01      	subs	r3, #1
1a00203a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00203c:	4a07      	ldr	r2, [pc, #28]	; (1a00205c <prvCheckTasksWaitingTermination+0x40>)
1a00203e:	6813      	ldr	r3, [r2, #0]
1a002040:	3b01      	subs	r3, #1
1a002042:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a002044:	f000 ff90 	bl	1a002f68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a002048:	4620      	mov	r0, r4
1a00204a:	f7ff ffcb 	bl	1a001fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00204e:	4b03      	ldr	r3, [pc, #12]	; (1a00205c <prvCheckTasksWaitingTermination+0x40>)
1a002050:	681b      	ldr	r3, [r3, #0]
1a002052:	2b00      	cmp	r3, #0
1a002054:	d1e6      	bne.n	1a002024 <prvCheckTasksWaitingTermination+0x8>
}
1a002056:	bd10      	pop	{r4, pc}
1a002058:	4770      	bx	lr
1a00205a:	bf00      	nop
1a00205c:	100029b8 	.word	0x100029b8
1a002060:	10002a28 	.word	0x10002a28
1a002064:	100029b4 	.word	0x100029b4

1a002068 <prvIdleTask>:
{
1a002068:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00206a:	f7ff ffd7 	bl	1a00201c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00206e:	4b06      	ldr	r3, [pc, #24]	; (1a002088 <prvIdleTask+0x20>)
1a002070:	681b      	ldr	r3, [r3, #0]
1a002072:	2b01      	cmp	r3, #1
1a002074:	d9f9      	bls.n	1a00206a <prvIdleTask+0x2>
				taskYIELD();
1a002076:	4b05      	ldr	r3, [pc, #20]	; (1a00208c <prvIdleTask+0x24>)
1a002078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00207c:	601a      	str	r2, [r3, #0]
1a00207e:	f3bf 8f4f 	dsb	sy
1a002082:	f3bf 8f6f 	isb	sy
1a002086:	e7f0      	b.n	1a00206a <prvIdleTask+0x2>
1a002088:	10002928 	.word	0x10002928
1a00208c:	e000ed04 	.word	0xe000ed04

1a002090 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a002090:	b570      	push	{r4, r5, r6, lr}
1a002092:	4604      	mov	r4, r0
1a002094:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a002096:	4b1d      	ldr	r3, [pc, #116]	; (1a00210c <prvAddCurrentTaskToDelayedList+0x7c>)
1a002098:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00209a:	4b1d      	ldr	r3, [pc, #116]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a00209c:	6818      	ldr	r0, [r3, #0]
1a00209e:	3004      	adds	r0, #4
1a0020a0:	f7ff fe57 	bl	1a001d52 <uxListRemove>
1a0020a4:	b950      	cbnz	r0, 1a0020bc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0020a6:	4b1a      	ldr	r3, [pc, #104]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a0020a8:	681b      	ldr	r3, [r3, #0]
1a0020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0020ac:	2301      	movs	r3, #1
1a0020ae:	fa03 f202 	lsl.w	r2, r3, r2
1a0020b2:	4918      	ldr	r1, [pc, #96]	; (1a002114 <prvAddCurrentTaskToDelayedList+0x84>)
1a0020b4:	680b      	ldr	r3, [r1, #0]
1a0020b6:	ea23 0302 	bic.w	r3, r3, r2
1a0020ba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0020bc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0020c0:	d013      	beq.n	1a0020ea <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0020c2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0020c4:	4b12      	ldr	r3, [pc, #72]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a0020c6:	681b      	ldr	r3, [r3, #0]
1a0020c8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0020ca:	42a5      	cmp	r5, r4
1a0020cc:	d816      	bhi.n	1a0020fc <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0020ce:	4b12      	ldr	r3, [pc, #72]	; (1a002118 <prvAddCurrentTaskToDelayedList+0x88>)
1a0020d0:	6818      	ldr	r0, [r3, #0]
1a0020d2:	4b0f      	ldr	r3, [pc, #60]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a0020d4:	6819      	ldr	r1, [r3, #0]
1a0020d6:	3104      	adds	r1, #4
1a0020d8:	f7ff fe21 	bl	1a001d1e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0020dc:	4b0f      	ldr	r3, [pc, #60]	; (1a00211c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0020de:	681b      	ldr	r3, [r3, #0]
1a0020e0:	42a3      	cmp	r3, r4
1a0020e2:	d912      	bls.n	1a00210a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0020e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00211c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0020e6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0020e8:	e00f      	b.n	1a00210a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0020ea:	2e00      	cmp	r6, #0
1a0020ec:	d0e9      	beq.n	1a0020c2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0020ee:	4b08      	ldr	r3, [pc, #32]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a0020f0:	6819      	ldr	r1, [r3, #0]
1a0020f2:	3104      	adds	r1, #4
1a0020f4:	480a      	ldr	r0, [pc, #40]	; (1a002120 <prvAddCurrentTaskToDelayedList+0x90>)
1a0020f6:	f7ff fe06 	bl	1a001d06 <vListInsertEnd>
1a0020fa:	e006      	b.n	1a00210a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0020fc:	4b09      	ldr	r3, [pc, #36]	; (1a002124 <prvAddCurrentTaskToDelayedList+0x94>)
1a0020fe:	6818      	ldr	r0, [r3, #0]
1a002100:	4b03      	ldr	r3, [pc, #12]	; (1a002110 <prvAddCurrentTaskToDelayedList+0x80>)
1a002102:	6819      	ldr	r1, [r3, #0]
1a002104:	3104      	adds	r1, #4
1a002106:	f7ff fe0a 	bl	1a001d1e <vListInsert>
}
1a00210a:	bd70      	pop	{r4, r5, r6, pc}
1a00210c:	10002a3c 	.word	0x10002a3c
1a002110:	1000291c 	.word	0x1000291c
1a002114:	100029c8 	.word	0x100029c8
1a002118:	10002920 	.word	0x10002920
1a00211c:	100029f4 	.word	0x100029f4
1a002120:	10002a14 	.word	0x10002a14
1a002124:	10002924 	.word	0x10002924

1a002128 <xTaskCreateStatic>:
	{
1a002128:	b570      	push	{r4, r5, r6, lr}
1a00212a:	b086      	sub	sp, #24
1a00212c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00212e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a002130:	b945      	cbnz	r5, 1a002144 <xTaskCreateStatic+0x1c>
1a002132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002136:	f383 8811 	msr	BASEPRI, r3
1a00213a:	f3bf 8f6f 	isb	sy
1a00213e:	f3bf 8f4f 	dsb	sy
1a002142:	e7fe      	b.n	1a002142 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a002144:	b944      	cbnz	r4, 1a002158 <xTaskCreateStatic+0x30>
1a002146:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00214a:	f383 8811 	msr	BASEPRI, r3
1a00214e:	f3bf 8f6f 	isb	sy
1a002152:	f3bf 8f4f 	dsb	sy
1a002156:	e7fe      	b.n	1a002156 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002158:	2660      	movs	r6, #96	; 0x60
1a00215a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00215c:	9e04      	ldr	r6, [sp, #16]
1a00215e:	2e60      	cmp	r6, #96	; 0x60
1a002160:	d008      	beq.n	1a002174 <xTaskCreateStatic+0x4c>
1a002162:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002166:	f383 8811 	msr	BASEPRI, r3
1a00216a:	f3bf 8f6f 	isb	sy
1a00216e:	f3bf 8f4f 	dsb	sy
1a002172:	e7fe      	b.n	1a002172 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a002174:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a002176:	2502      	movs	r5, #2
1a002178:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00217c:	2500      	movs	r5, #0
1a00217e:	9503      	str	r5, [sp, #12]
1a002180:	9402      	str	r4, [sp, #8]
1a002182:	ad05      	add	r5, sp, #20
1a002184:	9501      	str	r5, [sp, #4]
1a002186:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a002188:	9500      	str	r5, [sp, #0]
1a00218a:	f7ff fe57 	bl	1a001e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00218e:	4620      	mov	r0, r4
1a002190:	f7ff fed2 	bl	1a001f38 <prvAddNewTaskToReadyList>
	}
1a002194:	9805      	ldr	r0, [sp, #20]
1a002196:	b006      	add	sp, #24
1a002198:	bd70      	pop	{r4, r5, r6, pc}

1a00219a <xTaskCreate>:
	{
1a00219a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00219e:	b085      	sub	sp, #20
1a0021a0:	4607      	mov	r7, r0
1a0021a2:	4688      	mov	r8, r1
1a0021a4:	4615      	mov	r5, r2
1a0021a6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0021a8:	0090      	lsls	r0, r2, #2
1a0021aa:	f7ff f843 	bl	1a001234 <pvPortMalloc>
			if( pxStack != NULL )
1a0021ae:	b308      	cbz	r0, 1a0021f4 <xTaskCreate+0x5a>
1a0021b0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0021b2:	2060      	movs	r0, #96	; 0x60
1a0021b4:	f7ff f83e 	bl	1a001234 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0021b8:	4604      	mov	r4, r0
1a0021ba:	b1b8      	cbz	r0, 1a0021ec <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0021bc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0021be:	b1e4      	cbz	r4, 1a0021fa <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0021c0:	2300      	movs	r3, #0
1a0021c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0021c6:	9303      	str	r3, [sp, #12]
1a0021c8:	9402      	str	r4, [sp, #8]
1a0021ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0021cc:	9301      	str	r3, [sp, #4]
1a0021ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0021d0:	9300      	str	r3, [sp, #0]
1a0021d2:	464b      	mov	r3, r9
1a0021d4:	462a      	mov	r2, r5
1a0021d6:	4641      	mov	r1, r8
1a0021d8:	4638      	mov	r0, r7
1a0021da:	f7ff fe2f 	bl	1a001e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0021de:	4620      	mov	r0, r4
1a0021e0:	f7ff feaa 	bl	1a001f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0021e4:	2001      	movs	r0, #1
	}
1a0021e6:	b005      	add	sp, #20
1a0021e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0021ec:	4630      	mov	r0, r6
1a0021ee:	f7ff f8af 	bl	1a001350 <vPortFree>
1a0021f2:	e7e4      	b.n	1a0021be <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0021f8:	e7f5      	b.n	1a0021e6 <xTaskCreate+0x4c>
1a0021fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0021fe:	e7f2      	b.n	1a0021e6 <xTaskCreate+0x4c>

1a002200 <vTaskStartScheduler>:
{
1a002200:	b510      	push	{r4, lr}
1a002202:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a002204:	2400      	movs	r4, #0
1a002206:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a002208:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00220a:	aa07      	add	r2, sp, #28
1a00220c:	a906      	add	r1, sp, #24
1a00220e:	a805      	add	r0, sp, #20
1a002210:	f7ff fdb4 	bl	1a001d7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a002214:	9b05      	ldr	r3, [sp, #20]
1a002216:	9302      	str	r3, [sp, #8]
1a002218:	9b06      	ldr	r3, [sp, #24]
1a00221a:	9301      	str	r3, [sp, #4]
1a00221c:	9400      	str	r4, [sp, #0]
1a00221e:	4623      	mov	r3, r4
1a002220:	9a07      	ldr	r2, [sp, #28]
1a002222:	4917      	ldr	r1, [pc, #92]	; (1a002280 <vTaskStartScheduler+0x80>)
1a002224:	4817      	ldr	r0, [pc, #92]	; (1a002284 <vTaskStartScheduler+0x84>)
1a002226:	f7ff ff7f 	bl	1a002128 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00222a:	b140      	cbz	r0, 1a00223e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00222c:	f000 fc66 	bl	1a002afc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a002230:	2801      	cmp	r0, #1
1a002232:	d006      	beq.n	1a002242 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a002234:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002238:	d018      	beq.n	1a00226c <vTaskStartScheduler+0x6c>
}
1a00223a:	b008      	add	sp, #32
1a00223c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00223e:	2000      	movs	r0, #0
1a002240:	e7f6      	b.n	1a002230 <vTaskStartScheduler+0x30>
1a002242:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002246:	f383 8811 	msr	BASEPRI, r3
1a00224a:	f3bf 8f6f 	isb	sy
1a00224e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a002252:	4b0d      	ldr	r3, [pc, #52]	; (1a002288 <vTaskStartScheduler+0x88>)
1a002254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00225a:	4b0c      	ldr	r3, [pc, #48]	; (1a00228c <vTaskStartScheduler+0x8c>)
1a00225c:	2201      	movs	r2, #1
1a00225e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002260:	4b0b      	ldr	r3, [pc, #44]	; (1a002290 <vTaskStartScheduler+0x90>)
1a002262:	2200      	movs	r2, #0
1a002264:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a002266:	f000 feff 	bl	1a003068 <xPortStartScheduler>
1a00226a:	e7e6      	b.n	1a00223a <vTaskStartScheduler+0x3a>
1a00226c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002270:	f383 8811 	msr	BASEPRI, r3
1a002274:	f3bf 8f6f 	isb	sy
1a002278:	f3bf 8f4f 	dsb	sy
1a00227c:	e7fe      	b.n	1a00227c <vTaskStartScheduler+0x7c>
1a00227e:	bf00      	nop
1a002280:	1a005e98 	.word	0x1a005e98
1a002284:	1a002069 	.word	0x1a002069
1a002288:	100029f4 	.word	0x100029f4
1a00228c:	10002a10 	.word	0x10002a10
1a002290:	10002a3c 	.word	0x10002a3c

1a002294 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a002294:	4a02      	ldr	r2, [pc, #8]	; (1a0022a0 <vTaskSuspendAll+0xc>)
1a002296:	6813      	ldr	r3, [r2, #0]
1a002298:	3301      	adds	r3, #1
1a00229a:	6013      	str	r3, [r2, #0]
}
1a00229c:	4770      	bx	lr
1a00229e:	bf00      	nop
1a0022a0:	100029c0 	.word	0x100029c0

1a0022a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0022a4:	4b01      	ldr	r3, [pc, #4]	; (1a0022ac <xTaskGetTickCount+0x8>)
1a0022a6:	6818      	ldr	r0, [r3, #0]
}
1a0022a8:	4770      	bx	lr
1a0022aa:	bf00      	nop
1a0022ac:	10002a3c 	.word	0x10002a3c

1a0022b0 <xTaskIncrementTick>:
{
1a0022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0022b2:	4b3a      	ldr	r3, [pc, #232]	; (1a00239c <xTaskIncrementTick+0xec>)
1a0022b4:	681b      	ldr	r3, [r3, #0]
1a0022b6:	2b00      	cmp	r3, #0
1a0022b8:	d164      	bne.n	1a002384 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0022ba:	4b39      	ldr	r3, [pc, #228]	; (1a0023a0 <xTaskIncrementTick+0xf0>)
1a0022bc:	681d      	ldr	r5, [r3, #0]
1a0022be:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0022c0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0022c2:	b9c5      	cbnz	r5, 1a0022f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0022c4:	4b37      	ldr	r3, [pc, #220]	; (1a0023a4 <xTaskIncrementTick+0xf4>)
1a0022c6:	681b      	ldr	r3, [r3, #0]
1a0022c8:	681b      	ldr	r3, [r3, #0]
1a0022ca:	b143      	cbz	r3, 1a0022de <xTaskIncrementTick+0x2e>
1a0022cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022d0:	f383 8811 	msr	BASEPRI, r3
1a0022d4:	f3bf 8f6f 	isb	sy
1a0022d8:	f3bf 8f4f 	dsb	sy
1a0022dc:	e7fe      	b.n	1a0022dc <xTaskIncrementTick+0x2c>
1a0022de:	4a31      	ldr	r2, [pc, #196]	; (1a0023a4 <xTaskIncrementTick+0xf4>)
1a0022e0:	6811      	ldr	r1, [r2, #0]
1a0022e2:	4b31      	ldr	r3, [pc, #196]	; (1a0023a8 <xTaskIncrementTick+0xf8>)
1a0022e4:	6818      	ldr	r0, [r3, #0]
1a0022e6:	6010      	str	r0, [r2, #0]
1a0022e8:	6019      	str	r1, [r3, #0]
1a0022ea:	4a30      	ldr	r2, [pc, #192]	; (1a0023ac <xTaskIncrementTick+0xfc>)
1a0022ec:	6813      	ldr	r3, [r2, #0]
1a0022ee:	3301      	adds	r3, #1
1a0022f0:	6013      	str	r3, [r2, #0]
1a0022f2:	f7ff fd8d 	bl	1a001e10 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0022f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0023b0 <xTaskIncrementTick+0x100>)
1a0022f8:	681b      	ldr	r3, [r3, #0]
1a0022fa:	42ab      	cmp	r3, r5
1a0022fc:	d938      	bls.n	1a002370 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0022fe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002300:	4b2c      	ldr	r3, [pc, #176]	; (1a0023b4 <xTaskIncrementTick+0x104>)
1a002302:	681b      	ldr	r3, [r3, #0]
1a002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00230a:	009a      	lsls	r2, r3, #2
1a00230c:	4b2a      	ldr	r3, [pc, #168]	; (1a0023b8 <xTaskIncrementTick+0x108>)
1a00230e:	589b      	ldr	r3, [r3, r2]
1a002310:	2b01      	cmp	r3, #1
1a002312:	d93c      	bls.n	1a00238e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a002314:	2401      	movs	r4, #1
1a002316:	e03a      	b.n	1a00238e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002318:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00231a:	4b22      	ldr	r3, [pc, #136]	; (1a0023a4 <xTaskIncrementTick+0xf4>)
1a00231c:	681b      	ldr	r3, [r3, #0]
1a00231e:	681b      	ldr	r3, [r3, #0]
1a002320:	b343      	cbz	r3, 1a002374 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a002322:	4b20      	ldr	r3, [pc, #128]	; (1a0023a4 <xTaskIncrementTick+0xf4>)
1a002324:	681b      	ldr	r3, [r3, #0]
1a002326:	68db      	ldr	r3, [r3, #12]
1a002328:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00232a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00232c:	429d      	cmp	r5, r3
1a00232e:	d326      	bcc.n	1a00237e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002330:	1d37      	adds	r7, r6, #4
1a002332:	4638      	mov	r0, r7
1a002334:	f7ff fd0d 	bl	1a001d52 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002338:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00233a:	b11b      	cbz	r3, 1a002344 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00233c:	f106 0018 	add.w	r0, r6, #24
1a002340:	f7ff fd07 	bl	1a001d52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002344:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a002346:	2201      	movs	r2, #1
1a002348:	409a      	lsls	r2, r3
1a00234a:	491c      	ldr	r1, [pc, #112]	; (1a0023bc <xTaskIncrementTick+0x10c>)
1a00234c:	6808      	ldr	r0, [r1, #0]
1a00234e:	4302      	orrs	r2, r0
1a002350:	600a      	str	r2, [r1, #0]
1a002352:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002356:	009a      	lsls	r2, r3, #2
1a002358:	4639      	mov	r1, r7
1a00235a:	4817      	ldr	r0, [pc, #92]	; (1a0023b8 <xTaskIncrementTick+0x108>)
1a00235c:	4410      	add	r0, r2
1a00235e:	f7ff fcd2 	bl	1a001d06 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002362:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a002364:	4b13      	ldr	r3, [pc, #76]	; (1a0023b4 <xTaskIncrementTick+0x104>)
1a002366:	681b      	ldr	r3, [r3, #0]
1a002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00236a:	429a      	cmp	r2, r3
1a00236c:	d2d4      	bcs.n	1a002318 <xTaskIncrementTick+0x68>
1a00236e:	e7d4      	b.n	1a00231a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a002370:	2400      	movs	r4, #0
1a002372:	e7d2      	b.n	1a00231a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002374:	4b0e      	ldr	r3, [pc, #56]	; (1a0023b0 <xTaskIncrementTick+0x100>)
1a002376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00237a:	601a      	str	r2, [r3, #0]
					break;
1a00237c:	e7c0      	b.n	1a002300 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00237e:	4a0c      	ldr	r2, [pc, #48]	; (1a0023b0 <xTaskIncrementTick+0x100>)
1a002380:	6013      	str	r3, [r2, #0]
						break;
1a002382:	e7bd      	b.n	1a002300 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a002384:	4a0e      	ldr	r2, [pc, #56]	; (1a0023c0 <xTaskIncrementTick+0x110>)
1a002386:	6813      	ldr	r3, [r2, #0]
1a002388:	3301      	adds	r3, #1
1a00238a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00238c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00238e:	4b0d      	ldr	r3, [pc, #52]	; (1a0023c4 <xTaskIncrementTick+0x114>)
1a002390:	681b      	ldr	r3, [r3, #0]
1a002392:	b103      	cbz	r3, 1a002396 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a002394:	2401      	movs	r4, #1
}
1a002396:	4620      	mov	r0, r4
1a002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00239a:	bf00      	nop
1a00239c:	100029c0 	.word	0x100029c0
1a0023a0:	10002a3c 	.word	0x10002a3c
1a0023a4:	10002920 	.word	0x10002920
1a0023a8:	10002924 	.word	0x10002924
1a0023ac:	100029f8 	.word	0x100029f8
1a0023b0:	100029f4 	.word	0x100029f4
1a0023b4:	1000291c 	.word	0x1000291c
1a0023b8:	10002928 	.word	0x10002928
1a0023bc:	100029c8 	.word	0x100029c8
1a0023c0:	100029bc 	.word	0x100029bc
1a0023c4:	10002a40 	.word	0x10002a40

1a0023c8 <xTaskResumeAll>:
{
1a0023c8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0023ca:	4b33      	ldr	r3, [pc, #204]	; (1a002498 <xTaskResumeAll+0xd0>)
1a0023cc:	681b      	ldr	r3, [r3, #0]
1a0023ce:	b943      	cbnz	r3, 1a0023e2 <xTaskResumeAll+0x1a>
1a0023d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023d4:	f383 8811 	msr	BASEPRI, r3
1a0023d8:	f3bf 8f6f 	isb	sy
1a0023dc:	f3bf 8f4f 	dsb	sy
1a0023e0:	e7fe      	b.n	1a0023e0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0023e2:	f000 fd9f 	bl	1a002f24 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0023e6:	4b2c      	ldr	r3, [pc, #176]	; (1a002498 <xTaskResumeAll+0xd0>)
1a0023e8:	681a      	ldr	r2, [r3, #0]
1a0023ea:	3a01      	subs	r2, #1
1a0023ec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0023ee:	681b      	ldr	r3, [r3, #0]
1a0023f0:	2b00      	cmp	r3, #0
1a0023f2:	d14d      	bne.n	1a002490 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0023f4:	4b29      	ldr	r3, [pc, #164]	; (1a00249c <xTaskResumeAll+0xd4>)
1a0023f6:	681b      	ldr	r3, [r3, #0]
1a0023f8:	b923      	cbnz	r3, 1a002404 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0023fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0023fc:	f000 fdb4 	bl	1a002f68 <vPortExitCritical>
}
1a002400:	4620      	mov	r0, r4
1a002402:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002404:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002406:	4b26      	ldr	r3, [pc, #152]	; (1a0024a0 <xTaskResumeAll+0xd8>)
1a002408:	681b      	ldr	r3, [r3, #0]
1a00240a:	b31b      	cbz	r3, 1a002454 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00240c:	4b24      	ldr	r3, [pc, #144]	; (1a0024a0 <xTaskResumeAll+0xd8>)
1a00240e:	68db      	ldr	r3, [r3, #12]
1a002410:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002412:	f104 0018 	add.w	r0, r4, #24
1a002416:	f7ff fc9c 	bl	1a001d52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00241a:	1d25      	adds	r5, r4, #4
1a00241c:	4628      	mov	r0, r5
1a00241e:	f7ff fc98 	bl	1a001d52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002422:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002424:	2201      	movs	r2, #1
1a002426:	409a      	lsls	r2, r3
1a002428:	491e      	ldr	r1, [pc, #120]	; (1a0024a4 <xTaskResumeAll+0xdc>)
1a00242a:	6808      	ldr	r0, [r1, #0]
1a00242c:	4302      	orrs	r2, r0
1a00242e:	600a      	str	r2, [r1, #0]
1a002430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002434:	009a      	lsls	r2, r3, #2
1a002436:	4629      	mov	r1, r5
1a002438:	481b      	ldr	r0, [pc, #108]	; (1a0024a8 <xTaskResumeAll+0xe0>)
1a00243a:	4410      	add	r0, r2
1a00243c:	f7ff fc63 	bl	1a001d06 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002442:	4b1a      	ldr	r3, [pc, #104]	; (1a0024ac <xTaskResumeAll+0xe4>)
1a002444:	681b      	ldr	r3, [r3, #0]
1a002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002448:	429a      	cmp	r2, r3
1a00244a:	d3dc      	bcc.n	1a002406 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00244c:	4b18      	ldr	r3, [pc, #96]	; (1a0024b0 <xTaskResumeAll+0xe8>)
1a00244e:	2201      	movs	r2, #1
1a002450:	601a      	str	r2, [r3, #0]
1a002452:	e7d8      	b.n	1a002406 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002454:	b10c      	cbz	r4, 1a00245a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002456:	f7ff fcdb 	bl	1a001e10 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00245a:	4b16      	ldr	r3, [pc, #88]	; (1a0024b4 <xTaskResumeAll+0xec>)
1a00245c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00245e:	b154      	cbz	r4, 1a002476 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002460:	f7ff ff26 	bl	1a0022b0 <xTaskIncrementTick>
1a002464:	b110      	cbz	r0, 1a00246c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a002466:	4b12      	ldr	r3, [pc, #72]	; (1a0024b0 <xTaskResumeAll+0xe8>)
1a002468:	2201      	movs	r2, #1
1a00246a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00246c:	3c01      	subs	r4, #1
1a00246e:	d1f7      	bne.n	1a002460 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002470:	4b10      	ldr	r3, [pc, #64]	; (1a0024b4 <xTaskResumeAll+0xec>)
1a002472:	2200      	movs	r2, #0
1a002474:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a002476:	4b0e      	ldr	r3, [pc, #56]	; (1a0024b0 <xTaskResumeAll+0xe8>)
1a002478:	681b      	ldr	r3, [r3, #0]
1a00247a:	b15b      	cbz	r3, 1a002494 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00247c:	4b0e      	ldr	r3, [pc, #56]	; (1a0024b8 <xTaskResumeAll+0xf0>)
1a00247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002482:	601a      	str	r2, [r3, #0]
1a002484:	f3bf 8f4f 	dsb	sy
1a002488:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00248c:	2401      	movs	r4, #1
1a00248e:	e7b5      	b.n	1a0023fc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002490:	2400      	movs	r4, #0
1a002492:	e7b3      	b.n	1a0023fc <xTaskResumeAll+0x34>
1a002494:	2400      	movs	r4, #0
1a002496:	e7b1      	b.n	1a0023fc <xTaskResumeAll+0x34>
1a002498:	100029c0 	.word	0x100029c0
1a00249c:	100029b4 	.word	0x100029b4
1a0024a0:	100029fc 	.word	0x100029fc
1a0024a4:	100029c8 	.word	0x100029c8
1a0024a8:	10002928 	.word	0x10002928
1a0024ac:	1000291c 	.word	0x1000291c
1a0024b0:	10002a40 	.word	0x10002a40
1a0024b4:	100029bc 	.word	0x100029bc
1a0024b8:	e000ed04 	.word	0xe000ed04

1a0024bc <vTaskDelayUntil>:
	{
1a0024bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a0024be:	b150      	cbz	r0, 1a0024d6 <vTaskDelayUntil+0x1a>
1a0024c0:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0024c2:	b989      	cbnz	r1, 1a0024e8 <vTaskDelayUntil+0x2c>
1a0024c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c8:	f383 8811 	msr	BASEPRI, r3
1a0024cc:	f3bf 8f6f 	isb	sy
1a0024d0:	f3bf 8f4f 	dsb	sy
1a0024d4:	e7fe      	b.n	1a0024d4 <vTaskDelayUntil+0x18>
1a0024d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024da:	f383 8811 	msr	BASEPRI, r3
1a0024de:	f3bf 8f6f 	isb	sy
1a0024e2:	f3bf 8f4f 	dsb	sy
1a0024e6:	e7fe      	b.n	1a0024e6 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0024e8:	4b1a      	ldr	r3, [pc, #104]	; (1a002554 <vTaskDelayUntil+0x98>)
1a0024ea:	681b      	ldr	r3, [r3, #0]
1a0024ec:	b143      	cbz	r3, 1a002500 <vTaskDelayUntil+0x44>
1a0024ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024f2:	f383 8811 	msr	BASEPRI, r3
1a0024f6:	f3bf 8f6f 	isb	sy
1a0024fa:	f3bf 8f4f 	dsb	sy
1a0024fe:	e7fe      	b.n	1a0024fe <vTaskDelayUntil+0x42>
1a002500:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a002502:	f7ff fec7 	bl	1a002294 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a002506:	4b14      	ldr	r3, [pc, #80]	; (1a002558 <vTaskDelayUntil+0x9c>)
1a002508:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00250a:	682a      	ldr	r2, [r5, #0]
1a00250c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00250e:	4282      	cmp	r2, r0
1a002510:	d918      	bls.n	1a002544 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002512:	42a2      	cmp	r2, r4
1a002514:	d80c      	bhi.n	1a002530 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a002516:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a002518:	f7ff ff56 	bl	1a0023c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00251c:	b938      	cbnz	r0, 1a00252e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00251e:	4b0f      	ldr	r3, [pc, #60]	; (1a00255c <vTaskDelayUntil+0xa0>)
1a002520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002524:	601a      	str	r2, [r3, #0]
1a002526:	f3bf 8f4f 	dsb	sy
1a00252a:	f3bf 8f6f 	isb	sy
	}
1a00252e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002530:	42a0      	cmp	r0, r4
1a002532:	d301      	bcc.n	1a002538 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a002534:	602c      	str	r4, [r5, #0]
1a002536:	e7ef      	b.n	1a002518 <vTaskDelayUntil+0x5c>
1a002538:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00253a:	2100      	movs	r1, #0
1a00253c:	1a20      	subs	r0, r4, r0
1a00253e:	f7ff fda7 	bl	1a002090 <prvAddCurrentTaskToDelayedList>
1a002542:	e7e9      	b.n	1a002518 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002544:	42a2      	cmp	r2, r4
1a002546:	d801      	bhi.n	1a00254c <vTaskDelayUntil+0x90>
1a002548:	42a0      	cmp	r0, r4
1a00254a:	d201      	bcs.n	1a002550 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a00254c:	602c      	str	r4, [r5, #0]
1a00254e:	e7f4      	b.n	1a00253a <vTaskDelayUntil+0x7e>
1a002550:	602c      	str	r4, [r5, #0]
1a002552:	e7e1      	b.n	1a002518 <vTaskDelayUntil+0x5c>
1a002554:	100029c0 	.word	0x100029c0
1a002558:	10002a3c 	.word	0x10002a3c
1a00255c:	e000ed04 	.word	0xe000ed04

1a002560 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002560:	4b2c      	ldr	r3, [pc, #176]	; (1a002614 <vTaskSwitchContext+0xb4>)
1a002562:	681b      	ldr	r3, [r3, #0]
1a002564:	b11b      	cbz	r3, 1a00256e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002566:	4b2c      	ldr	r3, [pc, #176]	; (1a002618 <vTaskSwitchContext+0xb8>)
1a002568:	2201      	movs	r2, #1
1a00256a:	601a      	str	r2, [r3, #0]
1a00256c:	4770      	bx	lr
{
1a00256e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002570:	4b29      	ldr	r3, [pc, #164]	; (1a002618 <vTaskSwitchContext+0xb8>)
1a002572:	2200      	movs	r2, #0
1a002574:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002576:	4b29      	ldr	r3, [pc, #164]	; (1a00261c <vTaskSwitchContext+0xbc>)
1a002578:	681b      	ldr	r3, [r3, #0]
1a00257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00257c:	681a      	ldr	r2, [r3, #0]
1a00257e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002582:	d103      	bne.n	1a00258c <vTaskSwitchContext+0x2c>
1a002584:	685a      	ldr	r2, [r3, #4]
1a002586:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00258a:	d01b      	beq.n	1a0025c4 <vTaskSwitchContext+0x64>
1a00258c:	4b23      	ldr	r3, [pc, #140]	; (1a00261c <vTaskSwitchContext+0xbc>)
1a00258e:	6818      	ldr	r0, [r3, #0]
1a002590:	6819      	ldr	r1, [r3, #0]
1a002592:	3134      	adds	r1, #52	; 0x34
1a002594:	f7ff fc2e 	bl	1a001df4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002598:	4b21      	ldr	r3, [pc, #132]	; (1a002620 <vTaskSwitchContext+0xc0>)
1a00259a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00259c:	fab3 f383 	clz	r3, r3
1a0025a0:	b2db      	uxtb	r3, r3
1a0025a2:	f1c3 031f 	rsb	r3, r3, #31
1a0025a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0025aa:	008a      	lsls	r2, r1, #2
1a0025ac:	491d      	ldr	r1, [pc, #116]	; (1a002624 <vTaskSwitchContext+0xc4>)
1a0025ae:	588a      	ldr	r2, [r1, r2]
1a0025b0:	b98a      	cbnz	r2, 1a0025d6 <vTaskSwitchContext+0x76>
	__asm volatile
1a0025b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025b6:	f383 8811 	msr	BASEPRI, r3
1a0025ba:	f3bf 8f6f 	isb	sy
1a0025be:	f3bf 8f4f 	dsb	sy
1a0025c2:	e7fe      	b.n	1a0025c2 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0025c4:	689a      	ldr	r2, [r3, #8]
1a0025c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0025ca:	d1df      	bne.n	1a00258c <vTaskSwitchContext+0x2c>
1a0025cc:	68db      	ldr	r3, [r3, #12]
1a0025ce:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0025d2:	d1db      	bne.n	1a00258c <vTaskSwitchContext+0x2c>
1a0025d4:	e7e0      	b.n	1a002598 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0025d6:	4813      	ldr	r0, [pc, #76]	; (1a002624 <vTaskSwitchContext+0xc4>)
1a0025d8:	009a      	lsls	r2, r3, #2
1a0025da:	18d4      	adds	r4, r2, r3
1a0025dc:	00a1      	lsls	r1, r4, #2
1a0025de:	4401      	add	r1, r0
1a0025e0:	684c      	ldr	r4, [r1, #4]
1a0025e2:	6864      	ldr	r4, [r4, #4]
1a0025e4:	604c      	str	r4, [r1, #4]
1a0025e6:	441a      	add	r2, r3
1a0025e8:	0091      	lsls	r1, r2, #2
1a0025ea:	3108      	adds	r1, #8
1a0025ec:	4408      	add	r0, r1
1a0025ee:	4284      	cmp	r4, r0
1a0025f0:	d009      	beq.n	1a002606 <vTaskSwitchContext+0xa6>
1a0025f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0025f6:	009a      	lsls	r2, r3, #2
1a0025f8:	4b0a      	ldr	r3, [pc, #40]	; (1a002624 <vTaskSwitchContext+0xc4>)
1a0025fa:	4413      	add	r3, r2
1a0025fc:	685b      	ldr	r3, [r3, #4]
1a0025fe:	68da      	ldr	r2, [r3, #12]
1a002600:	4b06      	ldr	r3, [pc, #24]	; (1a00261c <vTaskSwitchContext+0xbc>)
1a002602:	601a      	str	r2, [r3, #0]
}
1a002604:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002606:	6861      	ldr	r1, [r4, #4]
1a002608:	4806      	ldr	r0, [pc, #24]	; (1a002624 <vTaskSwitchContext+0xc4>)
1a00260a:	2214      	movs	r2, #20
1a00260c:	fb02 0203 	mla	r2, r2, r3, r0
1a002610:	6051      	str	r1, [r2, #4]
1a002612:	e7ee      	b.n	1a0025f2 <vTaskSwitchContext+0x92>
1a002614:	100029c0 	.word	0x100029c0
1a002618:	10002a40 	.word	0x10002a40
1a00261c:	1000291c 	.word	0x1000291c
1a002620:	100029c8 	.word	0x100029c8
1a002624:	10002928 	.word	0x10002928

1a002628 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002628:	b940      	cbnz	r0, 1a00263c <vTaskPlaceOnEventList+0x14>
1a00262a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00262e:	f383 8811 	msr	BASEPRI, r3
1a002632:	f3bf 8f6f 	isb	sy
1a002636:	f3bf 8f4f 	dsb	sy
1a00263a:	e7fe      	b.n	1a00263a <vTaskPlaceOnEventList+0x12>
{
1a00263c:	b510      	push	{r4, lr}
1a00263e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002640:	4b04      	ldr	r3, [pc, #16]	; (1a002654 <vTaskPlaceOnEventList+0x2c>)
1a002642:	6819      	ldr	r1, [r3, #0]
1a002644:	3118      	adds	r1, #24
1a002646:	f7ff fb6a 	bl	1a001d1e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00264a:	2101      	movs	r1, #1
1a00264c:	4620      	mov	r0, r4
1a00264e:	f7ff fd1f 	bl	1a002090 <prvAddCurrentTaskToDelayedList>
}
1a002652:	bd10      	pop	{r4, pc}
1a002654:	1000291c 	.word	0x1000291c

1a002658 <vTaskPlaceOnEventListRestricted>:
	{
1a002658:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00265a:	b940      	cbnz	r0, 1a00266e <vTaskPlaceOnEventListRestricted+0x16>
1a00265c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002660:	f383 8811 	msr	BASEPRI, r3
1a002664:	f3bf 8f6f 	isb	sy
1a002668:	f3bf 8f4f 	dsb	sy
1a00266c:	e7fe      	b.n	1a00266c <vTaskPlaceOnEventListRestricted+0x14>
1a00266e:	460c      	mov	r4, r1
1a002670:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002672:	4a06      	ldr	r2, [pc, #24]	; (1a00268c <vTaskPlaceOnEventListRestricted+0x34>)
1a002674:	6811      	ldr	r1, [r2, #0]
1a002676:	3118      	adds	r1, #24
1a002678:	f7ff fb45 	bl	1a001d06 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00267c:	b10d      	cbz	r5, 1a002682 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00267e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002682:	4629      	mov	r1, r5
1a002684:	4620      	mov	r0, r4
1a002686:	f7ff fd03 	bl	1a002090 <prvAddCurrentTaskToDelayedList>
	}
1a00268a:	bd38      	pop	{r3, r4, r5, pc}
1a00268c:	1000291c 	.word	0x1000291c

1a002690 <xTaskRemoveFromEventList>:
{
1a002690:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a002692:	68c3      	ldr	r3, [r0, #12]
1a002694:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002696:	b944      	cbnz	r4, 1a0026aa <xTaskRemoveFromEventList+0x1a>
1a002698:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00269c:	f383 8811 	msr	BASEPRI, r3
1a0026a0:	f3bf 8f6f 	isb	sy
1a0026a4:	f3bf 8f4f 	dsb	sy
1a0026a8:	e7fe      	b.n	1a0026a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0026aa:	f104 0518 	add.w	r5, r4, #24
1a0026ae:	4628      	mov	r0, r5
1a0026b0:	f7ff fb4f 	bl	1a001d52 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0026b4:	4b13      	ldr	r3, [pc, #76]	; (1a002704 <xTaskRemoveFromEventList+0x74>)
1a0026b6:	681b      	ldr	r3, [r3, #0]
1a0026b8:	b9e3      	cbnz	r3, 1a0026f4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0026ba:	1d25      	adds	r5, r4, #4
1a0026bc:	4628      	mov	r0, r5
1a0026be:	f7ff fb48 	bl	1a001d52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0026c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0026c4:	2201      	movs	r2, #1
1a0026c6:	409a      	lsls	r2, r3
1a0026c8:	490f      	ldr	r1, [pc, #60]	; (1a002708 <xTaskRemoveFromEventList+0x78>)
1a0026ca:	6808      	ldr	r0, [r1, #0]
1a0026cc:	4302      	orrs	r2, r0
1a0026ce:	600a      	str	r2, [r1, #0]
1a0026d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0026d4:	009a      	lsls	r2, r3, #2
1a0026d6:	4629      	mov	r1, r5
1a0026d8:	480c      	ldr	r0, [pc, #48]	; (1a00270c <xTaskRemoveFromEventList+0x7c>)
1a0026da:	4410      	add	r0, r2
1a0026dc:	f7ff fb13 	bl	1a001d06 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0026e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0026e2:	4b0b      	ldr	r3, [pc, #44]	; (1a002710 <xTaskRemoveFromEventList+0x80>)
1a0026e4:	681b      	ldr	r3, [r3, #0]
1a0026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0026e8:	429a      	cmp	r2, r3
1a0026ea:	d908      	bls.n	1a0026fe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0026ec:	2001      	movs	r0, #1
1a0026ee:	4b09      	ldr	r3, [pc, #36]	; (1a002714 <xTaskRemoveFromEventList+0x84>)
1a0026f0:	6018      	str	r0, [r3, #0]
}
1a0026f2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0026f4:	4629      	mov	r1, r5
1a0026f6:	4808      	ldr	r0, [pc, #32]	; (1a002718 <xTaskRemoveFromEventList+0x88>)
1a0026f8:	f7ff fb05 	bl	1a001d06 <vListInsertEnd>
1a0026fc:	e7f0      	b.n	1a0026e0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0026fe:	2000      	movs	r0, #0
	return xReturn;
1a002700:	e7f7      	b.n	1a0026f2 <xTaskRemoveFromEventList+0x62>
1a002702:	bf00      	nop
1a002704:	100029c0 	.word	0x100029c0
1a002708:	100029c8 	.word	0x100029c8
1a00270c:	10002928 	.word	0x10002928
1a002710:	1000291c 	.word	0x1000291c
1a002714:	10002a40 	.word	0x10002a40
1a002718:	100029fc 	.word	0x100029fc

1a00271c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00271c:	4b03      	ldr	r3, [pc, #12]	; (1a00272c <vTaskInternalSetTimeOutState+0x10>)
1a00271e:	681b      	ldr	r3, [r3, #0]
1a002720:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002722:	4b03      	ldr	r3, [pc, #12]	; (1a002730 <vTaskInternalSetTimeOutState+0x14>)
1a002724:	681b      	ldr	r3, [r3, #0]
1a002726:	6043      	str	r3, [r0, #4]
}
1a002728:	4770      	bx	lr
1a00272a:	bf00      	nop
1a00272c:	100029f8 	.word	0x100029f8
1a002730:	10002a3c 	.word	0x10002a3c

1a002734 <xTaskCheckForTimeOut>:
{
1a002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002736:	b150      	cbz	r0, 1a00274e <xTaskCheckForTimeOut+0x1a>
1a002738:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00273a:	b989      	cbnz	r1, 1a002760 <xTaskCheckForTimeOut+0x2c>
1a00273c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002740:	f383 8811 	msr	BASEPRI, r3
1a002744:	f3bf 8f6f 	isb	sy
1a002748:	f3bf 8f4f 	dsb	sy
1a00274c:	e7fe      	b.n	1a00274c <xTaskCheckForTimeOut+0x18>
1a00274e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002752:	f383 8811 	msr	BASEPRI, r3
1a002756:	f3bf 8f6f 	isb	sy
1a00275a:	f3bf 8f4f 	dsb	sy
1a00275e:	e7fe      	b.n	1a00275e <xTaskCheckForTimeOut+0x2a>
1a002760:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a002762:	f000 fbdf 	bl	1a002f24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002766:	4b11      	ldr	r3, [pc, #68]	; (1a0027ac <xTaskCheckForTimeOut+0x78>)
1a002768:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00276a:	6868      	ldr	r0, [r5, #4]
1a00276c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00276e:	6823      	ldr	r3, [r4, #0]
1a002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002774:	d016      	beq.n	1a0027a4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002776:	682f      	ldr	r7, [r5, #0]
1a002778:	4e0d      	ldr	r6, [pc, #52]	; (1a0027b0 <xTaskCheckForTimeOut+0x7c>)
1a00277a:	6836      	ldr	r6, [r6, #0]
1a00277c:	42b7      	cmp	r7, r6
1a00277e:	d001      	beq.n	1a002784 <xTaskCheckForTimeOut+0x50>
1a002780:	4288      	cmp	r0, r1
1a002782:	d911      	bls.n	1a0027a8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002784:	4293      	cmp	r3, r2
1a002786:	d803      	bhi.n	1a002790 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002788:	2300      	movs	r3, #0
1a00278a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a00278c:	2401      	movs	r4, #1
1a00278e:	e005      	b.n	1a00279c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a002790:	1a9b      	subs	r3, r3, r2
1a002792:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002794:	4628      	mov	r0, r5
1a002796:	f7ff ffc1 	bl	1a00271c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00279a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00279c:	f000 fbe4 	bl	1a002f68 <vPortExitCritical>
}
1a0027a0:	4620      	mov	r0, r4
1a0027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0027a4:	2400      	movs	r4, #0
1a0027a6:	e7f9      	b.n	1a00279c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0027a8:	2401      	movs	r4, #1
1a0027aa:	e7f7      	b.n	1a00279c <xTaskCheckForTimeOut+0x68>
1a0027ac:	10002a3c 	.word	0x10002a3c
1a0027b0:	100029f8 	.word	0x100029f8

1a0027b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0027b4:	4b01      	ldr	r3, [pc, #4]	; (1a0027bc <vTaskMissedYield+0x8>)
1a0027b6:	2201      	movs	r2, #1
1a0027b8:	601a      	str	r2, [r3, #0]
}
1a0027ba:	4770      	bx	lr
1a0027bc:	10002a40 	.word	0x10002a40

1a0027c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0027c0:	4b05      	ldr	r3, [pc, #20]	; (1a0027d8 <xTaskGetSchedulerState+0x18>)
1a0027c2:	681b      	ldr	r3, [r3, #0]
1a0027c4:	b133      	cbz	r3, 1a0027d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0027c6:	4b05      	ldr	r3, [pc, #20]	; (1a0027dc <xTaskGetSchedulerState+0x1c>)
1a0027c8:	681b      	ldr	r3, [r3, #0]
1a0027ca:	b10b      	cbz	r3, 1a0027d0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0027cc:	2000      	movs	r0, #0
	}
1a0027ce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0027d0:	2002      	movs	r0, #2
1a0027d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0027d4:	2001      	movs	r0, #1
1a0027d6:	4770      	bx	lr
1a0027d8:	10002a10 	.word	0x10002a10
1a0027dc:	100029c0 	.word	0x100029c0

1a0027e0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0027e0:	2800      	cmp	r0, #0
1a0027e2:	d050      	beq.n	1a002886 <xTaskPriorityInherit+0xa6>
	{
1a0027e4:	b538      	push	{r3, r4, r5, lr}
1a0027e6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0027e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0027ea:	4928      	ldr	r1, [pc, #160]	; (1a00288c <xTaskPriorityInherit+0xac>)
1a0027ec:	6809      	ldr	r1, [r1, #0]
1a0027ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0027f0:	428a      	cmp	r2, r1
1a0027f2:	d23e      	bcs.n	1a002872 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0027f4:	6981      	ldr	r1, [r0, #24]
1a0027f6:	2900      	cmp	r1, #0
1a0027f8:	db05      	blt.n	1a002806 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0027fa:	4924      	ldr	r1, [pc, #144]	; (1a00288c <xTaskPriorityInherit+0xac>)
1a0027fc:	6809      	ldr	r1, [r1, #0]
1a0027fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002800:	f1c1 0107 	rsb	r1, r1, #7
1a002804:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002806:	6960      	ldr	r0, [r4, #20]
1a002808:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00280c:	0091      	lsls	r1, r2, #2
1a00280e:	4a20      	ldr	r2, [pc, #128]	; (1a002890 <xTaskPriorityInherit+0xb0>)
1a002810:	440a      	add	r2, r1
1a002812:	4290      	cmp	r0, r2
1a002814:	d005      	beq.n	1a002822 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002816:	4a1d      	ldr	r2, [pc, #116]	; (1a00288c <xTaskPriorityInherit+0xac>)
1a002818:	6812      	ldr	r2, [r2, #0]
1a00281a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a00281c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a00281e:	2001      	movs	r0, #1
	}
1a002820:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002822:	1d25      	adds	r5, r4, #4
1a002824:	4628      	mov	r0, r5
1a002826:	f7ff fa94 	bl	1a001d52 <uxListRemove>
1a00282a:	b968      	cbnz	r0, 1a002848 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a00282c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00282e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002832:	008a      	lsls	r2, r1, #2
1a002834:	4916      	ldr	r1, [pc, #88]	; (1a002890 <xTaskPriorityInherit+0xb0>)
1a002836:	588a      	ldr	r2, [r1, r2]
1a002838:	b932      	cbnz	r2, 1a002848 <xTaskPriorityInherit+0x68>
1a00283a:	2201      	movs	r2, #1
1a00283c:	409a      	lsls	r2, r3
1a00283e:	4915      	ldr	r1, [pc, #84]	; (1a002894 <xTaskPriorityInherit+0xb4>)
1a002840:	680b      	ldr	r3, [r1, #0]
1a002842:	ea23 0302 	bic.w	r3, r3, r2
1a002846:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002848:	4b10      	ldr	r3, [pc, #64]	; (1a00288c <xTaskPriorityInherit+0xac>)
1a00284a:	681b      	ldr	r3, [r3, #0]
1a00284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00284e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002850:	2401      	movs	r4, #1
1a002852:	fa04 f203 	lsl.w	r2, r4, r3
1a002856:	490f      	ldr	r1, [pc, #60]	; (1a002894 <xTaskPriorityInherit+0xb4>)
1a002858:	6808      	ldr	r0, [r1, #0]
1a00285a:	4302      	orrs	r2, r0
1a00285c:	600a      	str	r2, [r1, #0]
1a00285e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002862:	009a      	lsls	r2, r3, #2
1a002864:	4629      	mov	r1, r5
1a002866:	480a      	ldr	r0, [pc, #40]	; (1a002890 <xTaskPriorityInherit+0xb0>)
1a002868:	4410      	add	r0, r2
1a00286a:	f7ff fa4c 	bl	1a001d06 <vListInsertEnd>
				xReturn = pdTRUE;
1a00286e:	4620      	mov	r0, r4
1a002870:	e7d6      	b.n	1a002820 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002872:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002874:	4b05      	ldr	r3, [pc, #20]	; (1a00288c <xTaskPriorityInherit+0xac>)
1a002876:	681b      	ldr	r3, [r3, #0]
1a002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00287a:	429a      	cmp	r2, r3
1a00287c:	d201      	bcs.n	1a002882 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00287e:	2001      	movs	r0, #1
		return xReturn;
1a002880:	e7ce      	b.n	1a002820 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a002882:	2000      	movs	r0, #0
1a002884:	e7cc      	b.n	1a002820 <xTaskPriorityInherit+0x40>
1a002886:	2000      	movs	r0, #0
	}
1a002888:	4770      	bx	lr
1a00288a:	bf00      	nop
1a00288c:	1000291c 	.word	0x1000291c
1a002890:	10002928 	.word	0x10002928
1a002894:	100029c8 	.word	0x100029c8

1a002898 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002898:	2800      	cmp	r0, #0
1a00289a:	d049      	beq.n	1a002930 <xTaskPriorityDisinherit+0x98>
	{
1a00289c:	b538      	push	{r3, r4, r5, lr}
1a00289e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0028a0:	4a26      	ldr	r2, [pc, #152]	; (1a00293c <xTaskPriorityDisinherit+0xa4>)
1a0028a2:	6812      	ldr	r2, [r2, #0]
1a0028a4:	4282      	cmp	r2, r0
1a0028a6:	d008      	beq.n	1a0028ba <xTaskPriorityDisinherit+0x22>
1a0028a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028ac:	f383 8811 	msr	BASEPRI, r3
1a0028b0:	f3bf 8f6f 	isb	sy
1a0028b4:	f3bf 8f4f 	dsb	sy
1a0028b8:	e7fe      	b.n	1a0028b8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0028ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0028bc:	b942      	cbnz	r2, 1a0028d0 <xTaskPriorityDisinherit+0x38>
1a0028be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028c2:	f383 8811 	msr	BASEPRI, r3
1a0028c6:	f3bf 8f6f 	isb	sy
1a0028ca:	f3bf 8f4f 	dsb	sy
1a0028ce:	e7fe      	b.n	1a0028ce <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0028d0:	3a01      	subs	r2, #1
1a0028d2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0028d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0028d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0028d8:	4288      	cmp	r0, r1
1a0028da:	d02b      	beq.n	1a002934 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0028dc:	bb62      	cbnz	r2, 1a002938 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0028de:	1d25      	adds	r5, r4, #4
1a0028e0:	4628      	mov	r0, r5
1a0028e2:	f7ff fa36 	bl	1a001d52 <uxListRemove>
1a0028e6:	b970      	cbnz	r0, 1a002906 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0028e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0028ea:	2314      	movs	r3, #20
1a0028ec:	fb03 f302 	mul.w	r3, r3, r2
1a0028f0:	4913      	ldr	r1, [pc, #76]	; (1a002940 <xTaskPriorityDisinherit+0xa8>)
1a0028f2:	58cb      	ldr	r3, [r1, r3]
1a0028f4:	b93b      	cbnz	r3, 1a002906 <xTaskPriorityDisinherit+0x6e>
1a0028f6:	2301      	movs	r3, #1
1a0028f8:	fa03 f202 	lsl.w	r2, r3, r2
1a0028fc:	4911      	ldr	r1, [pc, #68]	; (1a002944 <xTaskPriorityDisinherit+0xac>)
1a0028fe:	680b      	ldr	r3, [r1, #0]
1a002900:	ea23 0302 	bic.w	r3, r3, r2
1a002904:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002906:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002908:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00290a:	f1c3 0207 	rsb	r2, r3, #7
1a00290e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002910:	2401      	movs	r4, #1
1a002912:	fa04 f203 	lsl.w	r2, r4, r3
1a002916:	490b      	ldr	r1, [pc, #44]	; (1a002944 <xTaskPriorityDisinherit+0xac>)
1a002918:	6808      	ldr	r0, [r1, #0]
1a00291a:	4302      	orrs	r2, r0
1a00291c:	600a      	str	r2, [r1, #0]
1a00291e:	4629      	mov	r1, r5
1a002920:	4a07      	ldr	r2, [pc, #28]	; (1a002940 <xTaskPriorityDisinherit+0xa8>)
1a002922:	2014      	movs	r0, #20
1a002924:	fb00 2003 	mla	r0, r0, r3, r2
1a002928:	f7ff f9ed 	bl	1a001d06 <vListInsertEnd>
					xReturn = pdTRUE;
1a00292c:	4620      	mov	r0, r4
	}
1a00292e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002930:	2000      	movs	r0, #0
	}
1a002932:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002934:	2000      	movs	r0, #0
1a002936:	e7fa      	b.n	1a00292e <xTaskPriorityDisinherit+0x96>
1a002938:	2000      	movs	r0, #0
		return xReturn;
1a00293a:	e7f8      	b.n	1a00292e <xTaskPriorityDisinherit+0x96>
1a00293c:	1000291c 	.word	0x1000291c
1a002940:	10002928 	.word	0x10002928
1a002944:	100029c8 	.word	0x100029c8

1a002948 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002948:	2800      	cmp	r0, #0
1a00294a:	d055      	beq.n	1a0029f8 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a00294c:	b538      	push	{r3, r4, r5, lr}
1a00294e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002950:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002952:	b940      	cbnz	r0, 1a002966 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002954:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002958:	f383 8811 	msr	BASEPRI, r3
1a00295c:	f3bf 8f6f 	isb	sy
1a002960:	f3bf 8f4f 	dsb	sy
1a002964:	e7fe      	b.n	1a002964 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a002968:	428a      	cmp	r2, r1
1a00296a:	d200      	bcs.n	1a00296e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a00296c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00296e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a002970:	4291      	cmp	r1, r2
1a002972:	d001      	beq.n	1a002978 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002974:	2801      	cmp	r0, #1
1a002976:	d000      	beq.n	1a00297a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002978:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a00297a:	4820      	ldr	r0, [pc, #128]	; (1a0029fc <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a00297c:	6800      	ldr	r0, [r0, #0]
1a00297e:	4298      	cmp	r0, r3
1a002980:	d108      	bne.n	1a002994 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a002982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002986:	f383 8811 	msr	BASEPRI, r3
1a00298a:	f3bf 8f6f 	isb	sy
1a00298e:	f3bf 8f4f 	dsb	sy
1a002992:	e7fe      	b.n	1a002992 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002994:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002996:	6998      	ldr	r0, [r3, #24]
1a002998:	2800      	cmp	r0, #0
1a00299a:	db02      	blt.n	1a0029a2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00299c:	f1c2 0207 	rsb	r2, r2, #7
1a0029a0:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0029a2:	695a      	ldr	r2, [r3, #20]
1a0029a4:	4816      	ldr	r0, [pc, #88]	; (1a002a00 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0029a6:	2414      	movs	r4, #20
1a0029a8:	fb04 0101 	mla	r1, r4, r1, r0
1a0029ac:	428a      	cmp	r2, r1
1a0029ae:	d1e3      	bne.n	1a002978 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0029b0:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0029b2:	1d1d      	adds	r5, r3, #4
1a0029b4:	4628      	mov	r0, r5
1a0029b6:	f7ff f9cc 	bl	1a001d52 <uxListRemove>
1a0029ba:	b970      	cbnz	r0, 1a0029da <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0029bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0029be:	2314      	movs	r3, #20
1a0029c0:	fb03 f302 	mul.w	r3, r3, r2
1a0029c4:	490e      	ldr	r1, [pc, #56]	; (1a002a00 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0029c6:	58cb      	ldr	r3, [r1, r3]
1a0029c8:	b93b      	cbnz	r3, 1a0029da <vTaskPriorityDisinheritAfterTimeout+0x92>
1a0029ca:	2301      	movs	r3, #1
1a0029cc:	fa03 f202 	lsl.w	r2, r3, r2
1a0029d0:	490c      	ldr	r1, [pc, #48]	; (1a002a04 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0029d2:	680b      	ldr	r3, [r1, #0]
1a0029d4:	ea23 0302 	bic.w	r3, r3, r2
1a0029d8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0029da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0029dc:	2301      	movs	r3, #1
1a0029de:	4093      	lsls	r3, r2
1a0029e0:	4908      	ldr	r1, [pc, #32]	; (1a002a04 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0029e2:	6808      	ldr	r0, [r1, #0]
1a0029e4:	4303      	orrs	r3, r0
1a0029e6:	600b      	str	r3, [r1, #0]
1a0029e8:	4629      	mov	r1, r5
1a0029ea:	4b05      	ldr	r3, [pc, #20]	; (1a002a00 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0029ec:	2014      	movs	r0, #20
1a0029ee:	fb00 3002 	mla	r0, r0, r2, r3
1a0029f2:	f7ff f988 	bl	1a001d06 <vListInsertEnd>
	}
1a0029f6:	e7bf      	b.n	1a002978 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0029f8:	4770      	bx	lr
1a0029fa:	bf00      	nop
1a0029fc:	1000291c 	.word	0x1000291c
1a002a00:	10002928 	.word	0x10002928
1a002a04:	100029c8 	.word	0x100029c8

1a002a08 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002a08:	4b05      	ldr	r3, [pc, #20]	; (1a002a20 <pvTaskIncrementMutexHeldCount+0x18>)
1a002a0a:	681b      	ldr	r3, [r3, #0]
1a002a0c:	b123      	cbz	r3, 1a002a18 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002a0e:	4b04      	ldr	r3, [pc, #16]	; (1a002a20 <pvTaskIncrementMutexHeldCount+0x18>)
1a002a10:	681a      	ldr	r2, [r3, #0]
1a002a12:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002a14:	3301      	adds	r3, #1
1a002a16:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002a18:	4b01      	ldr	r3, [pc, #4]	; (1a002a20 <pvTaskIncrementMutexHeldCount+0x18>)
1a002a1a:	6818      	ldr	r0, [r3, #0]
	}
1a002a1c:	4770      	bx	lr
1a002a1e:	bf00      	nop
1a002a20:	1000291c 	.word	0x1000291c

1a002a24 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002a24:	4b06      	ldr	r3, [pc, #24]	; (1a002a40 <prvGetNextExpireTime+0x1c>)
1a002a26:	681a      	ldr	r2, [r3, #0]
1a002a28:	6813      	ldr	r3, [r2, #0]
1a002a2a:	fab3 f383 	clz	r3, r3
1a002a2e:	095b      	lsrs	r3, r3, #5
1a002a30:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002a32:	b913      	cbnz	r3, 1a002a3a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002a34:	68d3      	ldr	r3, [r2, #12]
1a002a36:	6818      	ldr	r0, [r3, #0]
1a002a38:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002a3a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002a3c:	4770      	bx	lr
1a002a3e:	bf00      	nop
1a002a40:	10002a44 	.word	0x10002a44

1a002a44 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002a44:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002a46:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002a48:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002a4a:	4291      	cmp	r1, r2
1a002a4c:	d80c      	bhi.n	1a002a68 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002a4e:	1ad2      	subs	r2, r2, r3
1a002a50:	6983      	ldr	r3, [r0, #24]
1a002a52:	429a      	cmp	r2, r3
1a002a54:	d301      	bcc.n	1a002a5a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002a56:	2001      	movs	r0, #1
1a002a58:	e010      	b.n	1a002a7c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002a5a:	1d01      	adds	r1, r0, #4
1a002a5c:	4b09      	ldr	r3, [pc, #36]	; (1a002a84 <prvInsertTimerInActiveList+0x40>)
1a002a5e:	6818      	ldr	r0, [r3, #0]
1a002a60:	f7ff f95d 	bl	1a001d1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002a64:	2000      	movs	r0, #0
1a002a66:	e009      	b.n	1a002a7c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002a68:	429a      	cmp	r2, r3
1a002a6a:	d201      	bcs.n	1a002a70 <prvInsertTimerInActiveList+0x2c>
1a002a6c:	4299      	cmp	r1, r3
1a002a6e:	d206      	bcs.n	1a002a7e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002a70:	1d01      	adds	r1, r0, #4
1a002a72:	4b05      	ldr	r3, [pc, #20]	; (1a002a88 <prvInsertTimerInActiveList+0x44>)
1a002a74:	6818      	ldr	r0, [r3, #0]
1a002a76:	f7ff f952 	bl	1a001d1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002a7a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002a7c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002a7e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002a80:	e7fc      	b.n	1a002a7c <prvInsertTimerInActiveList+0x38>
1a002a82:	bf00      	nop
1a002a84:	10002a48 	.word	0x10002a48
1a002a88:	10002a44 	.word	0x10002a44

1a002a8c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002a8c:	b530      	push	{r4, r5, lr}
1a002a8e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002a90:	f000 fa48 	bl	1a002f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002a94:	4b11      	ldr	r3, [pc, #68]	; (1a002adc <prvCheckForValidListAndQueue+0x50>)
1a002a96:	681b      	ldr	r3, [r3, #0]
1a002a98:	b11b      	cbz	r3, 1a002aa2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002a9a:	f000 fa65 	bl	1a002f68 <vPortExitCritical>
}
1a002a9e:	b003      	add	sp, #12
1a002aa0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002aa2:	4d0f      	ldr	r5, [pc, #60]	; (1a002ae0 <prvCheckForValidListAndQueue+0x54>)
1a002aa4:	4628      	mov	r0, r5
1a002aa6:	f7ff f920 	bl	1a001cea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002aaa:	4c0e      	ldr	r4, [pc, #56]	; (1a002ae4 <prvCheckForValidListAndQueue+0x58>)
1a002aac:	4620      	mov	r0, r4
1a002aae:	f7ff f91c 	bl	1a001cea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002ab2:	4b0d      	ldr	r3, [pc, #52]	; (1a002ae8 <prvCheckForValidListAndQueue+0x5c>)
1a002ab4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002ab6:	4b0d      	ldr	r3, [pc, #52]	; (1a002aec <prvCheckForValidListAndQueue+0x60>)
1a002ab8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002aba:	2300      	movs	r3, #0
1a002abc:	9300      	str	r3, [sp, #0]
1a002abe:	4b0c      	ldr	r3, [pc, #48]	; (1a002af0 <prvCheckForValidListAndQueue+0x64>)
1a002ac0:	4a0c      	ldr	r2, [pc, #48]	; (1a002af4 <prvCheckForValidListAndQueue+0x68>)
1a002ac2:	2110      	movs	r1, #16
1a002ac4:	200a      	movs	r0, #10
1a002ac6:	f7fe fd78 	bl	1a0015ba <xQueueGenericCreateStatic>
1a002aca:	4b04      	ldr	r3, [pc, #16]	; (1a002adc <prvCheckForValidListAndQueue+0x50>)
1a002acc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002ace:	2800      	cmp	r0, #0
1a002ad0:	d0e3      	beq.n	1a002a9a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002ad2:	4909      	ldr	r1, [pc, #36]	; (1a002af8 <prvCheckForValidListAndQueue+0x6c>)
1a002ad4:	f7ff f8cc 	bl	1a001c70 <vQueueAddToRegistry>
1a002ad8:	e7df      	b.n	1a002a9a <prvCheckForValidListAndQueue+0xe>
1a002ada:	bf00      	nop
1a002adc:	10002b68 	.word	0x10002b68
1a002ae0:	10002aec 	.word	0x10002aec
1a002ae4:	10002b00 	.word	0x10002b00
1a002ae8:	10002a44 	.word	0x10002a44
1a002aec:	10002a48 	.word	0x10002a48
1a002af0:	10002b18 	.word	0x10002b18
1a002af4:	10002a4c 	.word	0x10002a4c
1a002af8:	1a005ea0 	.word	0x1a005ea0

1a002afc <xTimerCreateTimerTask>:
{
1a002afc:	b510      	push	{r4, lr}
1a002afe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002b00:	f7ff ffc4 	bl	1a002a8c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002b04:	4b12      	ldr	r3, [pc, #72]	; (1a002b50 <xTimerCreateTimerTask+0x54>)
1a002b06:	681b      	ldr	r3, [r3, #0]
1a002b08:	b1cb      	cbz	r3, 1a002b3e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002b0a:	2400      	movs	r4, #0
1a002b0c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002b0e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002b10:	aa07      	add	r2, sp, #28
1a002b12:	a906      	add	r1, sp, #24
1a002b14:	a805      	add	r0, sp, #20
1a002b16:	f7ff f93d 	bl	1a001d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002b1a:	9b05      	ldr	r3, [sp, #20]
1a002b1c:	9302      	str	r3, [sp, #8]
1a002b1e:	9b06      	ldr	r3, [sp, #24]
1a002b20:	9301      	str	r3, [sp, #4]
1a002b22:	2304      	movs	r3, #4
1a002b24:	9300      	str	r3, [sp, #0]
1a002b26:	4623      	mov	r3, r4
1a002b28:	9a07      	ldr	r2, [sp, #28]
1a002b2a:	490a      	ldr	r1, [pc, #40]	; (1a002b54 <xTimerCreateTimerTask+0x58>)
1a002b2c:	480a      	ldr	r0, [pc, #40]	; (1a002b58 <xTimerCreateTimerTask+0x5c>)
1a002b2e:	f7ff fafb 	bl	1a002128 <xTaskCreateStatic>
1a002b32:	4b0a      	ldr	r3, [pc, #40]	; (1a002b5c <xTimerCreateTimerTask+0x60>)
1a002b34:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002b36:	b110      	cbz	r0, 1a002b3e <xTimerCreateTimerTask+0x42>
}
1a002b38:	2001      	movs	r0, #1
1a002b3a:	b008      	add	sp, #32
1a002b3c:	bd10      	pop	{r4, pc}
1a002b3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b42:	f383 8811 	msr	BASEPRI, r3
1a002b46:	f3bf 8f6f 	isb	sy
1a002b4a:	f3bf 8f4f 	dsb	sy
1a002b4e:	e7fe      	b.n	1a002b4e <xTimerCreateTimerTask+0x52>
1a002b50:	10002b68 	.word	0x10002b68
1a002b54:	1a005ea8 	.word	0x1a005ea8
1a002b58:	1a002e41 	.word	0x1a002e41
1a002b5c:	10002b6c 	.word	0x10002b6c

1a002b60 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002b60:	b1c8      	cbz	r0, 1a002b96 <xTimerGenericCommand+0x36>
{
1a002b62:	b530      	push	{r4, r5, lr}
1a002b64:	b085      	sub	sp, #20
1a002b66:	4615      	mov	r5, r2
1a002b68:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002b6a:	4a17      	ldr	r2, [pc, #92]	; (1a002bc8 <xTimerGenericCommand+0x68>)
1a002b6c:	6810      	ldr	r0, [r2, #0]
1a002b6e:	b340      	cbz	r0, 1a002bc2 <xTimerGenericCommand+0x62>
1a002b70:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002b72:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002b74:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002b76:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002b78:	2905      	cmp	r1, #5
1a002b7a:	dc1d      	bgt.n	1a002bb8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002b7c:	f7ff fe20 	bl	1a0027c0 <xTaskGetSchedulerState>
1a002b80:	2802      	cmp	r0, #2
1a002b82:	d011      	beq.n	1a002ba8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002b84:	2300      	movs	r3, #0
1a002b86:	461a      	mov	r2, r3
1a002b88:	4669      	mov	r1, sp
1a002b8a:	480f      	ldr	r0, [pc, #60]	; (1a002bc8 <xTimerGenericCommand+0x68>)
1a002b8c:	6800      	ldr	r0, [r0, #0]
1a002b8e:	f7fe fda3 	bl	1a0016d8 <xQueueGenericSend>
}
1a002b92:	b005      	add	sp, #20
1a002b94:	bd30      	pop	{r4, r5, pc}
1a002b96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b9a:	f383 8811 	msr	BASEPRI, r3
1a002b9e:	f3bf 8f6f 	isb	sy
1a002ba2:	f3bf 8f4f 	dsb	sy
1a002ba6:	e7fe      	b.n	1a002ba6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002ba8:	2300      	movs	r3, #0
1a002baa:	9a08      	ldr	r2, [sp, #32]
1a002bac:	4669      	mov	r1, sp
1a002bae:	4806      	ldr	r0, [pc, #24]	; (1a002bc8 <xTimerGenericCommand+0x68>)
1a002bb0:	6800      	ldr	r0, [r0, #0]
1a002bb2:	f7fe fd91 	bl	1a0016d8 <xQueueGenericSend>
1a002bb6:	e7ec      	b.n	1a002b92 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002bb8:	2300      	movs	r3, #0
1a002bba:	4669      	mov	r1, sp
1a002bbc:	f7fe fe61 	bl	1a001882 <xQueueGenericSendFromISR>
1a002bc0:	e7e7      	b.n	1a002b92 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002bc2:	2000      	movs	r0, #0
	return xReturn;
1a002bc4:	e7e5      	b.n	1a002b92 <xTimerGenericCommand+0x32>
1a002bc6:	bf00      	nop
1a002bc8:	10002b68 	.word	0x10002b68

1a002bcc <prvSwitchTimerLists>:
{
1a002bcc:	b570      	push	{r4, r5, r6, lr}
1a002bce:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002bd0:	4b1a      	ldr	r3, [pc, #104]	; (1a002c3c <prvSwitchTimerLists+0x70>)
1a002bd2:	681b      	ldr	r3, [r3, #0]
1a002bd4:	681a      	ldr	r2, [r3, #0]
1a002bd6:	b352      	cbz	r2, 1a002c2e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002bd8:	68db      	ldr	r3, [r3, #12]
1a002bda:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002bdc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002bde:	1d25      	adds	r5, r4, #4
1a002be0:	4628      	mov	r0, r5
1a002be2:	f7ff f8b6 	bl	1a001d52 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002be8:	4620      	mov	r0, r4
1a002bea:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002bec:	69e3      	ldr	r3, [r4, #28]
1a002bee:	2b01      	cmp	r3, #1
1a002bf0:	d1ee      	bne.n	1a002bd0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002bf2:	69a3      	ldr	r3, [r4, #24]
1a002bf4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002bf6:	429e      	cmp	r6, r3
1a002bf8:	d207      	bcs.n	1a002c0a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002bfa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002bfc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002bfe:	4629      	mov	r1, r5
1a002c00:	4b0e      	ldr	r3, [pc, #56]	; (1a002c3c <prvSwitchTimerLists+0x70>)
1a002c02:	6818      	ldr	r0, [r3, #0]
1a002c04:	f7ff f88b 	bl	1a001d1e <vListInsert>
1a002c08:	e7e2      	b.n	1a002bd0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002c0a:	2100      	movs	r1, #0
1a002c0c:	9100      	str	r1, [sp, #0]
1a002c0e:	460b      	mov	r3, r1
1a002c10:	4632      	mov	r2, r6
1a002c12:	4620      	mov	r0, r4
1a002c14:	f7ff ffa4 	bl	1a002b60 <xTimerGenericCommand>
				configASSERT( xResult );
1a002c18:	2800      	cmp	r0, #0
1a002c1a:	d1d9      	bne.n	1a002bd0 <prvSwitchTimerLists+0x4>
1a002c1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c20:	f383 8811 	msr	BASEPRI, r3
1a002c24:	f3bf 8f6f 	isb	sy
1a002c28:	f3bf 8f4f 	dsb	sy
1a002c2c:	e7fe      	b.n	1a002c2c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002c2e:	4a04      	ldr	r2, [pc, #16]	; (1a002c40 <prvSwitchTimerLists+0x74>)
1a002c30:	6810      	ldr	r0, [r2, #0]
1a002c32:	4902      	ldr	r1, [pc, #8]	; (1a002c3c <prvSwitchTimerLists+0x70>)
1a002c34:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002c36:	6013      	str	r3, [r2, #0]
}
1a002c38:	b002      	add	sp, #8
1a002c3a:	bd70      	pop	{r4, r5, r6, pc}
1a002c3c:	10002a44 	.word	0x10002a44
1a002c40:	10002a48 	.word	0x10002a48

1a002c44 <prvSampleTimeNow>:
{
1a002c44:	b538      	push	{r3, r4, r5, lr}
1a002c46:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002c48:	f7ff fb2c 	bl	1a0022a4 <xTaskGetTickCount>
1a002c4c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002c4e:	4b07      	ldr	r3, [pc, #28]	; (1a002c6c <prvSampleTimeNow+0x28>)
1a002c50:	681b      	ldr	r3, [r3, #0]
1a002c52:	4283      	cmp	r3, r0
1a002c54:	d805      	bhi.n	1a002c62 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002c56:	2300      	movs	r3, #0
1a002c58:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002c5a:	4b04      	ldr	r3, [pc, #16]	; (1a002c6c <prvSampleTimeNow+0x28>)
1a002c5c:	601c      	str	r4, [r3, #0]
}
1a002c5e:	4620      	mov	r0, r4
1a002c60:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002c62:	f7ff ffb3 	bl	1a002bcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002c66:	2301      	movs	r3, #1
1a002c68:	602b      	str	r3, [r5, #0]
1a002c6a:	e7f6      	b.n	1a002c5a <prvSampleTimeNow+0x16>
1a002c6c:	10002b14 	.word	0x10002b14

1a002c70 <prvProcessExpiredTimer>:
{
1a002c70:	b570      	push	{r4, r5, r6, lr}
1a002c72:	b082      	sub	sp, #8
1a002c74:	4605      	mov	r5, r0
1a002c76:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002c78:	4b14      	ldr	r3, [pc, #80]	; (1a002ccc <prvProcessExpiredTimer+0x5c>)
1a002c7a:	681b      	ldr	r3, [r3, #0]
1a002c7c:	68db      	ldr	r3, [r3, #12]
1a002c7e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002c80:	1d20      	adds	r0, r4, #4
1a002c82:	f7ff f866 	bl	1a001d52 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002c86:	69e3      	ldr	r3, [r4, #28]
1a002c88:	2b01      	cmp	r3, #1
1a002c8a:	d004      	beq.n	1a002c96 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002c8e:	4620      	mov	r0, r4
1a002c90:	4798      	blx	r3
}
1a002c92:	b002      	add	sp, #8
1a002c94:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002c96:	69a1      	ldr	r1, [r4, #24]
1a002c98:	462b      	mov	r3, r5
1a002c9a:	4632      	mov	r2, r6
1a002c9c:	4429      	add	r1, r5
1a002c9e:	4620      	mov	r0, r4
1a002ca0:	f7ff fed0 	bl	1a002a44 <prvInsertTimerInActiveList>
1a002ca4:	2800      	cmp	r0, #0
1a002ca6:	d0f1      	beq.n	1a002c8c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002ca8:	2100      	movs	r1, #0
1a002caa:	9100      	str	r1, [sp, #0]
1a002cac:	460b      	mov	r3, r1
1a002cae:	462a      	mov	r2, r5
1a002cb0:	4620      	mov	r0, r4
1a002cb2:	f7ff ff55 	bl	1a002b60 <xTimerGenericCommand>
			configASSERT( xResult );
1a002cb6:	2800      	cmp	r0, #0
1a002cb8:	d1e8      	bne.n	1a002c8c <prvProcessExpiredTimer+0x1c>
1a002cba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cbe:	f383 8811 	msr	BASEPRI, r3
1a002cc2:	f3bf 8f6f 	isb	sy
1a002cc6:	f3bf 8f4f 	dsb	sy
1a002cca:	e7fe      	b.n	1a002cca <prvProcessExpiredTimer+0x5a>
1a002ccc:	10002a44 	.word	0x10002a44

1a002cd0 <prvProcessTimerOrBlockTask>:
{
1a002cd0:	b570      	push	{r4, r5, r6, lr}
1a002cd2:	b082      	sub	sp, #8
1a002cd4:	4606      	mov	r6, r0
1a002cd6:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002cd8:	f7ff fadc 	bl	1a002294 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002cdc:	a801      	add	r0, sp, #4
1a002cde:	f7ff ffb1 	bl	1a002c44 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002ce2:	9b01      	ldr	r3, [sp, #4]
1a002ce4:	bb1b      	cbnz	r3, 1a002d2e <prvProcessTimerOrBlockTask+0x5e>
1a002ce6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002ce8:	b90c      	cbnz	r4, 1a002cee <prvProcessTimerOrBlockTask+0x1e>
1a002cea:	42b0      	cmp	r0, r6
1a002cec:	d218      	bcs.n	1a002d20 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002cee:	b12c      	cbz	r4, 1a002cfc <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002cf0:	4b11      	ldr	r3, [pc, #68]	; (1a002d38 <prvProcessTimerOrBlockTask+0x68>)
1a002cf2:	681b      	ldr	r3, [r3, #0]
1a002cf4:	681c      	ldr	r4, [r3, #0]
1a002cf6:	fab4 f484 	clz	r4, r4
1a002cfa:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002cfc:	4622      	mov	r2, r4
1a002cfe:	1b71      	subs	r1, r6, r5
1a002d00:	4b0e      	ldr	r3, [pc, #56]	; (1a002d3c <prvProcessTimerOrBlockTask+0x6c>)
1a002d02:	6818      	ldr	r0, [r3, #0]
1a002d04:	f7fe ffc8 	bl	1a001c98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002d08:	f7ff fb5e 	bl	1a0023c8 <xTaskResumeAll>
1a002d0c:	b988      	cbnz	r0, 1a002d32 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002d0e:	4b0c      	ldr	r3, [pc, #48]	; (1a002d40 <prvProcessTimerOrBlockTask+0x70>)
1a002d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002d14:	601a      	str	r2, [r3, #0]
1a002d16:	f3bf 8f4f 	dsb	sy
1a002d1a:	f3bf 8f6f 	isb	sy
1a002d1e:	e008      	b.n	1a002d32 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002d20:	f7ff fb52 	bl	1a0023c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002d24:	4629      	mov	r1, r5
1a002d26:	4630      	mov	r0, r6
1a002d28:	f7ff ffa2 	bl	1a002c70 <prvProcessExpiredTimer>
1a002d2c:	e001      	b.n	1a002d32 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002d2e:	f7ff fb4b 	bl	1a0023c8 <xTaskResumeAll>
}
1a002d32:	b002      	add	sp, #8
1a002d34:	bd70      	pop	{r4, r5, r6, pc}
1a002d36:	bf00      	nop
1a002d38:	10002a48 	.word	0x10002a48
1a002d3c:	10002b68 	.word	0x10002b68
1a002d40:	e000ed04 	.word	0xe000ed04

1a002d44 <prvProcessReceivedCommands>:
{
1a002d44:	b530      	push	{r4, r5, lr}
1a002d46:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002d48:	e002      	b.n	1a002d50 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002d4a:	9b04      	ldr	r3, [sp, #16]
1a002d4c:	2b00      	cmp	r3, #0
1a002d4e:	da0f      	bge.n	1a002d70 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002d50:	2200      	movs	r2, #0
1a002d52:	a904      	add	r1, sp, #16
1a002d54:	4b39      	ldr	r3, [pc, #228]	; (1a002e3c <prvProcessReceivedCommands+0xf8>)
1a002d56:	6818      	ldr	r0, [r3, #0]
1a002d58:	f7fe fdfa 	bl	1a001950 <xQueueReceive>
1a002d5c:	2800      	cmp	r0, #0
1a002d5e:	d06a      	beq.n	1a002e36 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002d60:	9b04      	ldr	r3, [sp, #16]
1a002d62:	2b00      	cmp	r3, #0
1a002d64:	daf1      	bge.n	1a002d4a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002d66:	9907      	ldr	r1, [sp, #28]
1a002d68:	9806      	ldr	r0, [sp, #24]
1a002d6a:	9b05      	ldr	r3, [sp, #20]
1a002d6c:	4798      	blx	r3
1a002d6e:	e7ec      	b.n	1a002d4a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002d70:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002d72:	6963      	ldr	r3, [r4, #20]
1a002d74:	b113      	cbz	r3, 1a002d7c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002d76:	1d20      	adds	r0, r4, #4
1a002d78:	f7fe ffeb 	bl	1a001d52 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002d7c:	a803      	add	r0, sp, #12
1a002d7e:	f7ff ff61 	bl	1a002c44 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002d82:	9b04      	ldr	r3, [sp, #16]
1a002d84:	2b09      	cmp	r3, #9
1a002d86:	d8e3      	bhi.n	1a002d50 <prvProcessReceivedCommands+0xc>
1a002d88:	a201      	add	r2, pc, #4	; (adr r2, 1a002d90 <prvProcessReceivedCommands+0x4c>)
1a002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002d8e:	bf00      	nop
1a002d90:	1a002db9 	.word	0x1a002db9
1a002d94:	1a002db9 	.word	0x1a002db9
1a002d98:	1a002db9 	.word	0x1a002db9
1a002d9c:	1a002d51 	.word	0x1a002d51
1a002da0:	1a002e01 	.word	0x1a002e01
1a002da4:	1a002e27 	.word	0x1a002e27
1a002da8:	1a002db9 	.word	0x1a002db9
1a002dac:	1a002db9 	.word	0x1a002db9
1a002db0:	1a002d51 	.word	0x1a002d51
1a002db4:	1a002e01 	.word	0x1a002e01
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002db8:	9905      	ldr	r1, [sp, #20]
1a002dba:	69a5      	ldr	r5, [r4, #24]
1a002dbc:	460b      	mov	r3, r1
1a002dbe:	4602      	mov	r2, r0
1a002dc0:	4429      	add	r1, r5
1a002dc2:	4620      	mov	r0, r4
1a002dc4:	f7ff fe3e 	bl	1a002a44 <prvInsertTimerInActiveList>
1a002dc8:	2800      	cmp	r0, #0
1a002dca:	d0c1      	beq.n	1a002d50 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002dce:	4620      	mov	r0, r4
1a002dd0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002dd2:	69e3      	ldr	r3, [r4, #28]
1a002dd4:	2b01      	cmp	r3, #1
1a002dd6:	d1bb      	bne.n	1a002d50 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002dd8:	69a2      	ldr	r2, [r4, #24]
1a002dda:	2100      	movs	r1, #0
1a002ddc:	9100      	str	r1, [sp, #0]
1a002dde:	460b      	mov	r3, r1
1a002de0:	9805      	ldr	r0, [sp, #20]
1a002de2:	4402      	add	r2, r0
1a002de4:	4620      	mov	r0, r4
1a002de6:	f7ff febb 	bl	1a002b60 <xTimerGenericCommand>
							configASSERT( xResult );
1a002dea:	2800      	cmp	r0, #0
1a002dec:	d1b0      	bne.n	1a002d50 <prvProcessReceivedCommands+0xc>
1a002dee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002df2:	f383 8811 	msr	BASEPRI, r3
1a002df6:	f3bf 8f6f 	isb	sy
1a002dfa:	f3bf 8f4f 	dsb	sy
1a002dfe:	e7fe      	b.n	1a002dfe <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002e00:	9905      	ldr	r1, [sp, #20]
1a002e02:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002e04:	b131      	cbz	r1, 1a002e14 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002e06:	4603      	mov	r3, r0
1a002e08:	4602      	mov	r2, r0
1a002e0a:	4401      	add	r1, r0
1a002e0c:	4620      	mov	r0, r4
1a002e0e:	f7ff fe19 	bl	1a002a44 <prvInsertTimerInActiveList>
					break;
1a002e12:	e79d      	b.n	1a002d50 <prvProcessReceivedCommands+0xc>
1a002e14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e18:	f383 8811 	msr	BASEPRI, r3
1a002e1c:	f3bf 8f6f 	isb	sy
1a002e20:	f3bf 8f4f 	dsb	sy
1a002e24:	e7fe      	b.n	1a002e24 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002e26:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002e2a:	2b00      	cmp	r3, #0
1a002e2c:	d190      	bne.n	1a002d50 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002e2e:	4620      	mov	r0, r4
1a002e30:	f7fe fa8e 	bl	1a001350 <vPortFree>
1a002e34:	e78c      	b.n	1a002d50 <prvProcessReceivedCommands+0xc>
}
1a002e36:	b009      	add	sp, #36	; 0x24
1a002e38:	bd30      	pop	{r4, r5, pc}
1a002e3a:	bf00      	nop
1a002e3c:	10002b68 	.word	0x10002b68

1a002e40 <prvTimerTask>:
{
1a002e40:	b500      	push	{lr}
1a002e42:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002e44:	a801      	add	r0, sp, #4
1a002e46:	f7ff fded 	bl	1a002a24 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002e4a:	9901      	ldr	r1, [sp, #4]
1a002e4c:	f7ff ff40 	bl	1a002cd0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002e50:	f7ff ff78 	bl	1a002d44 <prvProcessReceivedCommands>
1a002e54:	e7f6      	b.n	1a002e44 <prvTimerTask+0x4>
1a002e56:	Address 0x000000001a002e56 is out of bounds.


1a002e58 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002e58:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002e5a:	2300      	movs	r3, #0
1a002e5c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002e5e:	4b0d      	ldr	r3, [pc, #52]	; (1a002e94 <prvTaskExitError+0x3c>)
1a002e60:	681b      	ldr	r3, [r3, #0]
1a002e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002e66:	d008      	beq.n	1a002e7a <prvTaskExitError+0x22>
1a002e68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e6c:	f383 8811 	msr	BASEPRI, r3
1a002e70:	f3bf 8f6f 	isb	sy
1a002e74:	f3bf 8f4f 	dsb	sy
1a002e78:	e7fe      	b.n	1a002e78 <prvTaskExitError+0x20>
1a002e7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e7e:	f383 8811 	msr	BASEPRI, r3
1a002e82:	f3bf 8f6f 	isb	sy
1a002e86:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002e8a:	9b01      	ldr	r3, [sp, #4]
1a002e8c:	2b00      	cmp	r3, #0
1a002e8e:	d0fc      	beq.n	1a002e8a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002e90:	b002      	add	sp, #8
1a002e92:	4770      	bx	lr
1a002e94:	10000000 	.word	0x10000000

1a002e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002e98:	4808      	ldr	r0, [pc, #32]	; (1a002ebc <prvPortStartFirstTask+0x24>)
1a002e9a:	6800      	ldr	r0, [r0, #0]
1a002e9c:	6800      	ldr	r0, [r0, #0]
1a002e9e:	f380 8808 	msr	MSP, r0
1a002ea2:	f04f 0000 	mov.w	r0, #0
1a002ea6:	f380 8814 	msr	CONTROL, r0
1a002eaa:	b662      	cpsie	i
1a002eac:	b661      	cpsie	f
1a002eae:	f3bf 8f4f 	dsb	sy
1a002eb2:	f3bf 8f6f 	isb	sy
1a002eb6:	df00      	svc	0
1a002eb8:	bf00      	nop
1a002eba:	0000      	.short	0x0000
1a002ebc:	e000ed08 	.word	0xe000ed08

1a002ec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002ec0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002ed0 <vPortEnableVFP+0x10>
1a002ec4:	6801      	ldr	r1, [r0, #0]
1a002ec6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002eca:	6001      	str	r1, [r0, #0]
1a002ecc:	4770      	bx	lr
1a002ece:	0000      	.short	0x0000
1a002ed0:	e000ed88 	.word	0xe000ed88

1a002ed4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002ed8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002edc:	f021 0101 	bic.w	r1, r1, #1
1a002ee0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002ee4:	4b05      	ldr	r3, [pc, #20]	; (1a002efc <pxPortInitialiseStack+0x28>)
1a002ee6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002eea:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002eee:	f06f 0302 	mvn.w	r3, #2
1a002ef2:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002ef6:	3844      	subs	r0, #68	; 0x44
1a002ef8:	4770      	bx	lr
1a002efa:	bf00      	nop
1a002efc:	1a002e59 	.word	0x1a002e59

1a002f00 <SVC_Handler>:
	__asm volatile (
1a002f00:	4b07      	ldr	r3, [pc, #28]	; (1a002f20 <pxCurrentTCBConst2>)
1a002f02:	6819      	ldr	r1, [r3, #0]
1a002f04:	6808      	ldr	r0, [r1, #0]
1a002f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f0a:	f380 8809 	msr	PSP, r0
1a002f0e:	f3bf 8f6f 	isb	sy
1a002f12:	f04f 0000 	mov.w	r0, #0
1a002f16:	f380 8811 	msr	BASEPRI, r0
1a002f1a:	4770      	bx	lr
1a002f1c:	f3af 8000 	nop.w

1a002f20 <pxCurrentTCBConst2>:
1a002f20:	1000291c 	.word	0x1000291c

1a002f24 <vPortEnterCritical>:
1a002f24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f28:	f383 8811 	msr	BASEPRI, r3
1a002f2c:	f3bf 8f6f 	isb	sy
1a002f30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002f34:	4a0a      	ldr	r2, [pc, #40]	; (1a002f60 <vPortEnterCritical+0x3c>)
1a002f36:	6813      	ldr	r3, [r2, #0]
1a002f38:	3301      	adds	r3, #1
1a002f3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002f3c:	2b01      	cmp	r3, #1
1a002f3e:	d000      	beq.n	1a002f42 <vPortEnterCritical+0x1e>
}
1a002f40:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002f42:	4b08      	ldr	r3, [pc, #32]	; (1a002f64 <vPortEnterCritical+0x40>)
1a002f44:	681b      	ldr	r3, [r3, #0]
1a002f46:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002f4a:	d0f9      	beq.n	1a002f40 <vPortEnterCritical+0x1c>
1a002f4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f50:	f383 8811 	msr	BASEPRI, r3
1a002f54:	f3bf 8f6f 	isb	sy
1a002f58:	f3bf 8f4f 	dsb	sy
1a002f5c:	e7fe      	b.n	1a002f5c <vPortEnterCritical+0x38>
1a002f5e:	bf00      	nop
1a002f60:	10000000 	.word	0x10000000
1a002f64:	e000ed04 	.word	0xe000ed04

1a002f68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002f68:	4b09      	ldr	r3, [pc, #36]	; (1a002f90 <vPortExitCritical+0x28>)
1a002f6a:	681b      	ldr	r3, [r3, #0]
1a002f6c:	b943      	cbnz	r3, 1a002f80 <vPortExitCritical+0x18>
1a002f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f72:	f383 8811 	msr	BASEPRI, r3
1a002f76:	f3bf 8f6f 	isb	sy
1a002f7a:	f3bf 8f4f 	dsb	sy
1a002f7e:	e7fe      	b.n	1a002f7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002f80:	3b01      	subs	r3, #1
1a002f82:	4a03      	ldr	r2, [pc, #12]	; (1a002f90 <vPortExitCritical+0x28>)
1a002f84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002f86:	b90b      	cbnz	r3, 1a002f8c <vPortExitCritical+0x24>
	__asm volatile
1a002f88:	f383 8811 	msr	BASEPRI, r3
}
1a002f8c:	4770      	bx	lr
1a002f8e:	bf00      	nop
1a002f90:	10000000 	.word	0x10000000
1a002f94:	ffffffff 	.word	0xffffffff
1a002f98:	ffffffff 	.word	0xffffffff
1a002f9c:	ffffffff 	.word	0xffffffff

1a002fa0 <PendSV_Handler>:
	__asm volatile
1a002fa0:	f3ef 8009 	mrs	r0, PSP
1a002fa4:	f3bf 8f6f 	isb	sy
1a002fa8:	4b15      	ldr	r3, [pc, #84]	; (1a003000 <pxCurrentTCBConst>)
1a002faa:	681a      	ldr	r2, [r3, #0]
1a002fac:	f01e 0f10 	tst.w	lr, #16
1a002fb0:	bf08      	it	eq
1a002fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002fba:	6010      	str	r0, [r2, #0]
1a002fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002fc0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002fc4:	f380 8811 	msr	BASEPRI, r0
1a002fc8:	f3bf 8f4f 	dsb	sy
1a002fcc:	f3bf 8f6f 	isb	sy
1a002fd0:	f7ff fac6 	bl	1a002560 <vTaskSwitchContext>
1a002fd4:	f04f 0000 	mov.w	r0, #0
1a002fd8:	f380 8811 	msr	BASEPRI, r0
1a002fdc:	bc09      	pop	{r0, r3}
1a002fde:	6819      	ldr	r1, [r3, #0]
1a002fe0:	6808      	ldr	r0, [r1, #0]
1a002fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002fe6:	f01e 0f10 	tst.w	lr, #16
1a002fea:	bf08      	it	eq
1a002fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002ff0:	f380 8809 	msr	PSP, r0
1a002ff4:	f3bf 8f6f 	isb	sy
1a002ff8:	4770      	bx	lr
1a002ffa:	bf00      	nop
1a002ffc:	f3af 8000 	nop.w

1a003000 <pxCurrentTCBConst>:
1a003000:	1000291c 	.word	0x1000291c

1a003004 <SysTick_Handler>:
{
1a003004:	b508      	push	{r3, lr}
	__asm volatile
1a003006:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00300a:	f383 8811 	msr	BASEPRI, r3
1a00300e:	f3bf 8f6f 	isb	sy
1a003012:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a003016:	f7ff f94b 	bl	1a0022b0 <xTaskIncrementTick>
1a00301a:	b118      	cbz	r0, 1a003024 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00301c:	4b03      	ldr	r3, [pc, #12]	; (1a00302c <SysTick_Handler+0x28>)
1a00301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003022:	601a      	str	r2, [r3, #0]
	__asm volatile
1a003024:	2300      	movs	r3, #0
1a003026:	f383 8811 	msr	BASEPRI, r3
}
1a00302a:	bd08      	pop	{r3, pc}
1a00302c:	e000ed04 	.word	0xe000ed04

1a003030 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a003030:	4a08      	ldr	r2, [pc, #32]	; (1a003054 <vPortSetupTimerInterrupt+0x24>)
1a003032:	2300      	movs	r3, #0
1a003034:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a003036:	4908      	ldr	r1, [pc, #32]	; (1a003058 <vPortSetupTimerInterrupt+0x28>)
1a003038:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00303a:	4b08      	ldr	r3, [pc, #32]	; (1a00305c <vPortSetupTimerInterrupt+0x2c>)
1a00303c:	681b      	ldr	r3, [r3, #0]
1a00303e:	4908      	ldr	r1, [pc, #32]	; (1a003060 <vPortSetupTimerInterrupt+0x30>)
1a003040:	fba1 1303 	umull	r1, r3, r1, r3
1a003044:	099b      	lsrs	r3, r3, #6
1a003046:	3b01      	subs	r3, #1
1a003048:	4906      	ldr	r1, [pc, #24]	; (1a003064 <vPortSetupTimerInterrupt+0x34>)
1a00304a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00304c:	2307      	movs	r3, #7
1a00304e:	6013      	str	r3, [r2, #0]
}
1a003050:	4770      	bx	lr
1a003052:	bf00      	nop
1a003054:	e000e010 	.word	0xe000e010
1a003058:	e000e018 	.word	0xe000e018
1a00305c:	10002c70 	.word	0x10002c70
1a003060:	10624dd3 	.word	0x10624dd3
1a003064:	e000e014 	.word	0xe000e014

1a003068 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a003068:	4b3a      	ldr	r3, [pc, #232]	; (1a003154 <xPortStartScheduler+0xec>)
1a00306a:	681a      	ldr	r2, [r3, #0]
1a00306c:	4b3a      	ldr	r3, [pc, #232]	; (1a003158 <xPortStartScheduler+0xf0>)
1a00306e:	429a      	cmp	r2, r3
1a003070:	d00d      	beq.n	1a00308e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a003072:	4b38      	ldr	r3, [pc, #224]	; (1a003154 <xPortStartScheduler+0xec>)
1a003074:	681a      	ldr	r2, [r3, #0]
1a003076:	4b39      	ldr	r3, [pc, #228]	; (1a00315c <xPortStartScheduler+0xf4>)
1a003078:	429a      	cmp	r2, r3
1a00307a:	d111      	bne.n	1a0030a0 <xPortStartScheduler+0x38>
	__asm volatile
1a00307c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003080:	f383 8811 	msr	BASEPRI, r3
1a003084:	f3bf 8f6f 	isb	sy
1a003088:	f3bf 8f4f 	dsb	sy
1a00308c:	e7fe      	b.n	1a00308c <xPortStartScheduler+0x24>
1a00308e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003092:	f383 8811 	msr	BASEPRI, r3
1a003096:	f3bf 8f6f 	isb	sy
1a00309a:	f3bf 8f4f 	dsb	sy
1a00309e:	e7fe      	b.n	1a00309e <xPortStartScheduler+0x36>
{
1a0030a0:	b510      	push	{r4, lr}
1a0030a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0030a4:	4b2e      	ldr	r3, [pc, #184]	; (1a003160 <xPortStartScheduler+0xf8>)
1a0030a6:	781a      	ldrb	r2, [r3, #0]
1a0030a8:	b2d2      	uxtb	r2, r2
1a0030aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0030ac:	22ff      	movs	r2, #255	; 0xff
1a0030ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0030b0:	781b      	ldrb	r3, [r3, #0]
1a0030b2:	b2db      	uxtb	r3, r3
1a0030b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0030b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0030bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0030c0:	4a28      	ldr	r2, [pc, #160]	; (1a003164 <xPortStartScheduler+0xfc>)
1a0030c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0030c4:	4b28      	ldr	r3, [pc, #160]	; (1a003168 <xPortStartScheduler+0x100>)
1a0030c6:	2207      	movs	r2, #7
1a0030c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0030ca:	e009      	b.n	1a0030e0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0030cc:	4a26      	ldr	r2, [pc, #152]	; (1a003168 <xPortStartScheduler+0x100>)
1a0030ce:	6813      	ldr	r3, [r2, #0]
1a0030d0:	3b01      	subs	r3, #1
1a0030d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0030d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0030d8:	005b      	lsls	r3, r3, #1
1a0030da:	b2db      	uxtb	r3, r3
1a0030dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0030e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0030e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0030e8:	d1f0      	bne.n	1a0030cc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0030ea:	4b1f      	ldr	r3, [pc, #124]	; (1a003168 <xPortStartScheduler+0x100>)
1a0030ec:	681b      	ldr	r3, [r3, #0]
1a0030ee:	2b04      	cmp	r3, #4
1a0030f0:	d008      	beq.n	1a003104 <xPortStartScheduler+0x9c>
1a0030f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030f6:	f383 8811 	msr	BASEPRI, r3
1a0030fa:	f3bf 8f6f 	isb	sy
1a0030fe:	f3bf 8f4f 	dsb	sy
1a003102:	e7fe      	b.n	1a003102 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003104:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a003106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00310a:	4a17      	ldr	r2, [pc, #92]	; (1a003168 <xPortStartScheduler+0x100>)
1a00310c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00310e:	9b01      	ldr	r3, [sp, #4]
1a003110:	b2db      	uxtb	r3, r3
1a003112:	4a13      	ldr	r2, [pc, #76]	; (1a003160 <xPortStartScheduler+0xf8>)
1a003114:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003116:	4b15      	ldr	r3, [pc, #84]	; (1a00316c <xPortStartScheduler+0x104>)
1a003118:	681a      	ldr	r2, [r3, #0]
1a00311a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00311e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a003120:	681a      	ldr	r2, [r3, #0]
1a003122:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a003126:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a003128:	f7ff ff82 	bl	1a003030 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00312c:	2400      	movs	r4, #0
1a00312e:	4b10      	ldr	r3, [pc, #64]	; (1a003170 <xPortStartScheduler+0x108>)
1a003130:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a003132:	f7ff fec5 	bl	1a002ec0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a003136:	4a0f      	ldr	r2, [pc, #60]	; (1a003174 <xPortStartScheduler+0x10c>)
1a003138:	6813      	ldr	r3, [r2, #0]
1a00313a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00313e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a003140:	f7ff feaa 	bl	1a002e98 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a003144:	f7ff fa0c 	bl	1a002560 <vTaskSwitchContext>
	prvTaskExitError();
1a003148:	f7ff fe86 	bl	1a002e58 <prvTaskExitError>
}
1a00314c:	4620      	mov	r0, r4
1a00314e:	b002      	add	sp, #8
1a003150:	bd10      	pop	{r4, pc}
1a003152:	bf00      	nop
1a003154:	e000ed00 	.word	0xe000ed00
1a003158:	410fc271 	.word	0x410fc271
1a00315c:	410fc270 	.word	0x410fc270
1a003160:	e000e400 	.word	0xe000e400
1a003164:	10002b70 	.word	0x10002b70
1a003168:	10002b74 	.word	0x10002b74
1a00316c:	e000ed20 	.word	0xe000ed20
1a003170:	10000000 	.word	0x10000000
1a003174:	e000ef34 	.word	0xe000ef34

1a003178 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a003178:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00317c:	2b0f      	cmp	r3, #15
1a00317e:	d90f      	bls.n	1a0031a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003180:	4a10      	ldr	r2, [pc, #64]	; (1a0031c4 <vPortValidateInterruptPriority+0x4c>)
1a003182:	5c9b      	ldrb	r3, [r3, r2]
1a003184:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003186:	4a10      	ldr	r2, [pc, #64]	; (1a0031c8 <vPortValidateInterruptPriority+0x50>)
1a003188:	7812      	ldrb	r2, [r2, #0]
1a00318a:	429a      	cmp	r2, r3
1a00318c:	d908      	bls.n	1a0031a0 <vPortValidateInterruptPriority+0x28>
1a00318e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003192:	f383 8811 	msr	BASEPRI, r3
1a003196:	f3bf 8f6f 	isb	sy
1a00319a:	f3bf 8f4f 	dsb	sy
1a00319e:	e7fe      	b.n	1a00319e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0031a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0031cc <vPortValidateInterruptPriority+0x54>)
1a0031a2:	681b      	ldr	r3, [r3, #0]
1a0031a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0031a8:	4a09      	ldr	r2, [pc, #36]	; (1a0031d0 <vPortValidateInterruptPriority+0x58>)
1a0031aa:	6812      	ldr	r2, [r2, #0]
1a0031ac:	4293      	cmp	r3, r2
1a0031ae:	d908      	bls.n	1a0031c2 <vPortValidateInterruptPriority+0x4a>
1a0031b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031b4:	f383 8811 	msr	BASEPRI, r3
1a0031b8:	f3bf 8f6f 	isb	sy
1a0031bc:	f3bf 8f4f 	dsb	sy
1a0031c0:	e7fe      	b.n	1a0031c0 <vPortValidateInterruptPriority+0x48>
	}
1a0031c2:	4770      	bx	lr
1a0031c4:	e000e3f0 	.word	0xe000e3f0
1a0031c8:	10002b70 	.word	0x10002b70
1a0031cc:	e000ed0c 	.word	0xe000ed0c
1a0031d0:	10002b74 	.word	0x10002b74

1a0031d4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0031d4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0031d6:	4b05      	ldr	r3, [pc, #20]	; (1a0031ec <DAC_IRQHandler+0x18>)
1a0031d8:	2201      	movs	r2, #1
1a0031da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0031de:	4b04      	ldr	r3, [pc, #16]	; (1a0031f0 <DAC_IRQHandler+0x1c>)
1a0031e0:	681b      	ldr	r3, [r3, #0]
1a0031e2:	b113      	cbz	r3, 1a0031ea <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0031e4:	4b02      	ldr	r3, [pc, #8]	; (1a0031f0 <DAC_IRQHandler+0x1c>)
1a0031e6:	681b      	ldr	r3, [r3, #0]
1a0031e8:	4798      	blx	r3
   }
}
1a0031ea:	bd08      	pop	{r3, pc}
1a0031ec:	e000e100 	.word	0xe000e100
1a0031f0:	10002b78 	.word	0x10002b78

1a0031f4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0031f4:	2200      	movs	r2, #0
1a0031f6:	2a05      	cmp	r2, #5
1a0031f8:	d819      	bhi.n	1a00322e <Board_LED_Init+0x3a>
{
1a0031fa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0031fc:	490c      	ldr	r1, [pc, #48]	; (1a003230 <Board_LED_Init+0x3c>)
1a0031fe:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003202:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003206:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003208:	4b0a      	ldr	r3, [pc, #40]	; (1a003234 <Board_LED_Init+0x40>)
1a00320a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00320e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003212:	2001      	movs	r0, #1
1a003214:	40a0      	lsls	r0, r4
1a003216:	4301      	orrs	r1, r0
1a003218:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00321c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003220:	2100      	movs	r1, #0
1a003222:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003224:	3201      	adds	r2, #1
1a003226:	2a05      	cmp	r2, #5
1a003228:	d9e8      	bls.n	1a0031fc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00322a:	bc70      	pop	{r4, r5, r6}
1a00322c:	4770      	bx	lr
1a00322e:	4770      	bx	lr
1a003230:	1a005ebc 	.word	0x1a005ebc
1a003234:	400f4000 	.word	0x400f4000

1a003238 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003238:	2300      	movs	r3, #0
1a00323a:	2b03      	cmp	r3, #3
1a00323c:	d816      	bhi.n	1a00326c <Board_TEC_Init+0x34>
{
1a00323e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003240:	490b      	ldr	r1, [pc, #44]	; (1a003270 <Board_TEC_Init+0x38>)
1a003242:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003246:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00324a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00324c:	4c09      	ldr	r4, [pc, #36]	; (1a003274 <Board_TEC_Init+0x3c>)
1a00324e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003252:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003256:	2001      	movs	r0, #1
1a003258:	40a8      	lsls	r0, r5
1a00325a:	ea21 0100 	bic.w	r1, r1, r0
1a00325e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003262:	3301      	adds	r3, #1
1a003264:	2b03      	cmp	r3, #3
1a003266:	d9eb      	bls.n	1a003240 <Board_TEC_Init+0x8>
   }
}
1a003268:	bc30      	pop	{r4, r5}
1a00326a:	4770      	bx	lr
1a00326c:	4770      	bx	lr
1a00326e:	bf00      	nop
1a003270:	1a005eb4 	.word	0x1a005eb4
1a003274:	400f4000 	.word	0x400f4000

1a003278 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003278:	2300      	movs	r3, #0
1a00327a:	2b08      	cmp	r3, #8
1a00327c:	d816      	bhi.n	1a0032ac <Board_GPIO_Init+0x34>
{
1a00327e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003280:	490b      	ldr	r1, [pc, #44]	; (1a0032b0 <Board_GPIO_Init+0x38>)
1a003282:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003286:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00328a:	784d      	ldrb	r5, [r1, #1]
1a00328c:	4c09      	ldr	r4, [pc, #36]	; (1a0032b4 <Board_GPIO_Init+0x3c>)
1a00328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003292:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003296:	2001      	movs	r0, #1
1a003298:	40a8      	lsls	r0, r5
1a00329a:	ea21 0100 	bic.w	r1, r1, r0
1a00329e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0032a2:	3301      	adds	r3, #1
1a0032a4:	2b08      	cmp	r3, #8
1a0032a6:	d9eb      	bls.n	1a003280 <Board_GPIO_Init+0x8>
   }
}
1a0032a8:	bc30      	pop	{r4, r5}
1a0032aa:	4770      	bx	lr
1a0032ac:	4770      	bx	lr
1a0032ae:	bf00      	nop
1a0032b0:	1a005ec8 	.word	0x1a005ec8
1a0032b4:	400f4000 	.word	0x400f4000

1a0032b8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0032b8:	b510      	push	{r4, lr}
1a0032ba:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0032bc:	4c08      	ldr	r4, [pc, #32]	; (1a0032e0 <Board_ADC_Init+0x28>)
1a0032be:	4669      	mov	r1, sp
1a0032c0:	4620      	mov	r0, r4
1a0032c2:	f000 fb05 	bl	1a0038d0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0032c6:	4a07      	ldr	r2, [pc, #28]	; (1a0032e4 <Board_ADC_Init+0x2c>)
1a0032c8:	4669      	mov	r1, sp
1a0032ca:	4620      	mov	r0, r4
1a0032cc:	f000 fb20 	bl	1a003910 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0032d0:	2200      	movs	r2, #0
1a0032d2:	4669      	mov	r1, sp
1a0032d4:	4620      	mov	r0, r4
1a0032d6:	f000 fb34 	bl	1a003942 <Chip_ADC_SetResolution>
}
1a0032da:	b002      	add	sp, #8
1a0032dc:	bd10      	pop	{r4, pc}
1a0032de:	bf00      	nop
1a0032e0:	400e3000 	.word	0x400e3000
1a0032e4:	00061a80 	.word	0x00061a80

1a0032e8 <Board_SPI_Init>:
{
1a0032e8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0032ea:	4c0b      	ldr	r4, [pc, #44]	; (1a003318 <Board_SPI_Init+0x30>)
1a0032ec:	4620      	mov	r0, r4
1a0032ee:	f000 ff6f 	bl	1a0041d0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0032f2:	6863      	ldr	r3, [r4, #4]
1a0032f4:	f023 0304 	bic.w	r3, r3, #4
1a0032f8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0032fa:	6823      	ldr	r3, [r4, #0]
1a0032fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003300:	f043 0307 	orr.w	r3, r3, #7
1a003304:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003306:	4905      	ldr	r1, [pc, #20]	; (1a00331c <Board_SPI_Init+0x34>)
1a003308:	4620      	mov	r0, r4
1a00330a:	f000 ff42 	bl	1a004192 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00330e:	6863      	ldr	r3, [r4, #4]
1a003310:	f043 0302 	orr.w	r3, r3, #2
1a003314:	6063      	str	r3, [r4, #4]
}
1a003316:	bd10      	pop	{r4, pc}
1a003318:	400c5000 	.word	0x400c5000
1a00331c:	000186a0 	.word	0x000186a0

1a003320 <Board_I2C_Init>:
{
1a003320:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a003322:	2000      	movs	r0, #0
1a003324:	f000 f956 	bl	1a0035d4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003328:	4b04      	ldr	r3, [pc, #16]	; (1a00333c <Board_I2C_Init+0x1c>)
1a00332a:	f640 0208 	movw	r2, #2056	; 0x808
1a00332e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003332:	4903      	ldr	r1, [pc, #12]	; (1a003340 <Board_I2C_Init+0x20>)
1a003334:	2000      	movs	r0, #0
1a003336:	f000 f95f 	bl	1a0035f8 <Chip_I2C_SetClockRate>
}
1a00333a:	bd08      	pop	{r3, pc}
1a00333c:	40086000 	.word	0x40086000
1a003340:	000f4240 	.word	0x000f4240

1a003344 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003344:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a003346:	4c07      	ldr	r4, [pc, #28]	; (1a003364 <Board_Debug_Init+0x20>)
1a003348:	4620      	mov	r0, r4
1a00334a:	f000 f9df 	bl	1a00370c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00334e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003352:	4620      	mov	r0, r4
1a003354:	f000 fa24 	bl	1a0037a0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003358:	2303      	movs	r3, #3
1a00335a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00335c:	2301      	movs	r3, #1
1a00335e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a003360:	bd10      	pop	{r4, pc}
1a003362:	bf00      	nop
1a003364:	400c1000 	.word	0x400c1000

1a003368 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003368:	4b03      	ldr	r3, [pc, #12]	; (1a003378 <Board_UARTPutChar+0x10>)
1a00336a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00336c:	f013 0f20 	tst.w	r3, #32
1a003370:	d0fa      	beq.n	1a003368 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a003372:	4b01      	ldr	r3, [pc, #4]	; (1a003378 <Board_UARTPutChar+0x10>)
1a003374:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a003376:	4770      	bx	lr
1a003378:	400c1000 	.word	0x400c1000

1a00337c <Board_UARTGetChar>:
	return pUART->LSR;
1a00337c:	4b05      	ldr	r3, [pc, #20]	; (1a003394 <Board_UARTGetChar+0x18>)
1a00337e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003380:	f013 0f01 	tst.w	r3, #1
1a003384:	d003      	beq.n	1a00338e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003386:	4b03      	ldr	r3, [pc, #12]	; (1a003394 <Board_UARTGetChar+0x18>)
1a003388:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00338a:	b2c0      	uxtb	r0, r0
1a00338c:	4770      	bx	lr
   }
   return EOF;
1a00338e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003392:	4770      	bx	lr
1a003394:	400c1000 	.word	0x400c1000

1a003398 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003398:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00339a:	f7ff ffd3 	bl	1a003344 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00339e:	4809      	ldr	r0, [pc, #36]	; (1a0033c4 <Board_Init+0x2c>)
1a0033a0:	f000 fed7 	bl	1a004152 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0033a4:	f7ff ff68 	bl	1a003278 <Board_GPIO_Init>
   Board_ADC_Init();
1a0033a8:	f7ff ff86 	bl	1a0032b8 <Board_ADC_Init>
   Board_SPI_Init();
1a0033ac:	f7ff ff9c 	bl	1a0032e8 <Board_SPI_Init>
   Board_I2C_Init();
1a0033b0:	f7ff ffb6 	bl	1a003320 <Board_I2C_Init>

   Board_LED_Init();
1a0033b4:	f7ff ff1e 	bl	1a0031f4 <Board_LED_Init>
   Board_TEC_Init();
1a0033b8:	f7ff ff3e 	bl	1a003238 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0033bc:	f000 fd90 	bl	1a003ee0 <SystemCoreClockUpdate>
}
1a0033c0:	bd08      	pop	{r3, pc}
1a0033c2:	bf00      	nop
1a0033c4:	400f4000 	.word	0x400f4000

1a0033c8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0033c8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0033ca:	b2c0      	uxtb	r0, r0
1a0033cc:	f7ff ffcc 	bl	1a003368 <Board_UARTPutChar>
}
1a0033d0:	bd08      	pop	{r3, pc}

1a0033d2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0033d2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0033d4:	f7ff ffd2 	bl	1a00337c <Board_UARTGetChar>
}
1a0033d8:	bd08      	pop	{r3, pc}

1a0033da <__stdio_init>:

void __stdio_init()
{
1a0033da:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0033dc:	f7ff ffb2 	bl	1a003344 <Board_Debug_Init>
1a0033e0:	bd08      	pop	{r3, pc}
1a0033e2:	Address 0x000000001a0033e2 is out of bounds.


1a0033e4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0033e4:	2300      	movs	r3, #0
1a0033e6:	2b1c      	cmp	r3, #28
1a0033e8:	d812      	bhi.n	1a003410 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0033ea:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0033ec:	4a09      	ldr	r2, [pc, #36]	; (1a003414 <Board_SetupMuxing+0x30>)
1a0033ee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0033f2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0033f6:	784a      	ldrb	r2, [r1, #1]
1a0033f8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0033fa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0033fe:	4906      	ldr	r1, [pc, #24]	; (1a003418 <Board_SetupMuxing+0x34>)
1a003400:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003404:	3301      	adds	r3, #1
1a003406:	2b1c      	cmp	r3, #28
1a003408:	d9f0      	bls.n	1a0033ec <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00340a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00340e:	4770      	bx	lr
1a003410:	4770      	bx	lr
1a003412:	bf00      	nop
1a003414:	1a005ee4 	.word	0x1a005ee4
1a003418:	40086000 	.word	0x40086000

1a00341c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00341c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00341e:	4a17      	ldr	r2, [pc, #92]	; (1a00347c <Board_SetupClocking+0x60>)
1a003420:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003428:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00342c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003430:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003438:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00343c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003440:	2201      	movs	r2, #1
1a003442:	490f      	ldr	r1, [pc, #60]	; (1a003480 <Board_SetupClocking+0x64>)
1a003444:	2006      	movs	r0, #6
1a003446:	f000 fd55 	bl	1a003ef4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00344a:	2400      	movs	r4, #0
1a00344c:	b14c      	cbz	r4, 1a003462 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00344e:	4b0b      	ldr	r3, [pc, #44]	; (1a00347c <Board_SetupClocking+0x60>)
1a003450:	685a      	ldr	r2, [r3, #4]
1a003452:	f022 020c 	bic.w	r2, r2, #12
1a003456:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003458:	685a      	ldr	r2, [r3, #4]
1a00345a:	f042 0203 	orr.w	r2, r2, #3
1a00345e:	605a      	str	r2, [r3, #4]
}
1a003460:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003462:	4808      	ldr	r0, [pc, #32]	; (1a003484 <Board_SetupClocking+0x68>)
1a003464:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003468:	2301      	movs	r3, #1
1a00346a:	788a      	ldrb	r2, [r1, #2]
1a00346c:	7849      	ldrb	r1, [r1, #1]
1a00346e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003472:	f000 fc91 	bl	1a003d98 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003476:	3401      	adds	r4, #1
1a003478:	e7e8      	b.n	1a00344c <Board_SetupClocking+0x30>
1a00347a:	bf00      	nop
1a00347c:	40043000 	.word	0x40043000
1a003480:	0c28cb00 	.word	0x0c28cb00
1a003484:	1a005ee0 	.word	0x1a005ee0

1a003488 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003488:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00348a:	f7ff ffab 	bl	1a0033e4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00348e:	f7ff ffc5 	bl	1a00341c <Board_SetupClocking>
}
1a003492:	bd08      	pop	{r3, pc}

1a003494 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003494:	2901      	cmp	r1, #1
1a003496:	d000      	beq.n	1a00349a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003498:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00349a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00349e:	0082      	lsls	r2, r0, #2
1a0034a0:	4b03      	ldr	r3, [pc, #12]	; (1a0034b0 <Chip_I2C_EventHandler+0x1c>)
1a0034a2:	4413      	add	r3, r2
1a0034a4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0034a6:	7d13      	ldrb	r3, [r2, #20]
1a0034a8:	b2db      	uxtb	r3, r3
1a0034aa:	2b04      	cmp	r3, #4
1a0034ac:	d0fb      	beq.n	1a0034a6 <Chip_I2C_EventHandler+0x12>
1a0034ae:	e7f3      	b.n	1a003498 <Chip_I2C_EventHandler+0x4>
1a0034b0:	10000004 	.word	0x10000004

1a0034b4 <handleMasterXferState>:
{
1a0034b4:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0034b6:	6843      	ldr	r3, [r0, #4]
1a0034b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a0034bc:	2b58      	cmp	r3, #88	; 0x58
1a0034be:	d87e      	bhi.n	1a0035be <handleMasterXferState+0x10a>
1a0034c0:	e8df f003 	tbb	[pc, r3]
1a0034c4:	7d7d7d79 	.word	0x7d7d7d79
1a0034c8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034cc:	7d7d7d2f 	.word	0x7d7d7d2f
1a0034d0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034d4:	7d7d7d2f 	.word	0x7d7d7d2f
1a0034d8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034dc:	7d7d7d39 	.word	0x7d7d7d39
1a0034e0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034e4:	7d7d7d6d 	.word	0x7d7d7d6d
1a0034e8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034ec:	7d7d7d39 	.word	0x7d7d7d39
1a0034f0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034f4:	7d7d7d71 	.word	0x7d7d7d71
1a0034f8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0034fc:	7d7d7d75 	.word	0x7d7d7d75
1a003500:	7d7d7d7d 	.word	0x7d7d7d7d
1a003504:	7d7d7d6b 	.word	0x7d7d7d6b
1a003508:	7d7d7d7d 	.word	0x7d7d7d7d
1a00350c:	7d7d7d6d 	.word	0x7d7d7d6d
1a003510:	7d7d7d7d 	.word	0x7d7d7d7d
1a003514:	7d7d7d2d 	.word	0x7d7d7d2d
1a003518:	7d7d7d7d 	.word	0x7d7d7d7d
1a00351c:	4f          	.byte	0x4f
1a00351d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00351e:	233c      	movs	r3, #60	; 0x3c
1a003520:	e020      	b.n	1a003564 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003522:	780a      	ldrb	r2, [r1, #0]
1a003524:	688b      	ldr	r3, [r1, #8]
1a003526:	fab3 f383 	clz	r3, r3
1a00352a:	095b      	lsrs	r3, r3, #5
1a00352c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003530:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003532:	233c      	movs	r3, #60	; 0x3c
		break;
1a003534:	e023      	b.n	1a00357e <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003536:	688b      	ldr	r3, [r1, #8]
1a003538:	b94b      	cbnz	r3, 1a00354e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00353a:	690b      	ldr	r3, [r1, #16]
1a00353c:	b123      	cbz	r3, 1a003548 <handleMasterXferState+0x94>
1a00353e:	f06f 0320 	mvn.w	r3, #32
1a003542:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003546:	e01a      	b.n	1a00357e <handleMasterXferState+0xca>
1a003548:	f06f 0310 	mvn.w	r3, #16
1a00354c:	e7f9      	b.n	1a003542 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00354e:	684b      	ldr	r3, [r1, #4]
1a003550:	1c5a      	adds	r2, r3, #1
1a003552:	604a      	str	r2, [r1, #4]
1a003554:	781b      	ldrb	r3, [r3, #0]
1a003556:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003558:	688b      	ldr	r3, [r1, #8]
1a00355a:	3b01      	subs	r3, #1
1a00355c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00355e:	233c      	movs	r3, #60	; 0x3c
1a003560:	e00d      	b.n	1a00357e <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003562:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003564:	6884      	ldr	r4, [r0, #8]
1a003566:	68ca      	ldr	r2, [r1, #12]
1a003568:	1c55      	adds	r5, r2, #1
1a00356a:	60cd      	str	r5, [r1, #12]
1a00356c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00356e:	690a      	ldr	r2, [r1, #16]
1a003570:	3a01      	subs	r2, #1
1a003572:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003574:	690a      	ldr	r2, [r1, #16]
1a003576:	2a01      	cmp	r2, #1
1a003578:	dd01      	ble.n	1a00357e <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a00357a:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00357e:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003582:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003584:	f023 0210 	bic.w	r2, r3, #16
1a003588:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a00358a:	f013 0f10 	tst.w	r3, #16
1a00358e:	d018      	beq.n	1a0035c2 <handleMasterXferState+0x10e>
1a003590:	7d0b      	ldrb	r3, [r1, #20]
1a003592:	2b02      	cmp	r3, #2
1a003594:	d015      	beq.n	1a0035c2 <handleMasterXferState+0x10e>
	return 1;
1a003596:	2001      	movs	r0, #1
1a003598:	e017      	b.n	1a0035ca <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a00359a:	233c      	movs	r3, #60	; 0x3c
1a00359c:	e7ea      	b.n	1a003574 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00359e:	2305      	movs	r3, #5
1a0035a0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0035a2:	232c      	movs	r3, #44	; 0x2c
		break;
1a0035a4:	e7eb      	b.n	1a00357e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0035a6:	2301      	movs	r3, #1
1a0035a8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0035aa:	232c      	movs	r3, #44	; 0x2c
		break;
1a0035ac:	e7e7      	b.n	1a00357e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a0035ae:	2302      	movs	r3, #2
1a0035b0:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a0035b2:	233c      	movs	r3, #60	; 0x3c
		break;
1a0035b4:	e7e3      	b.n	1a00357e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a0035b6:	2303      	movs	r3, #3
1a0035b8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0035ba:	232c      	movs	r3, #44	; 0x2c
1a0035bc:	e7df      	b.n	1a00357e <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a0035be:	233c      	movs	r3, #60	; 0x3c
1a0035c0:	e7dd      	b.n	1a00357e <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0035c2:	7d0b      	ldrb	r3, [r1, #20]
1a0035c4:	2b04      	cmp	r3, #4
1a0035c6:	d002      	beq.n	1a0035ce <handleMasterXferState+0x11a>
		return 0;
1a0035c8:	2000      	movs	r0, #0
}
1a0035ca:	bc30      	pop	{r4, r5}
1a0035cc:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a0035ce:	2000      	movs	r0, #0
1a0035d0:	7508      	strb	r0, [r1, #20]
1a0035d2:	e7fa      	b.n	1a0035ca <handleMasterXferState+0x116>

1a0035d4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0035d4:	b570      	push	{r4, r5, r6, lr}
1a0035d6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0035d8:	4e06      	ldr	r6, [pc, #24]	; (1a0035f4 <Chip_I2C_Init+0x20>)
1a0035da:	00c4      	lsls	r4, r0, #3
1a0035dc:	1a22      	subs	r2, r4, r0
1a0035de:	0093      	lsls	r3, r2, #2
1a0035e0:	4433      	add	r3, r6
1a0035e2:	8898      	ldrh	r0, [r3, #4]
1a0035e4:	f000 fc3c 	bl	1a003e60 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0035e8:	1b64      	subs	r4, r4, r5
1a0035ea:	00a3      	lsls	r3, r4, #2
1a0035ec:	58f3      	ldr	r3, [r6, r3]
1a0035ee:	226c      	movs	r2, #108	; 0x6c
1a0035f0:	619a      	str	r2, [r3, #24]
}
1a0035f2:	bd70      	pop	{r4, r5, r6, pc}
1a0035f4:	10000004 	.word	0x10000004

1a0035f8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0035f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0035fc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0035fe:	4e0b      	ldr	r6, [pc, #44]	; (1a00362c <Chip_I2C_SetClockRate+0x34>)
1a003600:	00c5      	lsls	r5, r0, #3
1a003602:	1a2b      	subs	r3, r5, r0
1a003604:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003608:	eb06 0308 	add.w	r3, r6, r8
1a00360c:	8898      	ldrh	r0, [r3, #4]
1a00360e:	f000 fc41 	bl	1a003e94 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003612:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003616:	f856 3008 	ldr.w	r3, [r6, r8]
1a00361a:	0842      	lsrs	r2, r0, #1
1a00361c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00361e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003622:	691a      	ldr	r2, [r3, #16]
1a003624:	1a80      	subs	r0, r0, r2
1a003626:	6158      	str	r0, [r3, #20]
}
1a003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00362c:	10000004 	.word	0x10000004

1a003630 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003630:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003634:	009a      	lsls	r2, r3, #2
1a003636:	4b09      	ldr	r3, [pc, #36]	; (1a00365c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003638:	4413      	add	r3, r2
1a00363a:	691b      	ldr	r3, [r3, #16]
1a00363c:	b153      	cbz	r3, 1a003654 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00363e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003642:	0082      	lsls	r2, r0, #2
1a003644:	4b05      	ldr	r3, [pc, #20]	; (1a00365c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003646:	4413      	add	r3, r2
1a003648:	6898      	ldr	r0, [r3, #8]
}
1a00364a:	4288      	cmp	r0, r1
1a00364c:	bf14      	ite	ne
1a00364e:	2000      	movne	r0, #0
1a003650:	2001      	moveq	r0, #1
1a003652:	4770      	bx	lr
		iic->mEvent = event;
1a003654:	4b01      	ldr	r3, [pc, #4]	; (1a00365c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003656:	4413      	add	r3, r2
1a003658:	6099      	str	r1, [r3, #8]
1a00365a:	e7f0      	b.n	1a00363e <Chip_I2C_SetMasterEventHandler+0xe>
1a00365c:	10000004 	.word	0x10000004

1a003660 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003660:	b510      	push	{r4, lr}
1a003662:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003664:	4809      	ldr	r0, [pc, #36]	; (1a00368c <Chip_I2C_MasterStateHandler+0x2c>)
1a003666:	00e3      	lsls	r3, r4, #3
1a003668:	1b1b      	subs	r3, r3, r4
1a00366a:	009a      	lsls	r2, r3, #2
1a00366c:	1883      	adds	r3, r0, r2
1a00366e:	6919      	ldr	r1, [r3, #16]
1a003670:	5880      	ldr	r0, [r0, r2]
1a003672:	f7ff ff1f 	bl	1a0034b4 <handleMasterXferState>
1a003676:	b940      	cbnz	r0, 1a00368a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003678:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a00367c:	009a      	lsls	r2, r3, #2
1a00367e:	4b03      	ldr	r3, [pc, #12]	; (1a00368c <Chip_I2C_MasterStateHandler+0x2c>)
1a003680:	4413      	add	r3, r2
1a003682:	689b      	ldr	r3, [r3, #8]
1a003684:	2102      	movs	r1, #2
1a003686:	4620      	mov	r0, r4
1a003688:	4798      	blx	r3
	}
}
1a00368a:	bd10      	pop	{r4, pc}
1a00368c:	10000004 	.word	0x10000004

1a003690 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003690:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003694:	0083      	lsls	r3, r0, #2
1a003696:	4a03      	ldr	r2, [pc, #12]	; (1a0036a4 <Chip_I2C_IsStateChanged+0x14>)
1a003698:	58d3      	ldr	r3, [r2, r3]
1a00369a:	6818      	ldr	r0, [r3, #0]
}
1a00369c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0036a0:	4770      	bx	lr
1a0036a2:	bf00      	nop
1a0036a4:	10000004 	.word	0x10000004

1a0036a8 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0036a8:	2901      	cmp	r1, #1
1a0036aa:	d000      	beq.n	1a0036ae <Chip_I2C_EventHandlerPolling+0x6>
1a0036ac:	4770      	bx	lr
{
1a0036ae:	b538      	push	{r3, r4, r5, lr}
1a0036b0:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0036b2:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0036b6:	009a      	lsls	r2, r3, #2
1a0036b8:	4b08      	ldr	r3, [pc, #32]	; (1a0036dc <Chip_I2C_EventHandlerPolling+0x34>)
1a0036ba:	4413      	add	r3, r2
1a0036bc:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a0036be:	7d2b      	ldrb	r3, [r5, #20]
1a0036c0:	b2db      	uxtb	r3, r3
1a0036c2:	2b04      	cmp	r3, #4
1a0036c4:	d108      	bne.n	1a0036d8 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a0036c6:	4620      	mov	r0, r4
1a0036c8:	f7ff ffe2 	bl	1a003690 <Chip_I2C_IsStateChanged>
1a0036cc:	2800      	cmp	r0, #0
1a0036ce:	d0f6      	beq.n	1a0036be <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a0036d0:	4620      	mov	r0, r4
1a0036d2:	f7ff ffc5 	bl	1a003660 <Chip_I2C_MasterStateHandler>
1a0036d6:	e7f2      	b.n	1a0036be <Chip_I2C_EventHandlerPolling+0x16>
}
1a0036d8:	bd38      	pop	{r3, r4, r5, pc}
1a0036da:	bf00      	nop
1a0036dc:	10000004 	.word	0x10000004

1a0036e0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0036e0:	4b09      	ldr	r3, [pc, #36]	; (1a003708 <Chip_UART_GetIndex+0x28>)
1a0036e2:	4298      	cmp	r0, r3
1a0036e4:	d009      	beq.n	1a0036fa <Chip_UART_GetIndex+0x1a>
1a0036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0036ea:	4298      	cmp	r0, r3
1a0036ec:	d007      	beq.n	1a0036fe <Chip_UART_GetIndex+0x1e>
1a0036ee:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0036f2:	4298      	cmp	r0, r3
1a0036f4:	d005      	beq.n	1a003702 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0036f6:	2000      	movs	r0, #0
1a0036f8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0036fa:	2002      	movs	r0, #2
1a0036fc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0036fe:	2003      	movs	r0, #3
1a003700:	4770      	bx	lr
			return 1;
1a003702:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003704:	4770      	bx	lr
1a003706:	bf00      	nop
1a003708:	400c1000 	.word	0x400c1000

1a00370c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00370c:	b530      	push	{r4, r5, lr}
1a00370e:	b083      	sub	sp, #12
1a003710:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003712:	f7ff ffe5 	bl	1a0036e0 <Chip_UART_GetIndex>
1a003716:	2301      	movs	r3, #1
1a003718:	461a      	mov	r2, r3
1a00371a:	4619      	mov	r1, r3
1a00371c:	4d0e      	ldr	r5, [pc, #56]	; (1a003758 <Chip_UART_Init+0x4c>)
1a00371e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003722:	f000 fb7f 	bl	1a003e24 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003726:	2307      	movs	r3, #7
1a003728:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00372a:	2300      	movs	r3, #0
1a00372c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00372e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003730:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003732:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003734:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003736:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003738:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00373a:	4b08      	ldr	r3, [pc, #32]	; (1a00375c <Chip_UART_Init+0x50>)
1a00373c:	429c      	cmp	r4, r3
1a00373e:	d006      	beq.n	1a00374e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003740:	2303      	movs	r3, #3
1a003742:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003744:	2310      	movs	r3, #16
1a003746:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003748:	9b01      	ldr	r3, [sp, #4]
}
1a00374a:	b003      	add	sp, #12
1a00374c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00374e:	2300      	movs	r3, #0
1a003750:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003752:	69a3      	ldr	r3, [r4, #24]
1a003754:	9301      	str	r3, [sp, #4]
1a003756:	e7f3      	b.n	1a003740 <Chip_UART_Init+0x34>
1a003758:	1a005f60 	.word	0x1a005f60
1a00375c:	40082000 	.word	0x40082000

1a003760 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003760:	b538      	push	{r3, r4, r5, lr}
1a003762:	4605      	mov	r5, r0
1a003764:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003766:	f7ff ffbb 	bl	1a0036e0 <Chip_UART_GetIndex>
1a00376a:	4b0c      	ldr	r3, [pc, #48]	; (1a00379c <Chip_UART_SetBaud+0x3c>)
1a00376c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003770:	f000 fb90 	bl	1a003e94 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003774:	0123      	lsls	r3, r4, #4
1a003776:	fbb0 f3f3 	udiv	r3, r0, r3
1a00377a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00377c:	68ea      	ldr	r2, [r5, #12]
1a00377e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003782:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003784:	6029      	str	r1, [r5, #0]
1a003786:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00378a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00378c:	68ea      	ldr	r2, [r5, #12]
1a00378e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003792:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003794:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003798:	0900      	lsrs	r0, r0, #4
1a00379a:	bd38      	pop	{r3, r4, r5, pc}
1a00379c:	1a005f58 	.word	0x1a005f58

1a0037a0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0037a4:	b083      	sub	sp, #12
1a0037a6:	4683      	mov	fp, r0
1a0037a8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0037aa:	f7ff ff99 	bl	1a0036e0 <Chip_UART_GetIndex>
1a0037ae:	4b35      	ldr	r3, [pc, #212]	; (1a003884 <Chip_UART_SetBaudFDR+0xe4>)
1a0037b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0037b4:	f000 fb6e 	bl	1a003e94 <Chip_Clock_GetRate>
1a0037b8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0037ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0037be:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0037c0:	2300      	movs	r3, #0
1a0037c2:	9301      	str	r3, [sp, #4]
1a0037c4:	46a2      	mov	sl, r4
1a0037c6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0037c8:	e02a      	b.n	1a003820 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0037ca:	4242      	negs	r2, r0
				div ++;
1a0037cc:	1c4b      	adds	r3, r1, #1
1a0037ce:	e017      	b.n	1a003800 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0037d0:	b30a      	cbz	r2, 1a003816 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0037d2:	4617      	mov	r7, r2
			sd = d;
1a0037d4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0037d6:	46a2      	mov	sl, r4
			sdiv = div;
1a0037d8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0037da:	3501      	adds	r5, #1
1a0037dc:	42ac      	cmp	r4, r5
1a0037de:	d91e      	bls.n	1a00381e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0037e0:	0933      	lsrs	r3, r6, #4
1a0037e2:	0730      	lsls	r0, r6, #28
1a0037e4:	fba4 0100 	umull	r0, r1, r4, r0
1a0037e8:	fb04 1103 	mla	r1, r4, r3, r1
1a0037ec:	1962      	adds	r2, r4, r5
1a0037ee:	fb08 f202 	mul.w	r2, r8, r2
1a0037f2:	2300      	movs	r3, #0
1a0037f4:	f001 f960 	bl	1a004ab8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0037f8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0037fa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0037fc:	2800      	cmp	r0, #0
1a0037fe:	dbe4      	blt.n	1a0037ca <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003800:	4297      	cmp	r7, r2
1a003802:	d3ea      	bcc.n	1a0037da <Chip_UART_SetBaudFDR+0x3a>
1a003804:	2b00      	cmp	r3, #0
1a003806:	d0e8      	beq.n	1a0037da <Chip_UART_SetBaudFDR+0x3a>
1a003808:	0c19      	lsrs	r1, r3, #16
1a00380a:	d1e6      	bne.n	1a0037da <Chip_UART_SetBaudFDR+0x3a>
1a00380c:	2b02      	cmp	r3, #2
1a00380e:	d8df      	bhi.n	1a0037d0 <Chip_UART_SetBaudFDR+0x30>
1a003810:	2d00      	cmp	r5, #0
1a003812:	d0dd      	beq.n	1a0037d0 <Chip_UART_SetBaudFDR+0x30>
1a003814:	e7e1      	b.n	1a0037da <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003816:	4617      	mov	r7, r2
			sd = d;
1a003818:	9501      	str	r5, [sp, #4]
			sm = m;
1a00381a:	46a2      	mov	sl, r4
			sdiv = div;
1a00381c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00381e:	3401      	adds	r4, #1
1a003820:	b11f      	cbz	r7, 1a00382a <Chip_UART_SetBaudFDR+0x8a>
1a003822:	2c0f      	cmp	r4, #15
1a003824:	d801      	bhi.n	1a00382a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003826:	2500      	movs	r5, #0
1a003828:	e7d8      	b.n	1a0037dc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00382a:	f1b9 0f00 	cmp.w	r9, #0
1a00382e:	d024      	beq.n	1a00387a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003830:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003838:	f8cb 300c 	str.w	r3, [fp, #12]
1a00383c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003840:	f8cb 3000 	str.w	r3, [fp]
1a003844:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003848:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00384c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003854:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003858:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00385c:	b2db      	uxtb	r3, r3
1a00385e:	9901      	ldr	r1, [sp, #4]
1a003860:	f001 020f 	and.w	r2, r1, #15
1a003864:	4313      	orrs	r3, r2
1a003866:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00386a:	0933      	lsrs	r3, r6, #4
1a00386c:	fb0a f303 	mul.w	r3, sl, r3
1a003870:	448a      	add	sl, r1
1a003872:	fb09 f90a 	mul.w	r9, r9, sl
1a003876:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00387a:	4648      	mov	r0, r9
1a00387c:	b003      	add	sp, #12
1a00387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003882:	bf00      	nop
1a003884:	1a005f58 	.word	0x1a005f58

1a003888 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003888:	4b03      	ldr	r3, [pc, #12]	; (1a003898 <Chip_ADC_GetClockIndex+0x10>)
1a00388a:	4298      	cmp	r0, r3
1a00388c:	d001      	beq.n	1a003892 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00388e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003890:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003892:	2004      	movs	r0, #4
1a003894:	4770      	bx	lr
1a003896:	bf00      	nop
1a003898:	400e4000 	.word	0x400e4000

1a00389c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00389c:	b570      	push	{r4, r5, r6, lr}
1a00389e:	460d      	mov	r5, r1
1a0038a0:	4614      	mov	r4, r2
1a0038a2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0038a4:	f7ff fff0 	bl	1a003888 <Chip_ADC_GetClockIndex>
1a0038a8:	f000 faf4 	bl	1a003e94 <Chip_Clock_GetRate>
	if (burstMode) {
1a0038ac:	b965      	cbnz	r5, 1a0038c8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0038ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0038b2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0038b6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0038ba:	0064      	lsls	r4, r4, #1
1a0038bc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0038c0:	b2c0      	uxtb	r0, r0
1a0038c2:	3801      	subs	r0, #1
	return div;
}
1a0038c4:	b2c0      	uxtb	r0, r0
1a0038c6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0038c8:	fb04 f406 	mul.w	r4, r4, r6
1a0038cc:	e7f3      	b.n	1a0038b6 <getClkDiv+0x1a>
1a0038ce:	Address 0x000000001a0038ce is out of bounds.


1a0038d0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0038d0:	b538      	push	{r3, r4, r5, lr}
1a0038d2:	4605      	mov	r5, r0
1a0038d4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0038d6:	f7ff ffd7 	bl	1a003888 <Chip_ADC_GetClockIndex>
1a0038da:	2301      	movs	r3, #1
1a0038dc:	461a      	mov	r2, r3
1a0038de:	4619      	mov	r1, r3
1a0038e0:	f000 faa0 	bl	1a003e24 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0038e4:	2100      	movs	r1, #0
1a0038e6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0038e8:	4a08      	ldr	r2, [pc, #32]	; (1a00390c <Chip_ADC_Init+0x3c>)
1a0038ea:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0038ec:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0038ee:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0038f0:	230b      	movs	r3, #11
1a0038f2:	4628      	mov	r0, r5
1a0038f4:	f7ff ffd2 	bl	1a00389c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0038f8:	0200      	lsls	r0, r0, #8
1a0038fa:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0038fe:	7920      	ldrb	r0, [r4, #4]
1a003900:	0440      	lsls	r0, r0, #17
1a003902:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003906:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003908:	6028      	str	r0, [r5, #0]
}
1a00390a:	bd38      	pop	{r3, r4, r5, pc}
1a00390c:	00061a80 	.word	0x00061a80

1a003910 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003910:	b570      	push	{r4, r5, r6, lr}
1a003912:	4605      	mov	r5, r0
1a003914:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003916:	6804      	ldr	r4, [r0, #0]
1a003918:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00391c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003920:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003922:	790b      	ldrb	r3, [r1, #4]
1a003924:	f1c3 030b 	rsb	r3, r3, #11
1a003928:	b2db      	uxtb	r3, r3
1a00392a:	7949      	ldrb	r1, [r1, #5]
1a00392c:	f7ff ffb6 	bl	1a00389c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003930:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003934:	7930      	ldrb	r0, [r6, #4]
1a003936:	0440      	lsls	r0, r0, #17
1a003938:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00393c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00393e:	6028      	str	r0, [r5, #0]
}
1a003940:	bd70      	pop	{r4, r5, r6, pc}

1a003942 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003942:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003944:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003946:	680a      	ldr	r2, [r1, #0]
1a003948:	f7ff ffe2 	bl	1a003910 <Chip_ADC_SetSampleRate>
}
1a00394c:	bd08      	pop	{r3, pc}
1a00394e:	Address 0x000000001a00394e is out of bounds.


1a003950 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003950:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003952:	680b      	ldr	r3, [r1, #0]
1a003954:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003958:	d002      	beq.n	1a003960 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00395a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00395e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003960:	4607      	mov	r7, r0
1a003962:	2501      	movs	r5, #1
1a003964:	e03b      	b.n	1a0039de <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003966:	694b      	ldr	r3, [r1, #20]
1a003968:	fb03 f302 	mul.w	r3, r3, r2
1a00396c:	fbb3 f3f5 	udiv	r3, r3, r5
1a003970:	e014      	b.n	1a00399c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003972:	461c      	mov	r4, r3
1a003974:	e020      	b.n	1a0039b8 <pll_calc_divs+0x68>
		return -val;
1a003976:	f1cc 0c00 	rsb	ip, ip, #0
1a00397a:	e020      	b.n	1a0039be <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00397c:	3201      	adds	r2, #1
1a00397e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003982:	dc26      	bgt.n	1a0039d2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003984:	680c      	ldr	r4, [r1, #0]
1a003986:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00398a:	d0ec      	beq.n	1a003966 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00398c:	1c73      	adds	r3, r6, #1
1a00398e:	fa02 fc03 	lsl.w	ip, r2, r3
1a003992:	694b      	ldr	r3, [r1, #20]
1a003994:	fb03 f30c 	mul.w	r3, r3, ip
1a003998:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00399c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0039ec <pll_calc_divs+0x9c>
1a0039a0:	4563      	cmp	r3, ip
1a0039a2:	d9eb      	bls.n	1a00397c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0039a4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0039f0 <pll_calc_divs+0xa0>
1a0039a8:	4563      	cmp	r3, ip
1a0039aa:	d812      	bhi.n	1a0039d2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0039ac:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0039b0:	d1df      	bne.n	1a003972 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0039b2:	1c74      	adds	r4, r6, #1
1a0039b4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0039b8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0039bc:	d4db      	bmi.n	1a003976 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0039be:	4567      	cmp	r7, ip
1a0039c0:	d9dc      	bls.n	1a00397c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0039c2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0039c4:	1c77      	adds	r7, r6, #1
1a0039c6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0039c8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0039ca:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0039cc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0039ce:	4667      	mov	r7, ip
1a0039d0:	e7d4      	b.n	1a00397c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0039d2:	3601      	adds	r6, #1
1a0039d4:	2e03      	cmp	r6, #3
1a0039d6:	dc01      	bgt.n	1a0039dc <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0039d8:	2201      	movs	r2, #1
1a0039da:	e7d0      	b.n	1a00397e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0039dc:	3501      	adds	r5, #1
1a0039de:	2d04      	cmp	r5, #4
1a0039e0:	dc01      	bgt.n	1a0039e6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0039e2:	2600      	movs	r6, #0
1a0039e4:	e7f6      	b.n	1a0039d4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0039e6:	bcf0      	pop	{r4, r5, r6, r7}
1a0039e8:	4770      	bx	lr
1a0039ea:	bf00      	nop
1a0039ec:	094c5eff 	.word	0x094c5eff
1a0039f0:	1312d000 	.word	0x1312d000

1a0039f4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0039f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0039f6:	b099      	sub	sp, #100	; 0x64
1a0039f8:	4605      	mov	r5, r0
1a0039fa:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0039fc:	225c      	movs	r2, #92	; 0x5c
1a0039fe:	2100      	movs	r1, #0
1a003a00:	a801      	add	r0, sp, #4
1a003a02:	f001 fb82 	bl	1a00510a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003a06:	2380      	movs	r3, #128	; 0x80
1a003a08:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003a0a:	6963      	ldr	r3, [r4, #20]
1a003a0c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003a0e:	7923      	ldrb	r3, [r4, #4]
1a003a10:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003a14:	4669      	mov	r1, sp
1a003a16:	4628      	mov	r0, r5
1a003a18:	f7ff ff9a 	bl	1a003950 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003a1c:	9b06      	ldr	r3, [sp, #24]
1a003a1e:	42ab      	cmp	r3, r5
1a003a20:	d027      	beq.n	1a003a72 <pll_get_frac+0x7e>
	if (val < 0)
1a003a22:	1aeb      	subs	r3, r5, r3
1a003a24:	d42e      	bmi.n	1a003a84 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003a26:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003a2e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003a30:	6963      	ldr	r3, [r4, #20]
1a003a32:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003a34:	7923      	ldrb	r3, [r4, #4]
1a003a36:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003a3a:	a910      	add	r1, sp, #64	; 0x40
1a003a3c:	4628      	mov	r0, r5
1a003a3e:	f7ff ff87 	bl	1a003950 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003a44:	42ab      	cmp	r3, r5
1a003a46:	d01f      	beq.n	1a003a88 <pll_get_frac+0x94>
	if (val < 0)
1a003a48:	1aeb      	subs	r3, r5, r3
1a003a4a:	d425      	bmi.n	1a003a98 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003a4c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003a4e:	4b2b      	ldr	r3, [pc, #172]	; (1a003afc <pll_get_frac+0x108>)
1a003a50:	429d      	cmp	r5, r3
1a003a52:	d923      	bls.n	1a003a9c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003a56:	1aed      	subs	r5, r5, r3
1a003a58:	d433      	bmi.n	1a003ac2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003a5a:	42ae      	cmp	r6, r5
1a003a5c:	dc3b      	bgt.n	1a003ad6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003a5e:	42be      	cmp	r6, r7
1a003a60:	dc31      	bgt.n	1a003ac6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003a62:	466d      	mov	r5, sp
1a003a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a70:	e006      	b.n	1a003a80 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003a72:	466d      	mov	r5, sp
1a003a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003a80:	b019      	add	sp, #100	; 0x64
1a003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003a84:	425b      	negs	r3, r3
1a003a86:	e7ce      	b.n	1a003a26 <pll_get_frac+0x32>
		*ppll = pll[2];
1a003a88:	ad10      	add	r5, sp, #64	; 0x40
1a003a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003a96:	e7f3      	b.n	1a003a80 <pll_get_frac+0x8c>
		return -val;
1a003a98:	425b      	negs	r3, r3
1a003a9a:	e7d7      	b.n	1a003a4c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003a9c:	2340      	movs	r3, #64	; 0x40
1a003a9e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003aa0:	6963      	ldr	r3, [r4, #20]
1a003aa2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003aa4:	a908      	add	r1, sp, #32
1a003aa6:	4628      	mov	r0, r5
1a003aa8:	f7ff ff52 	bl	1a003950 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003aae:	42ab      	cmp	r3, r5
1a003ab0:	d1d0      	bne.n	1a003a54 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003ab2:	ad08      	add	r5, sp, #32
1a003ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003ab8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003ac0:	e7de      	b.n	1a003a80 <pll_get_frac+0x8c>
		return -val;
1a003ac2:	426d      	negs	r5, r5
1a003ac4:	e7c9      	b.n	1a003a5a <pll_get_frac+0x66>
			*ppll = pll[2];
1a003ac6:	ad10      	add	r5, sp, #64	; 0x40
1a003ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003ad4:	e7d4      	b.n	1a003a80 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003ad6:	42af      	cmp	r7, r5
1a003ad8:	db07      	blt.n	1a003aea <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003ada:	ad08      	add	r5, sp, #32
1a003adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003ae8:	e7ca      	b.n	1a003a80 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003aea:	ad10      	add	r5, sp, #64	; 0x40
1a003aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003af0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003af8:	e7c2      	b.n	1a003a80 <pll_get_frac+0x8c>
1a003afa:	bf00      	nop
1a003afc:	068e7780 	.word	0x068e7780

1a003b00 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003b00:	b430      	push	{r4, r5}
1a003b02:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003b04:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003b06:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003b08:	e000      	b.n	1a003b0c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003b0a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003b0c:	281c      	cmp	r0, #28
1a003b0e:	d118      	bne.n	1a003b42 <Chip_Clock_FindBaseClock+0x42>
1a003b10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003b14:	0051      	lsls	r1, r2, #1
1a003b16:	4a0c      	ldr	r2, [pc, #48]	; (1a003b48 <Chip_Clock_FindBaseClock+0x48>)
1a003b18:	440a      	add	r2, r1
1a003b1a:	7914      	ldrb	r4, [r2, #4]
1a003b1c:	4284      	cmp	r4, r0
1a003b1e:	d010      	beq.n	1a003b42 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003b20:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003b24:	004a      	lsls	r2, r1, #1
1a003b26:	4908      	ldr	r1, [pc, #32]	; (1a003b48 <Chip_Clock_FindBaseClock+0x48>)
1a003b28:	5a8a      	ldrh	r2, [r1, r2]
1a003b2a:	42aa      	cmp	r2, r5
1a003b2c:	d8ed      	bhi.n	1a003b0a <Chip_Clock_FindBaseClock+0xa>
1a003b2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003b32:	0051      	lsls	r1, r2, #1
1a003b34:	4a04      	ldr	r2, [pc, #16]	; (1a003b48 <Chip_Clock_FindBaseClock+0x48>)
1a003b36:	440a      	add	r2, r1
1a003b38:	8852      	ldrh	r2, [r2, #2]
1a003b3a:	42aa      	cmp	r2, r5
1a003b3c:	d3e5      	bcc.n	1a003b0a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003b3e:	4620      	mov	r0, r4
1a003b40:	e7e4      	b.n	1a003b0c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003b42:	bc30      	pop	{r4, r5}
1a003b44:	4770      	bx	lr
1a003b46:	bf00      	nop
1a003b48:	1a005f74 	.word	0x1a005f74

1a003b4c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003b4c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003b52:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003b54:	4a0d      	ldr	r2, [pc, #52]	; (1a003b8c <Chip_Clock_EnableCrystal+0x40>)
1a003b56:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003b58:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003b5c:	6992      	ldr	r2, [r2, #24]
1a003b5e:	428a      	cmp	r2, r1
1a003b60:	d001      	beq.n	1a003b66 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b62:	4a0a      	ldr	r2, [pc, #40]	; (1a003b8c <Chip_Clock_EnableCrystal+0x40>)
1a003b64:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003b66:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003b6a:	4a09      	ldr	r2, [pc, #36]	; (1a003b90 <Chip_Clock_EnableCrystal+0x44>)
1a003b6c:	6811      	ldr	r1, [r2, #0]
1a003b6e:	4a09      	ldr	r2, [pc, #36]	; (1a003b94 <Chip_Clock_EnableCrystal+0x48>)
1a003b70:	4291      	cmp	r1, r2
1a003b72:	d901      	bls.n	1a003b78 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003b74:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b78:	4a04      	ldr	r2, [pc, #16]	; (1a003b8c <Chip_Clock_EnableCrystal+0x40>)
1a003b7a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003b7c:	9b01      	ldr	r3, [sp, #4]
1a003b7e:	1e5a      	subs	r2, r3, #1
1a003b80:	9201      	str	r2, [sp, #4]
1a003b82:	2b00      	cmp	r3, #0
1a003b84:	d1fa      	bne.n	1a003b7c <Chip_Clock_EnableCrystal+0x30>
}
1a003b86:	b002      	add	sp, #8
1a003b88:	4770      	bx	lr
1a003b8a:	bf00      	nop
1a003b8c:	40050000 	.word	0x40050000
1a003b90:	1a005edc 	.word	0x1a005edc
1a003b94:	01312cff 	.word	0x01312cff

1a003b98 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003b98:	3012      	adds	r0, #18
1a003b9a:	4b05      	ldr	r3, [pc, #20]	; (1a003bb0 <Chip_Clock_GetDividerSource+0x18>)
1a003b9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003ba0:	f010 0f01 	tst.w	r0, #1
1a003ba4:	d102      	bne.n	1a003bac <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003ba6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003baa:	4770      	bx	lr
		return CLKINPUT_PD;
1a003bac:	2011      	movs	r0, #17
}
1a003bae:	4770      	bx	lr
1a003bb0:	40050000 	.word	0x40050000

1a003bb4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003bb4:	f100 0212 	add.w	r2, r0, #18
1a003bb8:	4b03      	ldr	r3, [pc, #12]	; (1a003bc8 <Chip_Clock_GetDividerDivisor+0x14>)
1a003bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003bbe:	4b03      	ldr	r3, [pc, #12]	; (1a003bcc <Chip_Clock_GetDividerDivisor+0x18>)
1a003bc0:	5c18      	ldrb	r0, [r3, r0]
}
1a003bc2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003bc6:	4770      	bx	lr
1a003bc8:	40050000 	.word	0x40050000
1a003bcc:	1a005f6c 	.word	0x1a005f6c

1a003bd0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003bd0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003bd2:	2810      	cmp	r0, #16
1a003bd4:	d80a      	bhi.n	1a003bec <Chip_Clock_GetClockInputHz+0x1c>
1a003bd6:	e8df f000 	tbb	[pc, r0]
1a003bda:	0b42      	.short	0x0b42
1a003bdc:	091f160d 	.word	0x091f160d
1a003be0:	2b282522 	.word	0x2b282522
1a003be4:	322e0909 	.word	0x322e0909
1a003be8:	3a36      	.short	0x3a36
1a003bea:	3e          	.byte	0x3e
1a003beb:	00          	.byte	0x00
	uint32_t rate = 0;
1a003bec:	2000      	movs	r0, #0
1a003bee:	e038      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003bf0:	481e      	ldr	r0, [pc, #120]	; (1a003c6c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003bf2:	e036      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003bf4:	4b1e      	ldr	r3, [pc, #120]	; (1a003c70 <Chip_Clock_GetClockInputHz+0xa0>)
1a003bf6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003bfa:	f003 0307 	and.w	r3, r3, #7
1a003bfe:	2b04      	cmp	r3, #4
1a003c00:	d130      	bne.n	1a003c64 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003c02:	2000      	movs	r0, #0
1a003c04:	e02d      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003c06:	4b1a      	ldr	r3, [pc, #104]	; (1a003c70 <Chip_Clock_GetClockInputHz+0xa0>)
1a003c08:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003c0c:	f003 0307 	and.w	r3, r3, #7
1a003c10:	2b04      	cmp	r3, #4
1a003c12:	d029      	beq.n	1a003c68 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003c14:	4817      	ldr	r0, [pc, #92]	; (1a003c74 <Chip_Clock_GetClockInputHz+0xa4>)
1a003c16:	e024      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003c18:	4b17      	ldr	r3, [pc, #92]	; (1a003c78 <Chip_Clock_GetClockInputHz+0xa8>)
1a003c1a:	6818      	ldr	r0, [r3, #0]
		break;
1a003c1c:	e021      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003c1e:	4b17      	ldr	r3, [pc, #92]	; (1a003c7c <Chip_Clock_GetClockInputHz+0xac>)
1a003c20:	6818      	ldr	r0, [r3, #0]
		break;
1a003c22:	e01e      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003c24:	4b16      	ldr	r3, [pc, #88]	; (1a003c80 <Chip_Clock_GetClockInputHz+0xb0>)
1a003c26:	6818      	ldr	r0, [r3, #0]
		break;
1a003c28:	e01b      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003c2a:	4b15      	ldr	r3, [pc, #84]	; (1a003c80 <Chip_Clock_GetClockInputHz+0xb0>)
1a003c2c:	6858      	ldr	r0, [r3, #4]
		break;
1a003c2e:	e018      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003c30:	f000 f86a 	bl	1a003d08 <Chip_Clock_GetMainPLLHz>
		break;
1a003c34:	e015      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003c36:	2100      	movs	r1, #0
1a003c38:	f000 f89c 	bl	1a003d74 <Chip_Clock_GetDivRate>
		break;
1a003c3c:	e011      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003c3e:	2101      	movs	r1, #1
1a003c40:	f000 f898 	bl	1a003d74 <Chip_Clock_GetDivRate>
		break;
1a003c44:	e00d      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003c46:	2102      	movs	r1, #2
1a003c48:	f000 f894 	bl	1a003d74 <Chip_Clock_GetDivRate>
		break;
1a003c4c:	e009      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003c4e:	2103      	movs	r1, #3
1a003c50:	f000 f890 	bl	1a003d74 <Chip_Clock_GetDivRate>
		break;
1a003c54:	e005      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003c56:	2104      	movs	r1, #4
1a003c58:	f000 f88c 	bl	1a003d74 <Chip_Clock_GetDivRate>
		break;
1a003c5c:	e001      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003c5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003c62:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003c64:	4803      	ldr	r0, [pc, #12]	; (1a003c74 <Chip_Clock_GetClockInputHz+0xa4>)
1a003c66:	e7fc      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003c68:	4806      	ldr	r0, [pc, #24]	; (1a003c84 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003c6a:	e7fa      	b.n	1a003c62 <Chip_Clock_GetClockInputHz+0x92>
1a003c6c:	00b71b00 	.word	0x00b71b00
1a003c70:	40043000 	.word	0x40043000
1a003c74:	017d7840 	.word	0x017d7840
1a003c78:	1a005eb0 	.word	0x1a005eb0
1a003c7c:	1a005edc 	.word	0x1a005edc
1a003c80:	10002b7c 	.word	0x10002b7c
1a003c84:	02faf080 	.word	0x02faf080

1a003c88 <Chip_Clock_CalcMainPLLValue>:
{
1a003c88:	b538      	push	{r3, r4, r5, lr}
1a003c8a:	4605      	mov	r5, r0
1a003c8c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003c8e:	7908      	ldrb	r0, [r1, #4]
1a003c90:	f7ff ff9e 	bl	1a003bd0 <Chip_Clock_GetClockInputHz>
1a003c94:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003c96:	4b19      	ldr	r3, [pc, #100]	; (1a003cfc <Chip_Clock_CalcMainPLLValue+0x74>)
1a003c98:	442b      	add	r3, r5
1a003c9a:	4a19      	ldr	r2, [pc, #100]	; (1a003d00 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003c9c:	4293      	cmp	r3, r2
1a003c9e:	d821      	bhi.n	1a003ce4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003ca0:	b318      	cbz	r0, 1a003cea <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003ca2:	2380      	movs	r3, #128	; 0x80
1a003ca4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003ca6:	2300      	movs	r3, #0
1a003ca8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003caa:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003cac:	fbb5 f3f0 	udiv	r3, r5, r0
1a003cb0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003cb2:	4a14      	ldr	r2, [pc, #80]	; (1a003d04 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003cb4:	4295      	cmp	r5, r2
1a003cb6:	d903      	bls.n	1a003cc0 <Chip_Clock_CalcMainPLLValue+0x38>
1a003cb8:	fb03 f000 	mul.w	r0, r3, r0
1a003cbc:	42a8      	cmp	r0, r5
1a003cbe:	d007      	beq.n	1a003cd0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003cc0:	4621      	mov	r1, r4
1a003cc2:	4628      	mov	r0, r5
1a003cc4:	f7ff fe96 	bl	1a0039f4 <pll_get_frac>
		if (!ppll->nsel) {
1a003cc8:	68a3      	ldr	r3, [r4, #8]
1a003cca:	b18b      	cbz	r3, 1a003cf0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003ccc:	3b01      	subs	r3, #1
1a003cce:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003cd0:	6923      	ldr	r3, [r4, #16]
1a003cd2:	b183      	cbz	r3, 1a003cf6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003cd4:	68e2      	ldr	r2, [r4, #12]
1a003cd6:	b10a      	cbz	r2, 1a003cdc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003cd8:	3a01      	subs	r2, #1
1a003cda:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003cdc:	3b01      	subs	r3, #1
1a003cde:	6123      	str	r3, [r4, #16]
	return 0;
1a003ce0:	2000      	movs	r0, #0
}
1a003ce2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ce8:	e7fb      	b.n	1a003ce2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003cee:	e7f8      	b.n	1a003ce2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003cf4:	e7f5      	b.n	1a003ce2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003cfa:	e7f2      	b.n	1a003ce2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003cfc:	ff6b3a10 	.word	0xff6b3a10
1a003d00:	0b940510 	.word	0x0b940510
1a003d04:	094c5eff 	.word	0x094c5eff

1a003d08 <Chip_Clock_GetMainPLLHz>:
{
1a003d08:	b530      	push	{r4, r5, lr}
1a003d0a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003d0c:	4d17      	ldr	r5, [pc, #92]	; (1a003d6c <Chip_Clock_GetMainPLLHz+0x64>)
1a003d0e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003d10:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003d14:	f7ff ff5c 	bl	1a003bd0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003d18:	4b15      	ldr	r3, [pc, #84]	; (1a003d70 <Chip_Clock_GetMainPLLHz+0x68>)
1a003d1a:	681b      	ldr	r3, [r3, #0]
1a003d1c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003d1e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003d20:	f013 0f01 	tst.w	r3, #1
1a003d24:	d01f      	beq.n	1a003d66 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003d26:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003d2a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003d2e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003d32:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003d36:	3301      	adds	r3, #1
	n = nsel + 1;
1a003d38:	3201      	adds	r2, #1
	p = ptab[psel];
1a003d3a:	f10d 0c08 	add.w	ip, sp, #8
1a003d3e:	4461      	add	r1, ip
1a003d40:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003d44:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003d48:	d108      	bne.n	1a003d5c <Chip_Clock_GetMainPLLHz+0x54>
1a003d4a:	b93d      	cbnz	r5, 1a003d5c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003d4c:	0049      	lsls	r1, r1, #1
1a003d4e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003d52:	fbb0 f0f2 	udiv	r0, r0, r2
1a003d56:	fb00 f003 	mul.w	r0, r0, r3
1a003d5a:	e005      	b.n	1a003d68 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003d5c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003d60:	fb03 f000 	mul.w	r0, r3, r0
1a003d64:	e000      	b.n	1a003d68 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003d66:	2000      	movs	r0, #0
}
1a003d68:	b003      	add	sp, #12
1a003d6a:	bd30      	pop	{r4, r5, pc}
1a003d6c:	40050000 	.word	0x40050000
1a003d70:	1a005f68 	.word	0x1a005f68

1a003d74 <Chip_Clock_GetDivRate>:
{
1a003d74:	b538      	push	{r3, r4, r5, lr}
1a003d76:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003d78:	4608      	mov	r0, r1
1a003d7a:	f7ff ff0d 	bl	1a003b98 <Chip_Clock_GetDividerSource>
1a003d7e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003d80:	4620      	mov	r0, r4
1a003d82:	f7ff ff17 	bl	1a003bb4 <Chip_Clock_GetDividerDivisor>
1a003d86:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003d88:	4628      	mov	r0, r5
1a003d8a:	f7ff ff21 	bl	1a003bd0 <Chip_Clock_GetClockInputHz>
1a003d8e:	3401      	adds	r4, #1
}
1a003d90:	fbb0 f0f4 	udiv	r0, r0, r4
1a003d94:	bd38      	pop	{r3, r4, r5, pc}
1a003d96:	Address 0x000000001a003d96 is out of bounds.


1a003d98 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003d98:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003d9a:	f100 0416 	add.w	r4, r0, #22
1a003d9e:	00a4      	lsls	r4, r4, #2
1a003da0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003da4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003da8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003daa:	281b      	cmp	r0, #27
1a003dac:	d813      	bhi.n	1a003dd6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003dae:	2911      	cmp	r1, #17
1a003db0:	d01a      	beq.n	1a003de8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003db2:	4d0e      	ldr	r5, [pc, #56]	; (1a003dec <Chip_Clock_SetBaseClock+0x54>)
1a003db4:	4025      	ands	r5, r4

			if (autoblocken) {
1a003db6:	b10a      	cbz	r2, 1a003dbc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003db8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003dbc:	b10b      	cbz	r3, 1a003dc2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003dbe:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003dc2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003dc6:	3016      	adds	r0, #22
1a003dc8:	0080      	lsls	r0, r0, #2
1a003dca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003dce:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003dd2:	6045      	str	r5, [r0, #4]
1a003dd4:	e008      	b.n	1a003de8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003dd6:	f044 0401 	orr.w	r4, r4, #1
1a003dda:	3016      	adds	r0, #22
1a003ddc:	0080      	lsls	r0, r0, #2
1a003dde:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003de2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003de6:	6044      	str	r4, [r0, #4]
	}
}
1a003de8:	bc30      	pop	{r4, r5}
1a003dea:	4770      	bx	lr
1a003dec:	e0fff7fe 	.word	0xe0fff7fe

1a003df0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003df0:	281b      	cmp	r0, #27
1a003df2:	d80c      	bhi.n	1a003e0e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003df4:	3016      	adds	r0, #22
1a003df6:	0080      	lsls	r0, r0, #2
1a003df8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003dfc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003e00:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003e02:	f010 0f01 	tst.w	r0, #1
1a003e06:	d104      	bne.n	1a003e12 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003e08:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003e0c:	4770      	bx	lr
		return CLKINPUT_PD;
1a003e0e:	2011      	movs	r0, #17
1a003e10:	4770      	bx	lr
		return CLKINPUT_PD;
1a003e12:	2011      	movs	r0, #17
}
1a003e14:	4770      	bx	lr

1a003e16 <Chip_Clock_GetBaseClocktHz>:
{
1a003e16:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003e18:	f7ff ffea 	bl	1a003df0 <Chip_Clock_GetBaseClock>
1a003e1c:	f7ff fed8 	bl	1a003bd0 <Chip_Clock_GetClockInputHz>
}
1a003e20:	bd08      	pop	{r3, pc}
1a003e22:	Address 0x000000001a003e22 is out of bounds.


1a003e24 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003e24:	b969      	cbnz	r1, 1a003e42 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003e26:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003e28:	b10a      	cbz	r2, 1a003e2e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003e2a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003e2e:	2b02      	cmp	r3, #2
1a003e30:	d009      	beq.n	1a003e46 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003e32:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e36:	d209      	bcs.n	1a003e4c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003e38:	3020      	adds	r0, #32
1a003e3a:	4b07      	ldr	r3, [pc, #28]	; (1a003e58 <Chip_Clock_EnableOpts+0x34>)
1a003e3c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003e40:	4770      	bx	lr
		reg |= (1 << 1);
1a003e42:	2103      	movs	r1, #3
1a003e44:	e7f0      	b.n	1a003e28 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003e46:	f041 0120 	orr.w	r1, r1, #32
1a003e4a:	e7f2      	b.n	1a003e32 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003e4c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003e50:	4b02      	ldr	r3, [pc, #8]	; (1a003e5c <Chip_Clock_EnableOpts+0x38>)
1a003e52:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003e56:	4770      	bx	lr
1a003e58:	40051000 	.word	0x40051000
1a003e5c:	40052000 	.word	0x40052000

1a003e60 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003e60:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e64:	d208      	bcs.n	1a003e78 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003e66:	4a09      	ldr	r2, [pc, #36]	; (1a003e8c <Chip_Clock_Enable+0x2c>)
1a003e68:	3020      	adds	r0, #32
1a003e6a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e6e:	f043 0301 	orr.w	r3, r3, #1
1a003e72:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003e76:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003e78:	4a05      	ldr	r2, [pc, #20]	; (1a003e90 <Chip_Clock_Enable+0x30>)
1a003e7a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003e7e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e82:	f043 0301 	orr.w	r3, r3, #1
1a003e86:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003e8a:	4770      	bx	lr
1a003e8c:	40051000 	.word	0x40051000
1a003e90:	40052000 	.word	0x40052000

1a003e94 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003e94:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003e96:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e9a:	d309      	bcc.n	1a003eb0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003e9c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003ea0:	4a0d      	ldr	r2, [pc, #52]	; (1a003ed8 <Chip_Clock_GetRate+0x44>)
1a003ea2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003ea6:	f014 0f01 	tst.w	r4, #1
1a003eaa:	d107      	bne.n	1a003ebc <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003eac:	2000      	movs	r0, #0
	}

	return rate;
}
1a003eae:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003eb0:	f100 0320 	add.w	r3, r0, #32
1a003eb4:	4a09      	ldr	r2, [pc, #36]	; (1a003edc <Chip_Clock_GetRate+0x48>)
1a003eb6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003eba:	e7f4      	b.n	1a003ea6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003ebc:	f7ff fe20 	bl	1a003b00 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003ec0:	f7ff ffa9 	bl	1a003e16 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003ec4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003ec8:	d103      	bne.n	1a003ed2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003eca:	2301      	movs	r3, #1
		rate = rate / div;
1a003ecc:	fbb0 f0f3 	udiv	r0, r0, r3
1a003ed0:	e7ed      	b.n	1a003eae <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003ed2:	2302      	movs	r3, #2
1a003ed4:	e7fa      	b.n	1a003ecc <Chip_Clock_GetRate+0x38>
1a003ed6:	bf00      	nop
1a003ed8:	40052000 	.word	0x40052000
1a003edc:	40051000 	.word	0x40051000

1a003ee0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003ee0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003ee2:	2069      	movs	r0, #105	; 0x69
1a003ee4:	f7ff ffd6 	bl	1a003e94 <Chip_Clock_GetRate>
1a003ee8:	4b01      	ldr	r3, [pc, #4]	; (1a003ef0 <SystemCoreClockUpdate+0x10>)
1a003eea:	6018      	str	r0, [r3, #0]
}
1a003eec:	bd08      	pop	{r3, pc}
1a003eee:	bf00      	nop
1a003ef0:	10002c70 	.word	0x10002c70

1a003ef4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003ef4:	b570      	push	{r4, r5, r6, lr}
1a003ef6:	b08a      	sub	sp, #40	; 0x28
1a003ef8:	4605      	mov	r5, r0
1a003efa:	460e      	mov	r6, r1
1a003efc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003efe:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003f02:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003f04:	2806      	cmp	r0, #6
1a003f06:	d018      	beq.n	1a003f3a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003f08:	2300      	movs	r3, #0
1a003f0a:	2201      	movs	r2, #1
1a003f0c:	4629      	mov	r1, r5
1a003f0e:	2004      	movs	r0, #4
1a003f10:	f7ff ff42 	bl	1a003d98 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003f14:	4a49      	ldr	r2, [pc, #292]	; (1a00403c <Chip_SetupCoreClock+0x148>)
1a003f16:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003f18:	f043 0301 	orr.w	r3, r3, #1
1a003f1c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003f1e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003f22:	a901      	add	r1, sp, #4
1a003f24:	4630      	mov	r0, r6
1a003f26:	f7ff feaf 	bl	1a003c88 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003f2a:	4b45      	ldr	r3, [pc, #276]	; (1a004040 <Chip_SetupCoreClock+0x14c>)
1a003f2c:	429e      	cmp	r6, r3
1a003f2e:	d916      	bls.n	1a003f5e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003f30:	9b01      	ldr	r3, [sp, #4]
1a003f32:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003f36:	d003      	beq.n	1a003f40 <Chip_SetupCoreClock+0x4c>
1a003f38:	e7fe      	b.n	1a003f38 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003f3a:	f7ff fe07 	bl	1a003b4c <Chip_Clock_EnableCrystal>
1a003f3e:	e7e3      	b.n	1a003f08 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003f40:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003f44:	d005      	beq.n	1a003f52 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003f4a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003f4c:	2500      	movs	r5, #0
			direct = 1;
1a003f4e:	2601      	movs	r6, #1
1a003f50:	e007      	b.n	1a003f62 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003f52:	9b04      	ldr	r3, [sp, #16]
1a003f54:	3301      	adds	r3, #1
1a003f56:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003f58:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003f5a:	2600      	movs	r6, #0
1a003f5c:	e001      	b.n	1a003f62 <Chip_SetupCoreClock+0x6e>
1a003f5e:	2500      	movs	r5, #0
1a003f60:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003f62:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003f66:	9b01      	ldr	r3, [sp, #4]
1a003f68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003f6c:	9a05      	ldr	r2, [sp, #20]
1a003f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003f72:	9a03      	ldr	r2, [sp, #12]
1a003f74:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003f78:	9a04      	ldr	r2, [sp, #16]
1a003f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f82:	4a2e      	ldr	r2, [pc, #184]	; (1a00403c <Chip_SetupCoreClock+0x148>)
1a003f84:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003f86:	4b2d      	ldr	r3, [pc, #180]	; (1a00403c <Chip_SetupCoreClock+0x148>)
1a003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003f8a:	f013 0f01 	tst.w	r3, #1
1a003f8e:	d0fa      	beq.n	1a003f86 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003f90:	2300      	movs	r3, #0
1a003f92:	2201      	movs	r2, #1
1a003f94:	2109      	movs	r1, #9
1a003f96:	2004      	movs	r0, #4
1a003f98:	f7ff fefe 	bl	1a003d98 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003f9c:	b1fe      	cbz	r6, 1a003fde <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003f9e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003fa2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fa6:	1e5a      	subs	r2, r3, #1
1a003fa8:	9209      	str	r2, [sp, #36]	; 0x24
1a003faa:	2b00      	cmp	r3, #0
1a003fac:	d1fa      	bne.n	1a003fa4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003fae:	9b01      	ldr	r3, [sp, #4]
1a003fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003fb4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003fb6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003fba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003fbe:	9a05      	ldr	r2, [sp, #20]
1a003fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003fc4:	9a03      	ldr	r2, [sp, #12]
1a003fc6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003fca:	9a04      	ldr	r2, [sp, #16]
1a003fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003fd4:	4a19      	ldr	r2, [pc, #100]	; (1a00403c <Chip_SetupCoreClock+0x148>)
1a003fd6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003fd8:	b36c      	cbz	r4, 1a004036 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003fda:	2400      	movs	r4, #0
1a003fdc:	e029      	b.n	1a004032 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003fde:	2d00      	cmp	r5, #0
1a003fe0:	d0fa      	beq.n	1a003fd8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003fe2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003fe6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fea:	1e5a      	subs	r2, r3, #1
1a003fec:	9209      	str	r2, [sp, #36]	; 0x24
1a003fee:	2b00      	cmp	r3, #0
1a003ff0:	d1fa      	bne.n	1a003fe8 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003ff2:	9b04      	ldr	r3, [sp, #16]
1a003ff4:	1e5a      	subs	r2, r3, #1
1a003ff6:	9204      	str	r2, [sp, #16]
1a003ff8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003ffc:	9b01      	ldr	r3, [sp, #4]
1a003ffe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004002:	9905      	ldr	r1, [sp, #20]
1a004004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004008:	9903      	ldr	r1, [sp, #12]
1a00400a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00400e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004016:	4a09      	ldr	r2, [pc, #36]	; (1a00403c <Chip_SetupCoreClock+0x148>)
1a004018:	6453      	str	r3, [r2, #68]	; 0x44
1a00401a:	e7dd      	b.n	1a003fd8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00401c:	4809      	ldr	r0, [pc, #36]	; (1a004044 <Chip_SetupCoreClock+0x150>)
1a00401e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004022:	78cb      	ldrb	r3, [r1, #3]
1a004024:	788a      	ldrb	r2, [r1, #2]
1a004026:	7849      	ldrb	r1, [r1, #1]
1a004028:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00402c:	f7ff feb4 	bl	1a003d98 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004030:	3401      	adds	r4, #1
1a004032:	2c11      	cmp	r4, #17
1a004034:	d9f2      	bls.n	1a00401c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004036:	b00a      	add	sp, #40	; 0x28
1a004038:	bd70      	pop	{r4, r5, r6, pc}
1a00403a:	bf00      	nop
1a00403c:	40050000 	.word	0x40050000
1a004040:	068e7780 	.word	0x068e7780
1a004044:	1a005fe0 	.word	0x1a005fe0

1a004048 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004048:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00404a:	6843      	ldr	r3, [r0, #4]
1a00404c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004050:	2b30      	cmp	r3, #48	; 0x30
1a004052:	d04a      	beq.n	1a0040ea <Chip_I2CM_XferHandler+0xa2>
1a004054:	d90f      	bls.n	1a004076 <Chip_I2CM_XferHandler+0x2e>
1a004056:	2b48      	cmp	r3, #72	; 0x48
1a004058:	d06a      	beq.n	1a004130 <Chip_I2CM_XferHandler+0xe8>
1a00405a:	d83a      	bhi.n	1a0040d2 <Chip_I2CM_XferHandler+0x8a>
1a00405c:	2b38      	cmp	r3, #56	; 0x38
1a00405e:	d06b      	beq.n	1a004138 <Chip_I2CM_XferHandler+0xf0>
1a004060:	2b40      	cmp	r3, #64	; 0x40
1a004062:	d13e      	bne.n	1a0040e2 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004064:	88ca      	ldrh	r2, [r1, #6]
1a004066:	2a01      	cmp	r2, #1
1a004068:	d95a      	bls.n	1a004120 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00406a:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a00406c:	b9b2      	cbnz	r2, 1a00409c <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00406e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004070:	f023 0310 	bic.w	r3, r3, #16
1a004074:	e012      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004076:	2b10      	cmp	r3, #16
1a004078:	d007      	beq.n	1a00408a <Chip_I2CM_XferHandler+0x42>
1a00407a:	d81c      	bhi.n	1a0040b6 <Chip_I2CM_XferHandler+0x6e>
1a00407c:	b91b      	cbnz	r3, 1a004086 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00407e:	2303      	movs	r3, #3
1a004080:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004082:	232c      	movs	r3, #44	; 0x2c
        break;
1a004084:	e00a      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004086:	2b08      	cmp	r3, #8
1a004088:	d12b      	bne.n	1a0040e2 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00408a:	780a      	ldrb	r2, [r1, #0]
1a00408c:	888b      	ldrh	r3, [r1, #4]
1a00408e:	fab3 f383 	clz	r3, r3
1a004092:	095b      	lsrs	r3, r3, #5
1a004094:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a004098:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00409a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00409c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0040a0:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0040a2:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0040a6:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0040a8:	8848      	ldrh	r0, [r1, #2]
1a0040aa:	38ff      	subs	r0, #255	; 0xff
1a0040ac:	bf18      	it	ne
1a0040ae:	2001      	movne	r0, #1
}
1a0040b0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0040b4:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040b6:	2b20      	cmp	r3, #32
1a0040b8:	d017      	beq.n	1a0040ea <Chip_I2CM_XferHandler+0xa2>
1a0040ba:	2b28      	cmp	r3, #40	; 0x28
1a0040bc:	d001      	beq.n	1a0040c2 <Chip_I2CM_XferHandler+0x7a>
1a0040be:	2b18      	cmp	r3, #24
1a0040c0:	d10f      	bne.n	1a0040e2 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0040c2:	888b      	ldrh	r3, [r1, #4]
1a0040c4:	b9cb      	cbnz	r3, 1a0040fa <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0040c6:	88cb      	ldrh	r3, [r1, #6]
1a0040c8:	2b00      	cmp	r3, #0
1a0040ca:	d139      	bne.n	1a004140 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0040cc:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0040ce:	232c      	movs	r3, #44	; 0x2c
1a0040d0:	e7e4      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040d2:	2b58      	cmp	r3, #88	; 0x58
1a0040d4:	d01b      	beq.n	1a00410e <Chip_I2CM_XferHandler+0xc6>
1a0040d6:	2bf8      	cmp	r3, #248	; 0xf8
1a0040d8:	d101      	bne.n	1a0040de <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0040da:	2000      	movs	r0, #0
1a0040dc:	e7e8      	b.n	1a0040b0 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040de:	2b50      	cmp	r3, #80	; 0x50
1a0040e0:	d015      	beq.n	1a00410e <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0040e2:	2301      	movs	r3, #1
1a0040e4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0040e6:	232c      	movs	r3, #44	; 0x2c
        break;
1a0040e8:	e7d8      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0040ea:	784b      	ldrb	r3, [r1, #1]
1a0040ec:	f013 0f01 	tst.w	r3, #1
1a0040f0:	d1e7      	bne.n	1a0040c2 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0040f2:	2302      	movs	r3, #2
1a0040f4:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0040f6:	232c      	movs	r3, #44	; 0x2c
			break;
1a0040f8:	e7d0      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0040fa:	688b      	ldr	r3, [r1, #8]
1a0040fc:	1c5a      	adds	r2, r3, #1
1a0040fe:	608a      	str	r2, [r1, #8]
1a004100:	781b      	ldrb	r3, [r3, #0]
1a004102:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004104:	888b      	ldrh	r3, [r1, #4]
1a004106:	3b01      	subs	r3, #1
1a004108:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00410a:	233c      	movs	r3, #60	; 0x3c
1a00410c:	e7c6      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a00410e:	6882      	ldr	r2, [r0, #8]
1a004110:	68cb      	ldr	r3, [r1, #12]
1a004112:	1c5c      	adds	r4, r3, #1
1a004114:	60cc      	str	r4, [r1, #12]
1a004116:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a004118:	88cb      	ldrh	r3, [r1, #6]
1a00411a:	3b01      	subs	r3, #1
1a00411c:	80cb      	strh	r3, [r1, #6]
1a00411e:	e7a1      	b.n	1a004064 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004120:	784b      	ldrb	r3, [r1, #1]
1a004122:	f013 0f02 	tst.w	r3, #2
1a004126:	d101      	bne.n	1a00412c <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a004128:	233c      	movs	r3, #60	; 0x3c
1a00412a:	e79f      	b.n	1a00406c <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a00412c:	2338      	movs	r3, #56	; 0x38
1a00412e:	e79d      	b.n	1a00406c <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a004130:	2304      	movs	r3, #4
1a004132:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004134:	232c      	movs	r3, #44	; 0x2c
		break;
1a004136:	e7b1      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a004138:	2305      	movs	r3, #5
1a00413a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00413c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00413e:	e7ad      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a004140:	231c      	movs	r3, #28
1a004142:	e7ab      	b.n	1a00409c <Chip_I2CM_XferHandler+0x54>

1a004144 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a004144:	23ff      	movs	r3, #255	; 0xff
1a004146:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a004148:	232c      	movs	r3, #44	; 0x2c
1a00414a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a00414c:	2360      	movs	r3, #96	; 0x60
1a00414e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a004150:	4770      	bx	lr

1a004152 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a004152:	4770      	bx	lr

1a004154 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004154:	4b03      	ldr	r3, [pc, #12]	; (1a004164 <Chip_SSP_GetClockIndex+0x10>)
1a004156:	4298      	cmp	r0, r3
1a004158:	d001      	beq.n	1a00415e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00415a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00415c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00415e:	20a5      	movs	r0, #165	; 0xa5
1a004160:	4770      	bx	lr
1a004162:	bf00      	nop
1a004164:	400c5000 	.word	0x400c5000

1a004168 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004168:	4b04      	ldr	r3, [pc, #16]	; (1a00417c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00416a:	4298      	cmp	r0, r3
1a00416c:	d002      	beq.n	1a004174 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00416e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a004172:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004174:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004178:	4770      	bx	lr
1a00417a:	bf00      	nop
1a00417c:	400c5000 	.word	0x400c5000

1a004180 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004180:	6803      	ldr	r3, [r0, #0]
1a004182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004186:	0209      	lsls	r1, r1, #8
1a004188:	b289      	uxth	r1, r1
1a00418a:	4319      	orrs	r1, r3
1a00418c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00418e:	6102      	str	r2, [r0, #16]
}
1a004190:	4770      	bx	lr

1a004192 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004192:	b570      	push	{r4, r5, r6, lr}
1a004194:	4606      	mov	r6, r0
1a004196:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004198:	f7ff ffe6 	bl	1a004168 <Chip_SSP_GetPeriphClockIndex>
1a00419c:	f7ff fe7a 	bl	1a003e94 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0041a0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0041a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0041a6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0041a8:	e000      	b.n	1a0041ac <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0041aa:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0041ac:	42ab      	cmp	r3, r5
1a0041ae:	d90b      	bls.n	1a0041c8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0041b0:	1c4c      	adds	r4, r1, #1
1a0041b2:	fb02 f304 	mul.w	r3, r2, r4
1a0041b6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0041ba:	429d      	cmp	r5, r3
1a0041bc:	d2f6      	bcs.n	1a0041ac <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0041be:	2cff      	cmp	r4, #255	; 0xff
1a0041c0:	d9f3      	bls.n	1a0041aa <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0041c2:	3202      	adds	r2, #2
				cr0_div = 0;
1a0041c4:	2100      	movs	r1, #0
1a0041c6:	e7f1      	b.n	1a0041ac <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0041c8:	4630      	mov	r0, r6
1a0041ca:	f7ff ffd9 	bl	1a004180 <Chip_SSP_SetClockRate>
}
1a0041ce:	bd70      	pop	{r4, r5, r6, pc}

1a0041d0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0041d0:	b510      	push	{r4, lr}
1a0041d2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0041d4:	f7ff ffbe 	bl	1a004154 <Chip_SSP_GetClockIndex>
1a0041d8:	f7ff fe42 	bl	1a003e60 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0041dc:	4620      	mov	r0, r4
1a0041de:	f7ff ffc3 	bl	1a004168 <Chip_SSP_GetPeriphClockIndex>
1a0041e2:	f7ff fe3d 	bl	1a003e60 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0041e6:	6863      	ldr	r3, [r4, #4]
1a0041e8:	f023 0304 	bic.w	r3, r3, #4
1a0041ec:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0041ee:	6823      	ldr	r3, [r4, #0]
1a0041f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0041f4:	f043 0307 	orr.w	r3, r3, #7
1a0041f8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0041fa:	4902      	ldr	r1, [pc, #8]	; (1a004204 <Chip_SSP_Init+0x34>)
1a0041fc:	4620      	mov	r0, r4
1a0041fe:	f7ff ffc8 	bl	1a004192 <Chip_SSP_SetBitRate>
}
1a004202:	bd10      	pop	{r4, pc}
1a004204:	000186a0 	.word	0x000186a0

1a004208 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a004208:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00420a:	4a0b      	ldr	r2, [pc, #44]	; (1a004238 <SystemInit+0x30>)
1a00420c:	4b0b      	ldr	r3, [pc, #44]	; (1a00423c <SystemInit+0x34>)
1a00420e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a004210:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a004214:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a004216:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00421a:	2b20      	cmp	r3, #32
1a00421c:	d004      	beq.n	1a004228 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00421e:	f7ff f933 	bl	1a003488 <Board_SystemInit>
   Board_Init();
1a004222:	f7ff f8b9 	bl	1a003398 <Board_Init>
}
1a004226:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a004228:	4a04      	ldr	r2, [pc, #16]	; (1a00423c <SystemInit+0x34>)
1a00422a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00422e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004232:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a004236:	e7f2      	b.n	1a00421e <SystemInit+0x16>
1a004238:	1a000000 	.word	0x1a000000
1a00423c:	e000ed00 	.word	0xe000ed00

1a004240 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a004240:	4b04      	ldr	r3, [pc, #16]	; (1a004254 <cyclesCounterInit+0x14>)
1a004242:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a004244:	4a04      	ldr	r2, [pc, #16]	; (1a004258 <cyclesCounterInit+0x18>)
1a004246:	6813      	ldr	r3, [r2, #0]
1a004248:	f043 0301 	orr.w	r3, r3, #1
1a00424c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00424e:	2001      	movs	r0, #1
1a004250:	4770      	bx	lr
1a004252:	bf00      	nop
1a004254:	1000003c 	.word	0x1000003c
1a004258:	e0001000 	.word	0xe0001000

1a00425c <uartProcessIRQ>:
{
1a00425c:	b570      	push	{r4, r5, r6, lr}
1a00425e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a004260:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a004264:	0093      	lsls	r3, r2, #2
1a004266:	4a1f      	ldr	r2, [pc, #124]	; (1a0042e4 <uartProcessIRQ+0x88>)
1a004268:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a00426a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a00426c:	b2ed      	uxtb	r5, r5
1a00426e:	f015 0f01 	tst.w	r5, #1
1a004272:	d009      	beq.n	1a004288 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a004274:	b920      	cbnz	r0, 1a004280 <uartProcessIRQ+0x24>
1a004276:	4b1c      	ldr	r3, [pc, #112]	; (1a0042e8 <uartProcessIRQ+0x8c>)
1a004278:	681b      	ldr	r3, [r3, #0]
1a00427a:	b10b      	cbz	r3, 1a004280 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a00427c:	2000      	movs	r0, #0
1a00427e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a004280:	2c03      	cmp	r4, #3
1a004282:	d013      	beq.n	1a0042ac <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a004284:	2c05      	cmp	r4, #5
1a004286:	d018      	beq.n	1a0042ba <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a004288:	f015 0f20 	tst.w	r5, #32
1a00428c:	d00d      	beq.n	1a0042aa <uartProcessIRQ+0x4e>
	return pUART->IER;
1a00428e:	6873      	ldr	r3, [r6, #4]
1a004290:	f013 0f02 	tst.w	r3, #2
1a004294:	d009      	beq.n	1a0042aa <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a004296:	b924      	cbnz	r4, 1a0042a2 <uartProcessIRQ+0x46>
1a004298:	4b14      	ldr	r3, [pc, #80]	; (1a0042ec <uartProcessIRQ+0x90>)
1a00429a:	681b      	ldr	r3, [r3, #0]
1a00429c:	b10b      	cbz	r3, 1a0042a2 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a00429e:	2000      	movs	r0, #0
1a0042a0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0042a2:	2c03      	cmp	r4, #3
1a0042a4:	d010      	beq.n	1a0042c8 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0042a6:	2c05      	cmp	r4, #5
1a0042a8:	d015      	beq.n	1a0042d6 <uartProcessIRQ+0x7a>
}
1a0042aa:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0042ac:	4b10      	ldr	r3, [pc, #64]	; (1a0042f0 <uartProcessIRQ+0x94>)
1a0042ae:	681b      	ldr	r3, [r3, #0]
1a0042b0:	2b00      	cmp	r3, #0
1a0042b2:	d0e7      	beq.n	1a004284 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a0042b4:	2000      	movs	r0, #0
1a0042b6:	4798      	blx	r3
1a0042b8:	e7e4      	b.n	1a004284 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0042ba:	4b0e      	ldr	r3, [pc, #56]	; (1a0042f4 <uartProcessIRQ+0x98>)
1a0042bc:	681b      	ldr	r3, [r3, #0]
1a0042be:	2b00      	cmp	r3, #0
1a0042c0:	d0e2      	beq.n	1a004288 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a0042c2:	2000      	movs	r0, #0
1a0042c4:	4798      	blx	r3
1a0042c6:	e7df      	b.n	1a004288 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0042c8:	4b0b      	ldr	r3, [pc, #44]	; (1a0042f8 <uartProcessIRQ+0x9c>)
1a0042ca:	681b      	ldr	r3, [r3, #0]
1a0042cc:	2b00      	cmp	r3, #0
1a0042ce:	d0ea      	beq.n	1a0042a6 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a0042d0:	2000      	movs	r0, #0
1a0042d2:	4798      	blx	r3
1a0042d4:	e7e7      	b.n	1a0042a6 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0042d6:	4b09      	ldr	r3, [pc, #36]	; (1a0042fc <uartProcessIRQ+0xa0>)
1a0042d8:	681b      	ldr	r3, [r3, #0]
1a0042da:	2b00      	cmp	r3, #0
1a0042dc:	d0e5      	beq.n	1a0042aa <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a0042de:	2000      	movs	r0, #0
1a0042e0:	4798      	blx	r3
}
1a0042e2:	e7e2      	b.n	1a0042aa <uartProcessIRQ+0x4e>
1a0042e4:	1a006028 	.word	0x1a006028
1a0042e8:	10002b84 	.word	0x10002b84
1a0042ec:	10002b90 	.word	0x10002b90
1a0042f0:	10002b88 	.word	0x10002b88
1a0042f4:	10002b8c 	.word	0x10002b8c
1a0042f8:	10002b94 	.word	0x10002b94
1a0042fc:	10002b98 	.word	0x10002b98

1a004300 <uartInterrupt>:
   if( enable ) {
1a004300:	b341      	cbz	r1, 1a004354 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a004302:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a004306:	009a      	lsls	r2, r3, #2
1a004308:	4b1e      	ldr	r3, [pc, #120]	; (1a004384 <uartInterrupt+0x84>)
1a00430a:	4413      	add	r3, r2
1a00430c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004310:	2b00      	cmp	r3, #0
1a004312:	db18      	blt.n	1a004346 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004314:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a004318:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a00431c:	22a0      	movs	r2, #160	; 0xa0
1a00431e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a004322:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004326:	0082      	lsls	r2, r0, #2
1a004328:	4b16      	ldr	r3, [pc, #88]	; (1a004384 <uartInterrupt+0x84>)
1a00432a:	4413      	add	r3, r2
1a00432c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004330:	2b00      	cmp	r3, #0
1a004332:	db25      	blt.n	1a004380 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004334:	f003 011f 	and.w	r1, r3, #31
1a004338:	095b      	lsrs	r3, r3, #5
1a00433a:	2201      	movs	r2, #1
1a00433c:	408a      	lsls	r2, r1
1a00433e:	4912      	ldr	r1, [pc, #72]	; (1a004388 <uartInterrupt+0x88>)
1a004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a004344:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004346:	f003 030f 	and.w	r3, r3, #15
1a00434a:	4a10      	ldr	r2, [pc, #64]	; (1a00438c <uartInterrupt+0x8c>)
1a00434c:	441a      	add	r2, r3
1a00434e:	23a0      	movs	r3, #160	; 0xa0
1a004350:	7613      	strb	r3, [r2, #24]
1a004352:	e7e6      	b.n	1a004322 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a004354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004358:	0082      	lsls	r2, r0, #2
1a00435a:	4b0a      	ldr	r3, [pc, #40]	; (1a004384 <uartInterrupt+0x84>)
1a00435c:	4413      	add	r3, r2
1a00435e:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004362:	2b00      	cmp	r3, #0
1a004364:	db0c      	blt.n	1a004380 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004366:	f003 011f 	and.w	r1, r3, #31
1a00436a:	095b      	lsrs	r3, r3, #5
1a00436c:	2201      	movs	r2, #1
1a00436e:	408a      	lsls	r2, r1
1a004370:	3320      	adds	r3, #32
1a004372:	4905      	ldr	r1, [pc, #20]	; (1a004388 <uartInterrupt+0x88>)
1a004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a004378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00437c:	f3bf 8f6f 	isb	sy
}
1a004380:	4770      	bx	lr
1a004382:	bf00      	nop
1a004384:	1a006028 	.word	0x1a006028
1a004388:	e000e100 	.word	0xe000e100
1a00438c:	e000ecfc 	.word	0xe000ecfc

1a004390 <uartCallbackSet>:
   switch(event){
1a004390:	b111      	cbz	r1, 1a004398 <uartCallbackSet+0x8>
1a004392:	2901      	cmp	r1, #1
1a004394:	d01d      	beq.n	1a0043d2 <uartCallbackSet+0x42>
1a004396:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a004398:	b182      	cbz	r2, 1a0043bc <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00439a:	2801      	cmp	r0, #1
1a00439c:	d90f      	bls.n	1a0043be <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00439e:	1ec3      	subs	r3, r0, #3
1a0043a0:	b2db      	uxtb	r3, r3
1a0043a2:	2b01      	cmp	r3, #1
1a0043a4:	d90e      	bls.n	1a0043c4 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a0043a6:	2805      	cmp	r0, #5
1a0043a8:	d00f      	beq.n	1a0043ca <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0043aa:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0043ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0043b0:	0082      	lsls	r2, r0, #2
1a0043b2:	4913      	ldr	r1, [pc, #76]	; (1a004400 <uartCallbackSet+0x70>)
1a0043b4:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a0043b6:	6851      	ldr	r1, [r2, #4]
1a0043b8:	430b      	orrs	r3, r1
1a0043ba:	6053      	str	r3, [r2, #4]
}
1a0043bc:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a0043be:	4b11      	ldr	r3, [pc, #68]	; (1a004404 <uartCallbackSet+0x74>)
1a0043c0:	601a      	str	r2, [r3, #0]
1a0043c2:	e7ec      	b.n	1a00439e <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a0043c4:	4b10      	ldr	r3, [pc, #64]	; (1a004408 <uartCallbackSet+0x78>)
1a0043c6:	601a      	str	r2, [r3, #0]
1a0043c8:	e7ed      	b.n	1a0043a6 <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a0043ca:	4b10      	ldr	r3, [pc, #64]	; (1a00440c <uartCallbackSet+0x7c>)
1a0043cc:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0043ce:	2305      	movs	r3, #5
1a0043d0:	e7ec      	b.n	1a0043ac <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a0043d2:	2a00      	cmp	r2, #0
1a0043d4:	d0f2      	beq.n	1a0043bc <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0043d6:	2801      	cmp	r0, #1
1a0043d8:	d907      	bls.n	1a0043ea <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0043da:	1ec3      	subs	r3, r0, #3
1a0043dc:	b2db      	uxtb	r3, r3
1a0043de:	2b01      	cmp	r3, #1
1a0043e0:	d906      	bls.n	1a0043f0 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a0043e2:	2805      	cmp	r0, #5
1a0043e4:	d007      	beq.n	1a0043f6 <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a0043e6:	2302      	movs	r3, #2
1a0043e8:	e7e0      	b.n	1a0043ac <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a0043ea:	4b09      	ldr	r3, [pc, #36]	; (1a004410 <uartCallbackSet+0x80>)
1a0043ec:	601a      	str	r2, [r3, #0]
1a0043ee:	e7f4      	b.n	1a0043da <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a0043f0:	4b08      	ldr	r3, [pc, #32]	; (1a004414 <uartCallbackSet+0x84>)
1a0043f2:	601a      	str	r2, [r3, #0]
1a0043f4:	e7f5      	b.n	1a0043e2 <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a0043f6:	4b08      	ldr	r3, [pc, #32]	; (1a004418 <uartCallbackSet+0x88>)
1a0043f8:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a0043fa:	2302      	movs	r3, #2
1a0043fc:	e7d6      	b.n	1a0043ac <uartCallbackSet+0x1c>
1a0043fe:	bf00      	nop
1a004400:	1a006028 	.word	0x1a006028
1a004404:	10002b84 	.word	0x10002b84
1a004408:	10002b88 	.word	0x10002b88
1a00440c:	10002b8c 	.word	0x10002b8c
1a004410:	10002b90 	.word	0x10002b90
1a004414:	10002b94 	.word	0x10002b94
1a004418:	10002b98 	.word	0x10002b98

1a00441c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a00441c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004420:	0083      	lsls	r3, r0, #2
1a004422:	4a03      	ldr	r2, [pc, #12]	; (1a004430 <uartTxReady+0x14>)
1a004424:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004426:	6958      	ldr	r0, [r3, #20]
}
1a004428:	f000 0020 	and.w	r0, r0, #32
1a00442c:	4770      	bx	lr
1a00442e:	bf00      	nop
1a004430:	1a006028 	.word	0x1a006028

1a004434 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004434:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004438:	0083      	lsls	r3, r0, #2
1a00443a:	4a02      	ldr	r2, [pc, #8]	; (1a004444 <uartRxRead+0x10>)
1a00443c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00443e:	6818      	ldr	r0, [r3, #0]
}
1a004440:	b2c0      	uxtb	r0, r0
1a004442:	4770      	bx	lr
1a004444:	1a006028 	.word	0x1a006028

1a004448 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a004448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00444c:	0083      	lsls	r3, r0, #2
1a00444e:	4a02      	ldr	r2, [pc, #8]	; (1a004458 <uartTxWrite+0x10>)
1a004450:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a004452:	6019      	str	r1, [r3, #0]
}
1a004454:	4770      	bx	lr
1a004456:	bf00      	nop
1a004458:	1a006028 	.word	0x1a006028

1a00445c <uartInit>:
{
1a00445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004460:	4680      	mov	r8, r0
1a004462:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004464:	4c19      	ldr	r4, [pc, #100]	; (1a0044cc <uartInit+0x70>)
1a004466:	0045      	lsls	r5, r0, #1
1a004468:	182a      	adds	r2, r5, r0
1a00446a:	0093      	lsls	r3, r2, #2
1a00446c:	18e6      	adds	r6, r4, r3
1a00446e:	58e7      	ldr	r7, [r4, r3]
1a004470:	4638      	mov	r0, r7
1a004472:	f7ff f94b 	bl	1a00370c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004476:	4649      	mov	r1, r9
1a004478:	4638      	mov	r0, r7
1a00447a:	f7ff f971 	bl	1a003760 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00447e:	2307      	movs	r3, #7
1a004480:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004482:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004484:	2301      	movs	r3, #1
1a004486:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004488:	7930      	ldrb	r0, [r6, #4]
1a00448a:	7973      	ldrb	r3, [r6, #5]
1a00448c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00448e:	f042 0218 	orr.w	r2, r2, #24
1a004492:	490f      	ldr	r1, [pc, #60]	; (1a0044d0 <uartInit+0x74>)
1a004494:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00449c:	79f0      	ldrb	r0, [r6, #7]
1a00449e:	7a33      	ldrb	r3, [r6, #8]
1a0044a0:	7a72      	ldrb	r2, [r6, #9]
1a0044a2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0044a6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0044ae:	f1b8 0f01 	cmp.w	r8, #1
1a0044b2:	d001      	beq.n	1a0044b8 <uartInit+0x5c>
}
1a0044b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0044b8:	4a06      	ldr	r2, [pc, #24]	; (1a0044d4 <uartInit+0x78>)
1a0044ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0044bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0044c0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0044c2:	221a      	movs	r2, #26
1a0044c4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0044c8:	e7f4      	b.n	1a0044b4 <uartInit+0x58>
1a0044ca:	bf00      	nop
1a0044cc:	1a006028 	.word	0x1a006028
1a0044d0:	40086000 	.word	0x40086000
1a0044d4:	40081000 	.word	0x40081000

1a0044d8 <uartWriteByte>:
{
1a0044d8:	b538      	push	{r3, r4, r5, lr}
1a0044da:	4604      	mov	r4, r0
1a0044dc:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a0044de:	4620      	mov	r0, r4
1a0044e0:	f7ff ff9c 	bl	1a00441c <uartTxReady>
1a0044e4:	2800      	cmp	r0, #0
1a0044e6:	d0fa      	beq.n	1a0044de <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a0044e8:	4629      	mov	r1, r5
1a0044ea:	4620      	mov	r0, r4
1a0044ec:	f7ff ffac 	bl	1a004448 <uartTxWrite>
}
1a0044f0:	bd38      	pop	{r3, r4, r5, pc}

1a0044f2 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0044f2:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0044f4:	2003      	movs	r0, #3
1a0044f6:	f7ff feb1 	bl	1a00425c <uartProcessIRQ>
}
1a0044fa:	bd08      	pop	{r3, pc}

1a0044fc <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0044fc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0044fe:	2005      	movs	r0, #5
1a004500:	f7ff feac 	bl	1a00425c <uartProcessIRQ>
}
1a004504:	bd08      	pop	{r3, pc}
1a004506:	Address 0x000000001a004506 is out of bounds.


1a004508 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a004508:	b538      	push	{r3, r4, r5, lr}
1a00450a:	4604      	mov	r4, r0
1a00450c:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00450e:	4b08      	ldr	r3, [pc, #32]	; (1a004530 <i2cHardwareInit+0x28>)
1a004510:	f640 0208 	movw	r2, #2056	; 0x808
1a004514:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a004518:	f7ff f85c 	bl	1a0035d4 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00451c:	4629      	mov	r1, r5
1a00451e:	4620      	mov	r0, r4
1a004520:	f7ff f86a 	bl	1a0035f8 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a004524:	4903      	ldr	r1, [pc, #12]	; (1a004534 <i2cHardwareInit+0x2c>)
1a004526:	4620      	mov	r0, r4
1a004528:	f7ff f882 	bl	1a003630 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a00452c:	2001      	movs	r0, #1
1a00452e:	bd38      	pop	{r3, r4, r5, pc}
1a004530:	40086000 	.word	0x40086000
1a004534:	1a0036a9 	.word	0x1a0036a9

1a004538 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004538:	b108      	cbz	r0, 1a00453e <i2cInit+0x6>
      return FALSE;
1a00453a:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a00453c:	4770      	bx	lr
{
1a00453e:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a004540:	f7ff ffe2 	bl	1a004508 <i2cHardwareInit>
}
1a004544:	bd08      	pop	{r3, pc}

1a004546 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a004546:	e7fe      	b.n	1a004546 <errorOcurred>

1a004548 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a004548:	4770      	bx	lr
1a00454a:	Address 0x000000001a00454a is out of bounds.


1a00454c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00454c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00454e:	2400      	movs	r4, #0
1a004550:	e001      	b.n	1a004556 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004552:	3401      	adds	r4, #1
1a004554:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004556:	2c03      	cmp	r4, #3
1a004558:	d812      	bhi.n	1a004580 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00455a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00455c:	4b09      	ldr	r3, [pc, #36]	; (1a004584 <TIMER0_IRQHandler+0x38>)
1a00455e:	681a      	ldr	r2, [r3, #0]
1a004560:	f004 010f 	and.w	r1, r4, #15
1a004564:	2301      	movs	r3, #1
1a004566:	408b      	lsls	r3, r1
1a004568:	421a      	tst	r2, r3
1a00456a:	d0f2      	beq.n	1a004552 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00456c:	4b06      	ldr	r3, [pc, #24]	; (1a004588 <TIMER0_IRQHandler+0x3c>)
1a00456e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a004572:	2000      	movs	r0, #0
1a004574:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004576:	2301      	movs	r3, #1
1a004578:	40ab      	lsls	r3, r5
1a00457a:	4a02      	ldr	r2, [pc, #8]	; (1a004584 <TIMER0_IRQHandler+0x38>)
1a00457c:	6013      	str	r3, [r2, #0]
1a00457e:	e7e8      	b.n	1a004552 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004580:	bd38      	pop	{r3, r4, r5, pc}
1a004582:	bf00      	nop
1a004584:	40084000 	.word	0x40084000
1a004588:	10000040 	.word	0x10000040

1a00458c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00458c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00458e:	2400      	movs	r4, #0
1a004590:	e001      	b.n	1a004596 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004592:	3401      	adds	r4, #1
1a004594:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004596:	2c03      	cmp	r4, #3
1a004598:	d813      	bhi.n	1a0045c2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00459a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00459c:	4b09      	ldr	r3, [pc, #36]	; (1a0045c4 <TIMER1_IRQHandler+0x38>)
1a00459e:	681a      	ldr	r2, [r3, #0]
1a0045a0:	f004 010f 	and.w	r1, r4, #15
1a0045a4:	2301      	movs	r3, #1
1a0045a6:	408b      	lsls	r3, r1
1a0045a8:	421a      	tst	r2, r3
1a0045aa:	d0f2      	beq.n	1a004592 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0045ac:	1d23      	adds	r3, r4, #4
1a0045ae:	4a06      	ldr	r2, [pc, #24]	; (1a0045c8 <TIMER1_IRQHandler+0x3c>)
1a0045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0045b4:	2000      	movs	r0, #0
1a0045b6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0045b8:	2301      	movs	r3, #1
1a0045ba:	40ab      	lsls	r3, r5
1a0045bc:	4a01      	ldr	r2, [pc, #4]	; (1a0045c4 <TIMER1_IRQHandler+0x38>)
1a0045be:	6013      	str	r3, [r2, #0]
1a0045c0:	e7e7      	b.n	1a004592 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0045c2:	bd38      	pop	{r3, r4, r5, pc}
1a0045c4:	40085000 	.word	0x40085000
1a0045c8:	10000040 	.word	0x10000040

1a0045cc <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0045cc:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0045ce:	2400      	movs	r4, #0
1a0045d0:	e001      	b.n	1a0045d6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0045d2:	3401      	adds	r4, #1
1a0045d4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0045d6:	2c03      	cmp	r4, #3
1a0045d8:	d814      	bhi.n	1a004604 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0045da:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0045dc:	4b0a      	ldr	r3, [pc, #40]	; (1a004608 <TIMER2_IRQHandler+0x3c>)
1a0045de:	681a      	ldr	r2, [r3, #0]
1a0045e0:	f004 010f 	and.w	r1, r4, #15
1a0045e4:	2301      	movs	r3, #1
1a0045e6:	408b      	lsls	r3, r1
1a0045e8:	421a      	tst	r2, r3
1a0045ea:	d0f2      	beq.n	1a0045d2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0045ec:	f104 0308 	add.w	r3, r4, #8
1a0045f0:	4a06      	ldr	r2, [pc, #24]	; (1a00460c <TIMER2_IRQHandler+0x40>)
1a0045f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0045f6:	2000      	movs	r0, #0
1a0045f8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0045fa:	2301      	movs	r3, #1
1a0045fc:	40ab      	lsls	r3, r5
1a0045fe:	4a02      	ldr	r2, [pc, #8]	; (1a004608 <TIMER2_IRQHandler+0x3c>)
1a004600:	6013      	str	r3, [r2, #0]
1a004602:	e7e6      	b.n	1a0045d2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a004604:	bd38      	pop	{r3, r4, r5, pc}
1a004606:	bf00      	nop
1a004608:	400c3000 	.word	0x400c3000
1a00460c:	10000040 	.word	0x10000040

1a004610 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a004610:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004612:	2400      	movs	r4, #0
1a004614:	e001      	b.n	1a00461a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004616:	3401      	adds	r4, #1
1a004618:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00461a:	2c03      	cmp	r4, #3
1a00461c:	d814      	bhi.n	1a004648 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00461e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004620:	4b0a      	ldr	r3, [pc, #40]	; (1a00464c <TIMER3_IRQHandler+0x3c>)
1a004622:	681a      	ldr	r2, [r3, #0]
1a004624:	f004 010f 	and.w	r1, r4, #15
1a004628:	2301      	movs	r3, #1
1a00462a:	408b      	lsls	r3, r1
1a00462c:	421a      	tst	r2, r3
1a00462e:	d0f2      	beq.n	1a004616 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004630:	f104 030c 	add.w	r3, r4, #12
1a004634:	4a06      	ldr	r2, [pc, #24]	; (1a004650 <TIMER3_IRQHandler+0x40>)
1a004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00463a:	2000      	movs	r0, #0
1a00463c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00463e:	2301      	movs	r3, #1
1a004640:	40ab      	lsls	r3, r5
1a004642:	4a02      	ldr	r2, [pc, #8]	; (1a00464c <TIMER3_IRQHandler+0x3c>)
1a004644:	6013      	str	r3, [r2, #0]
1a004646:	e7e6      	b.n	1a004616 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004648:	bd38      	pop	{r3, r4, r5, pc}
1a00464a:	bf00      	nop
1a00464c:	400c4000 	.word	0x400c4000
1a004650:	10000040 	.word	0x10000040

1a004654 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004654:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a004656:	4d0b      	ldr	r5, [pc, #44]	; (1a004684 <gpioObtainPinInit+0x30>)
1a004658:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00465c:	182c      	adds	r4, r5, r0
1a00465e:	5628      	ldrsb	r0, [r5, r0]
1a004660:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004662:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a004666:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004668:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00466c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00466e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a004672:	9b02      	ldr	r3, [sp, #8]
1a004674:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004676:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00467a:	9b03      	ldr	r3, [sp, #12]
1a00467c:	701a      	strb	r2, [r3, #0]
}
1a00467e:	bc30      	pop	{r4, r5}
1a004680:	4770      	bx	lr
1a004682:	bf00      	nop
1a004684:	1a006070 	.word	0x1a006070

1a004688 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a004688:	b570      	push	{r4, r5, r6, lr}
1a00468a:	b084      	sub	sp, #16
1a00468c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00468e:	2300      	movs	r3, #0
1a004690:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004694:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004698:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00469c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0046a0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0046a4:	f10d 030b 	add.w	r3, sp, #11
1a0046a8:	9301      	str	r3, [sp, #4]
1a0046aa:	ab03      	add	r3, sp, #12
1a0046ac:	9300      	str	r3, [sp, #0]
1a0046ae:	f10d 030d 	add.w	r3, sp, #13
1a0046b2:	f10d 020e 	add.w	r2, sp, #14
1a0046b6:	f10d 010f 	add.w	r1, sp, #15
1a0046ba:	f7ff ffcb 	bl	1a004654 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0046be:	2c05      	cmp	r4, #5
1a0046c0:	f200 80a5 	bhi.w	1a00480e <gpioInit+0x186>
1a0046c4:	e8df f004 	tbb	[pc, r4]
1a0046c8:	45278109 	.word	0x45278109
1a0046cc:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0046ce:	4851      	ldr	r0, [pc, #324]	; (1a004814 <gpioInit+0x18c>)
1a0046d0:	f7ff fd3f 	bl	1a004152 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0046d4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0046d6:	b004      	add	sp, #16
1a0046d8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0046da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0046de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0046e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0046e6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0046ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0046ee:	494a      	ldr	r1, [pc, #296]	; (1a004818 <gpioInit+0x190>)
1a0046f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0046f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0046f8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0046fc:	2001      	movs	r0, #1
1a0046fe:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a004702:	4c44      	ldr	r4, [pc, #272]	; (1a004814 <gpioInit+0x18c>)
1a004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004708:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00470c:	ea22 0201 	bic.w	r2, r2, r1
1a004710:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004714:	e7df      	b.n	1a0046d6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004716:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00471a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00471e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004722:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004726:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00472a:	493b      	ldr	r1, [pc, #236]	; (1a004818 <gpioInit+0x190>)
1a00472c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004730:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004734:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004738:	2001      	movs	r0, #1
1a00473a:	fa00 f102 	lsl.w	r1, r0, r2
1a00473e:	4c35      	ldr	r4, [pc, #212]	; (1a004814 <gpioInit+0x18c>)
1a004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004744:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004748:	ea22 0201 	bic.w	r2, r2, r1
1a00474c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004750:	e7c1      	b.n	1a0046d6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004752:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004756:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00475a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00475e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a004762:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004766:	492c      	ldr	r1, [pc, #176]	; (1a004818 <gpioInit+0x190>)
1a004768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00476c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004770:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004774:	2001      	movs	r0, #1
1a004776:	fa00 f102 	lsl.w	r1, r0, r2
1a00477a:	4c26      	ldr	r4, [pc, #152]	; (1a004814 <gpioInit+0x18c>)
1a00477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004780:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004784:	ea22 0201 	bic.w	r2, r2, r1
1a004788:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00478c:	e7a3      	b.n	1a0046d6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00478e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004792:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004796:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00479a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00479e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0047a2:	491d      	ldr	r1, [pc, #116]	; (1a004818 <gpioInit+0x190>)
1a0047a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0047a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0047ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0047b0:	2001      	movs	r0, #1
1a0047b2:	fa00 f102 	lsl.w	r1, r0, r2
1a0047b6:	4c17      	ldr	r4, [pc, #92]	; (1a004814 <gpioInit+0x18c>)
1a0047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0047bc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0047c0:	ea22 0201 	bic.w	r2, r2, r1
1a0047c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0047c8:	e785      	b.n	1a0046d6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0047ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0047ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0047d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0047d6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0047da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0047de:	490e      	ldr	r1, [pc, #56]	; (1a004818 <gpioInit+0x190>)
1a0047e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0047e4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0047e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0047ec:	2001      	movs	r0, #1
1a0047ee:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0047f2:	4b08      	ldr	r3, [pc, #32]	; (1a004814 <gpioInit+0x18c>)
1a0047f4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0047f8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0047fc:	4331      	orrs	r1, r6
1a0047fe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004802:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004804:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004808:	2100      	movs	r1, #0
1a00480a:	5499      	strb	r1, [r3, r2]
1a00480c:	e763      	b.n	1a0046d6 <gpioInit+0x4e>
      ret_val = 0;
1a00480e:	2000      	movs	r0, #0
1a004810:	e761      	b.n	1a0046d6 <gpioInit+0x4e>
1a004812:	bf00      	nop
1a004814:	400f4000 	.word	0x400f4000
1a004818:	40086000 	.word	0x40086000

1a00481c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00481c:	b510      	push	{r4, lr}
1a00481e:	b084      	sub	sp, #16
1a004820:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004822:	2300      	movs	r3, #0
1a004824:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004828:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00482c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004830:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004834:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004838:	f10d 030b 	add.w	r3, sp, #11
1a00483c:	9301      	str	r3, [sp, #4]
1a00483e:	ab03      	add	r3, sp, #12
1a004840:	9300      	str	r3, [sp, #0]
1a004842:	f10d 030d 	add.w	r3, sp, #13
1a004846:	f10d 020e 	add.w	r2, sp, #14
1a00484a:	f10d 010f 	add.w	r1, sp, #15
1a00484e:	f7ff ff01 	bl	1a004654 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a004852:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004856:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00485a:	3400      	adds	r4, #0
1a00485c:	bf18      	it	ne
1a00485e:	2401      	movne	r4, #1
1a004860:	015b      	lsls	r3, r3, #5
1a004862:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004866:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00486a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a00486c:	2001      	movs	r0, #1
1a00486e:	b004      	add	sp, #16
1a004870:	bd10      	pop	{r4, pc}
1a004872:	Address 0x000000001a004872 is out of bounds.


1a004874 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004874:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a004876:	4b04      	ldr	r3, [pc, #16]	; (1a004888 <USB0_IRQHandler+0x14>)
1a004878:	681b      	ldr	r3, [r3, #0]
1a00487a:	681b      	ldr	r3, [r3, #0]
1a00487c:	68db      	ldr	r3, [r3, #12]
1a00487e:	4a03      	ldr	r2, [pc, #12]	; (1a00488c <USB0_IRQHandler+0x18>)
1a004880:	6810      	ldr	r0, [r2, #0]
1a004882:	4798      	blx	r3
}
1a004884:	bd08      	pop	{r3, pc}
1a004886:	bf00      	nop
1a004888:	10002c74 	.word	0x10002c74
1a00488c:	10002b9c 	.word	0x10002b9c

1a004890 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004890:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004892:	f7ff fb25 	bl	1a003ee0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004896:	4b18      	ldr	r3, [pc, #96]	; (1a0048f8 <boardInit+0x68>)
1a004898:	6818      	ldr	r0, [r3, #0]
1a00489a:	f7ff fcd1 	bl	1a004240 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00489e:	2105      	movs	r1, #5
1a0048a0:	2000      	movs	r0, #0
1a0048a2:	f7ff fef1 	bl	1a004688 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0048a6:	2100      	movs	r1, #0
1a0048a8:	2024      	movs	r0, #36	; 0x24
1a0048aa:	f7ff feed 	bl	1a004688 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0048ae:	2100      	movs	r1, #0
1a0048b0:	2025      	movs	r0, #37	; 0x25
1a0048b2:	f7ff fee9 	bl	1a004688 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0048b6:	2100      	movs	r1, #0
1a0048b8:	2026      	movs	r0, #38	; 0x26
1a0048ba:	f7ff fee5 	bl	1a004688 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0048be:	2100      	movs	r1, #0
1a0048c0:	2027      	movs	r0, #39	; 0x27
1a0048c2:	f7ff fee1 	bl	1a004688 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0048c6:	2101      	movs	r1, #1
1a0048c8:	2028      	movs	r0, #40	; 0x28
1a0048ca:	f7ff fedd 	bl	1a004688 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0048ce:	2101      	movs	r1, #1
1a0048d0:	2029      	movs	r0, #41	; 0x29
1a0048d2:	f7ff fed9 	bl	1a004688 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0048d6:	2101      	movs	r1, #1
1a0048d8:	202a      	movs	r0, #42	; 0x2a
1a0048da:	f7ff fed5 	bl	1a004688 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0048de:	2101      	movs	r1, #1
1a0048e0:	202b      	movs	r0, #43	; 0x2b
1a0048e2:	f7ff fed1 	bl	1a004688 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0048e6:	2101      	movs	r1, #1
1a0048e8:	202c      	movs	r0, #44	; 0x2c
1a0048ea:	f7ff fecd 	bl	1a004688 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0048ee:	2101      	movs	r1, #1
1a0048f0:	202d      	movs	r0, #45	; 0x2d
1a0048f2:	f7ff fec9 	bl	1a004688 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0048f6:	bd08      	pop	{r3, pc}
1a0048f8:	10002c70 	.word	0x10002c70

1a0048fc <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a0048fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004900:	4614      	mov	r4, r2
1a004902:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a004904:	3b02      	subs	r3, #2
1a004906:	b2db      	uxtb	r3, r3
1a004908:	2b22      	cmp	r3, #34	; 0x22
1a00490a:	d803      	bhi.n	1a004914 <int64ToString+0x18>
1a00490c:	4680      	mov	r8, r0
1a00490e:	4689      	mov	r9, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a004910:	4615      	mov	r5, r2
1a004912:	e005      	b.n	1a004920 <int64ToString+0x24>
      *result = '\0';
1a004914:	2000      	movs	r0, #0
1a004916:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a004918:	e034      	b.n	1a004984 <int64ToString+0x88>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a00491a:	4635      	mov	r5, r6
      value /= (int64_t)base;
1a00491c:	4680      	mov	r8, r0
1a00491e:	4689      	mov	r9, r1
1a004920:	fa5f f68a 	uxtb.w	r6, sl
1a004924:	2700      	movs	r7, #0
1a004926:	4632      	mov	r2, r6
1a004928:	463b      	mov	r3, r7
1a00492a:	4640      	mov	r0, r8
1a00492c:	4649      	mov	r1, r9
1a00492e:	f000 f873 	bl	1a004a18 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a004932:	fba6 bc00 	umull	fp, ip, r6, r0
1a004936:	ebb8 020b 	subs.w	r2, r8, fp
1a00493a:	f112 0b23 	adds.w	fp, r2, #35	; 0x23
1a00493e:	1c6e      	adds	r6, r5, #1
1a004940:	4b11      	ldr	r3, [pc, #68]	; (1a004988 <int64ToString+0x8c>)
1a004942:	eb0b 0203 	add.w	r2, fp, r3
1a004946:	7813      	ldrb	r3, [r2, #0]
1a004948:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00494a:	ea50 0301 	orrs.w	r3, r0, r1
1a00494e:	d1e4      	bne.n	1a00491a <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a004950:	f1b8 0f00 	cmp.w	r8, #0
1a004954:	f179 0300 	sbcs.w	r3, r9, #0
1a004958:	db03      	blt.n	1a004962 <int64ToString+0x66>
   *ptr-- = '\0';
1a00495a:	1e73      	subs	r3, r6, #1
1a00495c:	2200      	movs	r2, #0
1a00495e:	7032      	strb	r2, [r6, #0]
   while(ptr1 < ptr) {
1a004960:	e00d      	b.n	1a00497e <int64ToString+0x82>
   if (tmp_value < 0) *ptr++ = '-';
1a004962:	1cae      	adds	r6, r5, #2
1a004964:	232d      	movs	r3, #45	; 0x2d
1a004966:	706b      	strb	r3, [r5, #1]
1a004968:	e7f7      	b.n	1a00495a <int64ToString+0x5e>
      tmp_char = *ptr;
1a00496a:	461a      	mov	r2, r3
1a00496c:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a004970:	4621      	mov	r1, r4
1a004972:	f811 5b01 	ldrb.w	r5, [r1], #1
1a004976:	701d      	strb	r5, [r3, #0]
      *ptr1++ = tmp_char;
1a004978:	7020      	strb	r0, [r4, #0]
1a00497a:	460c      	mov	r4, r1
      *ptr--= *ptr1;
1a00497c:	4613      	mov	r3, r2
   while(ptr1 < ptr) {
1a00497e:	42a3      	cmp	r3, r4
1a004980:	d8f3      	bhi.n	1a00496a <int64ToString+0x6e>
   }
   return TRUE;
1a004982:	2001      	movs	r0, #1
}
1a004984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004988:	1a006158 	.word	0x1a006158

1a00498c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a00498c:	2301      	movs	r3, #1
1a00498e:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a004992:	4b01      	ldr	r3, [pc, #4]	; (1a004998 <clearInterrupt+0xc>)
1a004994:	6258      	str	r0, [r3, #36]	; 0x24
}
1a004996:	4770      	bx	lr
1a004998:	40087000 	.word	0x40087000

1a00499c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a00499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00499e:	4b12      	ldr	r3, [pc, #72]	; (1a0049e8 <serveInterrupt+0x4c>)
1a0049a0:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0049a2:	4b12      	ldr	r3, [pc, #72]	; (1a0049ec <serveInterrupt+0x50>)
1a0049a4:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0049a6:	2301      	movs	r3, #1
1a0049a8:	4083      	lsls	r3, r0
1a0049aa:	420b      	tst	r3, r1
1a0049ac:	d111      	bne.n	1a0049d2 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0049ae:	4910      	ldr	r1, [pc, #64]	; (1a0049f0 <serveInterrupt+0x54>)
1a0049b0:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0049b2:	4d10      	ldr	r5, [pc, #64]	; (1a0049f4 <serveInterrupt+0x58>)
1a0049b4:	0051      	lsls	r1, r2, #1
1a0049b6:	188f      	adds	r7, r1, r2
1a0049b8:	00fc      	lsls	r4, r7, #3
1a0049ba:	4627      	mov	r7, r4
1a0049bc:	442c      	add	r4, r5
1a0049be:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0049c0:	6864      	ldr	r4, [r4, #4]
1a0049c2:	1b36      	subs	r6, r6, r4
1a0049c4:	443d      	add	r5, r7
1a0049c6:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0049c8:	4a08      	ldr	r2, [pc, #32]	; (1a0049ec <serveInterrupt+0x50>)
1a0049ca:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0049cc:	f7ff ffde 	bl	1a00498c <clearInterrupt>
}
1a0049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0049d2:	4907      	ldr	r1, [pc, #28]	; (1a0049f0 <serveInterrupt+0x54>)
1a0049d4:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0049d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0049da:	00d1      	lsls	r1, r2, #3
1a0049dc:	4a05      	ldr	r2, [pc, #20]	; (1a0049f4 <serveInterrupt+0x58>)
1a0049de:	440a      	add	r2, r1
1a0049e0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0049e2:	4a02      	ldr	r2, [pc, #8]	; (1a0049ec <serveInterrupt+0x50>)
1a0049e4:	61d3      	str	r3, [r2, #28]
1a0049e6:	e7f1      	b.n	1a0049cc <serveInterrupt+0x30>
1a0049e8:	1a0061a0 	.word	0x1a0061a0
1a0049ec:	40087000 	.word	0x40087000
1a0049f0:	40084000 	.word	0x40084000
1a0049f4:	10000080 	.word	0x10000080

1a0049f8 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0049f8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0049fa:	2000      	movs	r0, #0
1a0049fc:	f7ff ffce 	bl	1a00499c <serveInterrupt>
}
1a004a00:	bd08      	pop	{r3, pc}

1a004a02 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a004a02:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a004a04:	2001      	movs	r0, #1
1a004a06:	f7ff ffc9 	bl	1a00499c <serveInterrupt>
}
1a004a0a:	bd08      	pop	{r3, pc}

1a004a0c <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a004a0c:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a004a0e:	2002      	movs	r0, #2
1a004a10:	f7ff ffc4 	bl	1a00499c <serveInterrupt>
}
1a004a14:	bd08      	pop	{r3, pc}
1a004a16:	Address 0x000000001a004a16 is out of bounds.


1a004a18 <__aeabi_ldivmod>:
1a004a18:	b97b      	cbnz	r3, 1a004a3a <__aeabi_ldivmod+0x22>
1a004a1a:	b972      	cbnz	r2, 1a004a3a <__aeabi_ldivmod+0x22>
1a004a1c:	2900      	cmp	r1, #0
1a004a1e:	bfbe      	ittt	lt
1a004a20:	2000      	movlt	r0, #0
1a004a22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a004a26:	e006      	blt.n	1a004a36 <__aeabi_ldivmod+0x1e>
1a004a28:	bf08      	it	eq
1a004a2a:	2800      	cmpeq	r0, #0
1a004a2c:	bf1c      	itt	ne
1a004a2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a004a32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004a36:	f000 b9bd 	b.w	1a004db4 <__aeabi_idiv0>
1a004a3a:	f1ad 0c08 	sub.w	ip, sp, #8
1a004a3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004a42:	2900      	cmp	r1, #0
1a004a44:	db09      	blt.n	1a004a5a <__aeabi_ldivmod+0x42>
1a004a46:	2b00      	cmp	r3, #0
1a004a48:	db1a      	blt.n	1a004a80 <__aeabi_ldivmod+0x68>
1a004a4a:	f000 f84d 	bl	1a004ae8 <__udivmoddi4>
1a004a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004a56:	b004      	add	sp, #16
1a004a58:	4770      	bx	lr
1a004a5a:	4240      	negs	r0, r0
1a004a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004a60:	2b00      	cmp	r3, #0
1a004a62:	db1b      	blt.n	1a004a9c <__aeabi_ldivmod+0x84>
1a004a64:	f000 f840 	bl	1a004ae8 <__udivmoddi4>
1a004a68:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004a70:	b004      	add	sp, #16
1a004a72:	4240      	negs	r0, r0
1a004a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004a78:	4252      	negs	r2, r2
1a004a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004a7e:	4770      	bx	lr
1a004a80:	4252      	negs	r2, r2
1a004a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004a86:	f000 f82f 	bl	1a004ae8 <__udivmoddi4>
1a004a8a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004a92:	b004      	add	sp, #16
1a004a94:	4240      	negs	r0, r0
1a004a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004a9a:	4770      	bx	lr
1a004a9c:	4252      	negs	r2, r2
1a004a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004aa2:	f000 f821 	bl	1a004ae8 <__udivmoddi4>
1a004aa6:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004aae:	b004      	add	sp, #16
1a004ab0:	4252      	negs	r2, r2
1a004ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004ab6:	4770      	bx	lr

1a004ab8 <__aeabi_uldivmod>:
1a004ab8:	b953      	cbnz	r3, 1a004ad0 <__aeabi_uldivmod+0x18>
1a004aba:	b94a      	cbnz	r2, 1a004ad0 <__aeabi_uldivmod+0x18>
1a004abc:	2900      	cmp	r1, #0
1a004abe:	bf08      	it	eq
1a004ac0:	2800      	cmpeq	r0, #0
1a004ac2:	bf1c      	itt	ne
1a004ac4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004ac8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004acc:	f000 b972 	b.w	1a004db4 <__aeabi_idiv0>
1a004ad0:	f1ad 0c08 	sub.w	ip, sp, #8
1a004ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004ad8:	f000 f806 	bl	1a004ae8 <__udivmoddi4>
1a004adc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004ae4:	b004      	add	sp, #16
1a004ae6:	4770      	bx	lr

1a004ae8 <__udivmoddi4>:
1a004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004aec:	9e08      	ldr	r6, [sp, #32]
1a004aee:	4604      	mov	r4, r0
1a004af0:	4688      	mov	r8, r1
1a004af2:	2b00      	cmp	r3, #0
1a004af4:	d14b      	bne.n	1a004b8e <__udivmoddi4+0xa6>
1a004af6:	428a      	cmp	r2, r1
1a004af8:	4615      	mov	r5, r2
1a004afa:	d967      	bls.n	1a004bcc <__udivmoddi4+0xe4>
1a004afc:	fab2 f282 	clz	r2, r2
1a004b00:	b14a      	cbz	r2, 1a004b16 <__udivmoddi4+0x2e>
1a004b02:	f1c2 0720 	rsb	r7, r2, #32
1a004b06:	fa01 f302 	lsl.w	r3, r1, r2
1a004b0a:	fa20 f707 	lsr.w	r7, r0, r7
1a004b0e:	4095      	lsls	r5, r2
1a004b10:	ea47 0803 	orr.w	r8, r7, r3
1a004b14:	4094      	lsls	r4, r2
1a004b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004b1a:	0c23      	lsrs	r3, r4, #16
1a004b1c:	fbb8 f7fe 	udiv	r7, r8, lr
1a004b20:	fa1f fc85 	uxth.w	ip, r5
1a004b24:	fb0e 8817 	mls	r8, lr, r7, r8
1a004b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004b2c:	fb07 f10c 	mul.w	r1, r7, ip
1a004b30:	4299      	cmp	r1, r3
1a004b32:	d909      	bls.n	1a004b48 <__udivmoddi4+0x60>
1a004b34:	18eb      	adds	r3, r5, r3
1a004b36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004b3a:	f080 811b 	bcs.w	1a004d74 <__udivmoddi4+0x28c>
1a004b3e:	4299      	cmp	r1, r3
1a004b40:	f240 8118 	bls.w	1a004d74 <__udivmoddi4+0x28c>
1a004b44:	3f02      	subs	r7, #2
1a004b46:	442b      	add	r3, r5
1a004b48:	1a5b      	subs	r3, r3, r1
1a004b4a:	b2a4      	uxth	r4, r4
1a004b4c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004b50:	fb0e 3310 	mls	r3, lr, r0, r3
1a004b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004b58:	fb00 fc0c 	mul.w	ip, r0, ip
1a004b5c:	45a4      	cmp	ip, r4
1a004b5e:	d909      	bls.n	1a004b74 <__udivmoddi4+0x8c>
1a004b60:	192c      	adds	r4, r5, r4
1a004b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004b66:	f080 8107 	bcs.w	1a004d78 <__udivmoddi4+0x290>
1a004b6a:	45a4      	cmp	ip, r4
1a004b6c:	f240 8104 	bls.w	1a004d78 <__udivmoddi4+0x290>
1a004b70:	3802      	subs	r0, #2
1a004b72:	442c      	add	r4, r5
1a004b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004b78:	eba4 040c 	sub.w	r4, r4, ip
1a004b7c:	2700      	movs	r7, #0
1a004b7e:	b11e      	cbz	r6, 1a004b88 <__udivmoddi4+0xa0>
1a004b80:	40d4      	lsrs	r4, r2
1a004b82:	2300      	movs	r3, #0
1a004b84:	e9c6 4300 	strd	r4, r3, [r6]
1a004b88:	4639      	mov	r1, r7
1a004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004b8e:	428b      	cmp	r3, r1
1a004b90:	d909      	bls.n	1a004ba6 <__udivmoddi4+0xbe>
1a004b92:	2e00      	cmp	r6, #0
1a004b94:	f000 80eb 	beq.w	1a004d6e <__udivmoddi4+0x286>
1a004b98:	2700      	movs	r7, #0
1a004b9a:	e9c6 0100 	strd	r0, r1, [r6]
1a004b9e:	4638      	mov	r0, r7
1a004ba0:	4639      	mov	r1, r7
1a004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004ba6:	fab3 f783 	clz	r7, r3
1a004baa:	2f00      	cmp	r7, #0
1a004bac:	d147      	bne.n	1a004c3e <__udivmoddi4+0x156>
1a004bae:	428b      	cmp	r3, r1
1a004bb0:	d302      	bcc.n	1a004bb8 <__udivmoddi4+0xd0>
1a004bb2:	4282      	cmp	r2, r0
1a004bb4:	f200 80fa 	bhi.w	1a004dac <__udivmoddi4+0x2c4>
1a004bb8:	1a84      	subs	r4, r0, r2
1a004bba:	eb61 0303 	sbc.w	r3, r1, r3
1a004bbe:	2001      	movs	r0, #1
1a004bc0:	4698      	mov	r8, r3
1a004bc2:	2e00      	cmp	r6, #0
1a004bc4:	d0e0      	beq.n	1a004b88 <__udivmoddi4+0xa0>
1a004bc6:	e9c6 4800 	strd	r4, r8, [r6]
1a004bca:	e7dd      	b.n	1a004b88 <__udivmoddi4+0xa0>
1a004bcc:	b902      	cbnz	r2, 1a004bd0 <__udivmoddi4+0xe8>
1a004bce:	deff      	udf	#255	; 0xff
1a004bd0:	fab2 f282 	clz	r2, r2
1a004bd4:	2a00      	cmp	r2, #0
1a004bd6:	f040 808f 	bne.w	1a004cf8 <__udivmoddi4+0x210>
1a004bda:	1b49      	subs	r1, r1, r5
1a004bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004be0:	fa1f f885 	uxth.w	r8, r5
1a004be4:	2701      	movs	r7, #1
1a004be6:	fbb1 fcfe 	udiv	ip, r1, lr
1a004bea:	0c23      	lsrs	r3, r4, #16
1a004bec:	fb0e 111c 	mls	r1, lr, ip, r1
1a004bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004bf4:	fb08 f10c 	mul.w	r1, r8, ip
1a004bf8:	4299      	cmp	r1, r3
1a004bfa:	d907      	bls.n	1a004c0c <__udivmoddi4+0x124>
1a004bfc:	18eb      	adds	r3, r5, r3
1a004bfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004c02:	d202      	bcs.n	1a004c0a <__udivmoddi4+0x122>
1a004c04:	4299      	cmp	r1, r3
1a004c06:	f200 80cd 	bhi.w	1a004da4 <__udivmoddi4+0x2bc>
1a004c0a:	4684      	mov	ip, r0
1a004c0c:	1a59      	subs	r1, r3, r1
1a004c0e:	b2a3      	uxth	r3, r4
1a004c10:	fbb1 f0fe 	udiv	r0, r1, lr
1a004c14:	fb0e 1410 	mls	r4, lr, r0, r1
1a004c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004c1c:	fb08 f800 	mul.w	r8, r8, r0
1a004c20:	45a0      	cmp	r8, r4
1a004c22:	d907      	bls.n	1a004c34 <__udivmoddi4+0x14c>
1a004c24:	192c      	adds	r4, r5, r4
1a004c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004c2a:	d202      	bcs.n	1a004c32 <__udivmoddi4+0x14a>
1a004c2c:	45a0      	cmp	r8, r4
1a004c2e:	f200 80b6 	bhi.w	1a004d9e <__udivmoddi4+0x2b6>
1a004c32:	4618      	mov	r0, r3
1a004c34:	eba4 0408 	sub.w	r4, r4, r8
1a004c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004c3c:	e79f      	b.n	1a004b7e <__udivmoddi4+0x96>
1a004c3e:	f1c7 0c20 	rsb	ip, r7, #32
1a004c42:	40bb      	lsls	r3, r7
1a004c44:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004c48:	ea4e 0e03 	orr.w	lr, lr, r3
1a004c4c:	fa01 f407 	lsl.w	r4, r1, r7
1a004c50:	fa20 f50c 	lsr.w	r5, r0, ip
1a004c54:	fa21 f30c 	lsr.w	r3, r1, ip
1a004c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004c5c:	4325      	orrs	r5, r4
1a004c5e:	fbb3 f9f8 	udiv	r9, r3, r8
1a004c62:	0c2c      	lsrs	r4, r5, #16
1a004c64:	fb08 3319 	mls	r3, r8, r9, r3
1a004c68:	fa1f fa8e 	uxth.w	sl, lr
1a004c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004c70:	fb09 f40a 	mul.w	r4, r9, sl
1a004c74:	429c      	cmp	r4, r3
1a004c76:	fa02 f207 	lsl.w	r2, r2, r7
1a004c7a:	fa00 f107 	lsl.w	r1, r0, r7
1a004c7e:	d90b      	bls.n	1a004c98 <__udivmoddi4+0x1b0>
1a004c80:	eb1e 0303 	adds.w	r3, lr, r3
1a004c84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004c88:	f080 8087 	bcs.w	1a004d9a <__udivmoddi4+0x2b2>
1a004c8c:	429c      	cmp	r4, r3
1a004c8e:	f240 8084 	bls.w	1a004d9a <__udivmoddi4+0x2b2>
1a004c92:	f1a9 0902 	sub.w	r9, r9, #2
1a004c96:	4473      	add	r3, lr
1a004c98:	1b1b      	subs	r3, r3, r4
1a004c9a:	b2ad      	uxth	r5, r5
1a004c9c:	fbb3 f0f8 	udiv	r0, r3, r8
1a004ca0:	fb08 3310 	mls	r3, r8, r0, r3
1a004ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004ca8:	fb00 fa0a 	mul.w	sl, r0, sl
1a004cac:	45a2      	cmp	sl, r4
1a004cae:	d908      	bls.n	1a004cc2 <__udivmoddi4+0x1da>
1a004cb0:	eb1e 0404 	adds.w	r4, lr, r4
1a004cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004cb8:	d26b      	bcs.n	1a004d92 <__udivmoddi4+0x2aa>
1a004cba:	45a2      	cmp	sl, r4
1a004cbc:	d969      	bls.n	1a004d92 <__udivmoddi4+0x2aa>
1a004cbe:	3802      	subs	r0, #2
1a004cc0:	4474      	add	r4, lr
1a004cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004cc6:	fba0 8902 	umull	r8, r9, r0, r2
1a004cca:	eba4 040a 	sub.w	r4, r4, sl
1a004cce:	454c      	cmp	r4, r9
1a004cd0:	46c2      	mov	sl, r8
1a004cd2:	464b      	mov	r3, r9
1a004cd4:	d354      	bcc.n	1a004d80 <__udivmoddi4+0x298>
1a004cd6:	d051      	beq.n	1a004d7c <__udivmoddi4+0x294>
1a004cd8:	2e00      	cmp	r6, #0
1a004cda:	d069      	beq.n	1a004db0 <__udivmoddi4+0x2c8>
1a004cdc:	ebb1 050a 	subs.w	r5, r1, sl
1a004ce0:	eb64 0403 	sbc.w	r4, r4, r3
1a004ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004ce8:	40fd      	lsrs	r5, r7
1a004cea:	40fc      	lsrs	r4, r7
1a004cec:	ea4c 0505 	orr.w	r5, ip, r5
1a004cf0:	e9c6 5400 	strd	r5, r4, [r6]
1a004cf4:	2700      	movs	r7, #0
1a004cf6:	e747      	b.n	1a004b88 <__udivmoddi4+0xa0>
1a004cf8:	f1c2 0320 	rsb	r3, r2, #32
1a004cfc:	fa20 f703 	lsr.w	r7, r0, r3
1a004d00:	4095      	lsls	r5, r2
1a004d02:	fa01 f002 	lsl.w	r0, r1, r2
1a004d06:	fa21 f303 	lsr.w	r3, r1, r3
1a004d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d0e:	4338      	orrs	r0, r7
1a004d10:	0c01      	lsrs	r1, r0, #16
1a004d12:	fbb3 f7fe 	udiv	r7, r3, lr
1a004d16:	fa1f f885 	uxth.w	r8, r5
1a004d1a:	fb0e 3317 	mls	r3, lr, r7, r3
1a004d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d22:	fb07 f308 	mul.w	r3, r7, r8
1a004d26:	428b      	cmp	r3, r1
1a004d28:	fa04 f402 	lsl.w	r4, r4, r2
1a004d2c:	d907      	bls.n	1a004d3e <__udivmoddi4+0x256>
1a004d2e:	1869      	adds	r1, r5, r1
1a004d30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004d34:	d22f      	bcs.n	1a004d96 <__udivmoddi4+0x2ae>
1a004d36:	428b      	cmp	r3, r1
1a004d38:	d92d      	bls.n	1a004d96 <__udivmoddi4+0x2ae>
1a004d3a:	3f02      	subs	r7, #2
1a004d3c:	4429      	add	r1, r5
1a004d3e:	1acb      	subs	r3, r1, r3
1a004d40:	b281      	uxth	r1, r0
1a004d42:	fbb3 f0fe 	udiv	r0, r3, lr
1a004d46:	fb0e 3310 	mls	r3, lr, r0, r3
1a004d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d4e:	fb00 f308 	mul.w	r3, r0, r8
1a004d52:	428b      	cmp	r3, r1
1a004d54:	d907      	bls.n	1a004d66 <__udivmoddi4+0x27e>
1a004d56:	1869      	adds	r1, r5, r1
1a004d58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004d5c:	d217      	bcs.n	1a004d8e <__udivmoddi4+0x2a6>
1a004d5e:	428b      	cmp	r3, r1
1a004d60:	d915      	bls.n	1a004d8e <__udivmoddi4+0x2a6>
1a004d62:	3802      	subs	r0, #2
1a004d64:	4429      	add	r1, r5
1a004d66:	1ac9      	subs	r1, r1, r3
1a004d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004d6c:	e73b      	b.n	1a004be6 <__udivmoddi4+0xfe>
1a004d6e:	4637      	mov	r7, r6
1a004d70:	4630      	mov	r0, r6
1a004d72:	e709      	b.n	1a004b88 <__udivmoddi4+0xa0>
1a004d74:	4607      	mov	r7, r0
1a004d76:	e6e7      	b.n	1a004b48 <__udivmoddi4+0x60>
1a004d78:	4618      	mov	r0, r3
1a004d7a:	e6fb      	b.n	1a004b74 <__udivmoddi4+0x8c>
1a004d7c:	4541      	cmp	r1, r8
1a004d7e:	d2ab      	bcs.n	1a004cd8 <__udivmoddi4+0x1f0>
1a004d80:	ebb8 0a02 	subs.w	sl, r8, r2
1a004d84:	eb69 020e 	sbc.w	r2, r9, lr
1a004d88:	3801      	subs	r0, #1
1a004d8a:	4613      	mov	r3, r2
1a004d8c:	e7a4      	b.n	1a004cd8 <__udivmoddi4+0x1f0>
1a004d8e:	4660      	mov	r0, ip
1a004d90:	e7e9      	b.n	1a004d66 <__udivmoddi4+0x27e>
1a004d92:	4618      	mov	r0, r3
1a004d94:	e795      	b.n	1a004cc2 <__udivmoddi4+0x1da>
1a004d96:	4667      	mov	r7, ip
1a004d98:	e7d1      	b.n	1a004d3e <__udivmoddi4+0x256>
1a004d9a:	4681      	mov	r9, r0
1a004d9c:	e77c      	b.n	1a004c98 <__udivmoddi4+0x1b0>
1a004d9e:	3802      	subs	r0, #2
1a004da0:	442c      	add	r4, r5
1a004da2:	e747      	b.n	1a004c34 <__udivmoddi4+0x14c>
1a004da4:	f1ac 0c02 	sub.w	ip, ip, #2
1a004da8:	442b      	add	r3, r5
1a004daa:	e72f      	b.n	1a004c0c <__udivmoddi4+0x124>
1a004dac:	4638      	mov	r0, r7
1a004dae:	e708      	b.n	1a004bc2 <__udivmoddi4+0xda>
1a004db0:	4637      	mov	r7, r6
1a004db2:	e6e9      	b.n	1a004b88 <__udivmoddi4+0xa0>

1a004db4 <__aeabi_idiv0>:
1a004db4:	4770      	bx	lr
1a004db6:	bf00      	nop

1a004db8 <__sflush_r>:
1a004db8:	898a      	ldrh	r2, [r1, #12]
1a004dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004dbe:	4605      	mov	r5, r0
1a004dc0:	0710      	lsls	r0, r2, #28
1a004dc2:	460c      	mov	r4, r1
1a004dc4:	d458      	bmi.n	1a004e78 <__sflush_r+0xc0>
1a004dc6:	684b      	ldr	r3, [r1, #4]
1a004dc8:	2b00      	cmp	r3, #0
1a004dca:	dc05      	bgt.n	1a004dd8 <__sflush_r+0x20>
1a004dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004dce:	2b00      	cmp	r3, #0
1a004dd0:	dc02      	bgt.n	1a004dd8 <__sflush_r+0x20>
1a004dd2:	2000      	movs	r0, #0
1a004dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004dda:	2e00      	cmp	r6, #0
1a004ddc:	d0f9      	beq.n	1a004dd2 <__sflush_r+0x1a>
1a004dde:	2300      	movs	r3, #0
1a004de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004de4:	682f      	ldr	r7, [r5, #0]
1a004de6:	6a21      	ldr	r1, [r4, #32]
1a004de8:	602b      	str	r3, [r5, #0]
1a004dea:	d032      	beq.n	1a004e52 <__sflush_r+0x9a>
1a004dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004dee:	89a3      	ldrh	r3, [r4, #12]
1a004df0:	075a      	lsls	r2, r3, #29
1a004df2:	d505      	bpl.n	1a004e00 <__sflush_r+0x48>
1a004df4:	6863      	ldr	r3, [r4, #4]
1a004df6:	1ac0      	subs	r0, r0, r3
1a004df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004dfa:	b10b      	cbz	r3, 1a004e00 <__sflush_r+0x48>
1a004dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004dfe:	1ac0      	subs	r0, r0, r3
1a004e00:	2300      	movs	r3, #0
1a004e02:	4602      	mov	r2, r0
1a004e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004e06:	6a21      	ldr	r1, [r4, #32]
1a004e08:	4628      	mov	r0, r5
1a004e0a:	47b0      	blx	r6
1a004e0c:	1c43      	adds	r3, r0, #1
1a004e0e:	89a3      	ldrh	r3, [r4, #12]
1a004e10:	d106      	bne.n	1a004e20 <__sflush_r+0x68>
1a004e12:	6829      	ldr	r1, [r5, #0]
1a004e14:	291d      	cmp	r1, #29
1a004e16:	d848      	bhi.n	1a004eaa <__sflush_r+0xf2>
1a004e18:	4a29      	ldr	r2, [pc, #164]	; (1a004ec0 <__sflush_r+0x108>)
1a004e1a:	40ca      	lsrs	r2, r1
1a004e1c:	07d6      	lsls	r6, r2, #31
1a004e1e:	d544      	bpl.n	1a004eaa <__sflush_r+0xf2>
1a004e20:	2200      	movs	r2, #0
1a004e22:	6062      	str	r2, [r4, #4]
1a004e24:	04d9      	lsls	r1, r3, #19
1a004e26:	6922      	ldr	r2, [r4, #16]
1a004e28:	6022      	str	r2, [r4, #0]
1a004e2a:	d504      	bpl.n	1a004e36 <__sflush_r+0x7e>
1a004e2c:	1c42      	adds	r2, r0, #1
1a004e2e:	d101      	bne.n	1a004e34 <__sflush_r+0x7c>
1a004e30:	682b      	ldr	r3, [r5, #0]
1a004e32:	b903      	cbnz	r3, 1a004e36 <__sflush_r+0x7e>
1a004e34:	6560      	str	r0, [r4, #84]	; 0x54
1a004e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004e38:	602f      	str	r7, [r5, #0]
1a004e3a:	2900      	cmp	r1, #0
1a004e3c:	d0c9      	beq.n	1a004dd2 <__sflush_r+0x1a>
1a004e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004e42:	4299      	cmp	r1, r3
1a004e44:	d002      	beq.n	1a004e4c <__sflush_r+0x94>
1a004e46:	4628      	mov	r0, r5
1a004e48:	f000 f968 	bl	1a00511c <_free_r>
1a004e4c:	2000      	movs	r0, #0
1a004e4e:	6360      	str	r0, [r4, #52]	; 0x34
1a004e50:	e7c0      	b.n	1a004dd4 <__sflush_r+0x1c>
1a004e52:	2301      	movs	r3, #1
1a004e54:	4628      	mov	r0, r5
1a004e56:	47b0      	blx	r6
1a004e58:	1c41      	adds	r1, r0, #1
1a004e5a:	d1c8      	bne.n	1a004dee <__sflush_r+0x36>
1a004e5c:	682b      	ldr	r3, [r5, #0]
1a004e5e:	2b00      	cmp	r3, #0
1a004e60:	d0c5      	beq.n	1a004dee <__sflush_r+0x36>
1a004e62:	2b1d      	cmp	r3, #29
1a004e64:	d001      	beq.n	1a004e6a <__sflush_r+0xb2>
1a004e66:	2b16      	cmp	r3, #22
1a004e68:	d101      	bne.n	1a004e6e <__sflush_r+0xb6>
1a004e6a:	602f      	str	r7, [r5, #0]
1a004e6c:	e7b1      	b.n	1a004dd2 <__sflush_r+0x1a>
1a004e6e:	89a3      	ldrh	r3, [r4, #12]
1a004e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e74:	81a3      	strh	r3, [r4, #12]
1a004e76:	e7ad      	b.n	1a004dd4 <__sflush_r+0x1c>
1a004e78:	690f      	ldr	r7, [r1, #16]
1a004e7a:	2f00      	cmp	r7, #0
1a004e7c:	d0a9      	beq.n	1a004dd2 <__sflush_r+0x1a>
1a004e7e:	0793      	lsls	r3, r2, #30
1a004e80:	680e      	ldr	r6, [r1, #0]
1a004e82:	bf08      	it	eq
1a004e84:	694b      	ldreq	r3, [r1, #20]
1a004e86:	600f      	str	r7, [r1, #0]
1a004e88:	bf18      	it	ne
1a004e8a:	2300      	movne	r3, #0
1a004e8c:	eba6 0807 	sub.w	r8, r6, r7
1a004e90:	608b      	str	r3, [r1, #8]
1a004e92:	f1b8 0f00 	cmp.w	r8, #0
1a004e96:	dd9c      	ble.n	1a004dd2 <__sflush_r+0x1a>
1a004e98:	4643      	mov	r3, r8
1a004e9a:	463a      	mov	r2, r7
1a004e9c:	6a21      	ldr	r1, [r4, #32]
1a004e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004ea0:	4628      	mov	r0, r5
1a004ea2:	47b0      	blx	r6
1a004ea4:	2800      	cmp	r0, #0
1a004ea6:	dc06      	bgt.n	1a004eb6 <__sflush_r+0xfe>
1a004ea8:	89a3      	ldrh	r3, [r4, #12]
1a004eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004eae:	81a3      	strh	r3, [r4, #12]
1a004eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004eb4:	e78e      	b.n	1a004dd4 <__sflush_r+0x1c>
1a004eb6:	4407      	add	r7, r0
1a004eb8:	eba8 0800 	sub.w	r8, r8, r0
1a004ebc:	e7e9      	b.n	1a004e92 <__sflush_r+0xda>
1a004ebe:	bf00      	nop
1a004ec0:	20400001 	.word	0x20400001

1a004ec4 <_fflush_r>:
1a004ec4:	b538      	push	{r3, r4, r5, lr}
1a004ec6:	690b      	ldr	r3, [r1, #16]
1a004ec8:	4605      	mov	r5, r0
1a004eca:	460c      	mov	r4, r1
1a004ecc:	b1db      	cbz	r3, 1a004f06 <_fflush_r+0x42>
1a004ece:	b118      	cbz	r0, 1a004ed8 <_fflush_r+0x14>
1a004ed0:	6983      	ldr	r3, [r0, #24]
1a004ed2:	b90b      	cbnz	r3, 1a004ed8 <_fflush_r+0x14>
1a004ed4:	f000 f860 	bl	1a004f98 <__sinit>
1a004ed8:	4b0c      	ldr	r3, [pc, #48]	; (1a004f0c <_fflush_r+0x48>)
1a004eda:	429c      	cmp	r4, r3
1a004edc:	d109      	bne.n	1a004ef2 <_fflush_r+0x2e>
1a004ede:	686c      	ldr	r4, [r5, #4]
1a004ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ee4:	b17b      	cbz	r3, 1a004f06 <_fflush_r+0x42>
1a004ee6:	4621      	mov	r1, r4
1a004ee8:	4628      	mov	r0, r5
1a004eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004eee:	f7ff bf63 	b.w	1a004db8 <__sflush_r>
1a004ef2:	4b07      	ldr	r3, [pc, #28]	; (1a004f10 <_fflush_r+0x4c>)
1a004ef4:	429c      	cmp	r4, r3
1a004ef6:	d101      	bne.n	1a004efc <_fflush_r+0x38>
1a004ef8:	68ac      	ldr	r4, [r5, #8]
1a004efa:	e7f1      	b.n	1a004ee0 <_fflush_r+0x1c>
1a004efc:	4b05      	ldr	r3, [pc, #20]	; (1a004f14 <_fflush_r+0x50>)
1a004efe:	429c      	cmp	r4, r3
1a004f00:	bf08      	it	eq
1a004f02:	68ec      	ldreq	r4, [r5, #12]
1a004f04:	e7ec      	b.n	1a004ee0 <_fflush_r+0x1c>
1a004f06:	2000      	movs	r0, #0
1a004f08:	bd38      	pop	{r3, r4, r5, pc}
1a004f0a:	bf00      	nop
1a004f0c:	1a0061c4 	.word	0x1a0061c4
1a004f10:	1a0061e4 	.word	0x1a0061e4
1a004f14:	1a0061a4 	.word	0x1a0061a4

1a004f18 <std>:
1a004f18:	2300      	movs	r3, #0
1a004f1a:	b510      	push	{r4, lr}
1a004f1c:	4604      	mov	r4, r0
1a004f1e:	e9c0 3300 	strd	r3, r3, [r0]
1a004f22:	6083      	str	r3, [r0, #8]
1a004f24:	8181      	strh	r1, [r0, #12]
1a004f26:	6643      	str	r3, [r0, #100]	; 0x64
1a004f28:	81c2      	strh	r2, [r0, #14]
1a004f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004f2e:	6183      	str	r3, [r0, #24]
1a004f30:	4619      	mov	r1, r3
1a004f32:	2208      	movs	r2, #8
1a004f34:	305c      	adds	r0, #92	; 0x5c
1a004f36:	f000 f8e8 	bl	1a00510a <memset>
1a004f3a:	4b05      	ldr	r3, [pc, #20]	; (1a004f50 <std+0x38>)
1a004f3c:	6263      	str	r3, [r4, #36]	; 0x24
1a004f3e:	4b05      	ldr	r3, [pc, #20]	; (1a004f54 <std+0x3c>)
1a004f40:	62a3      	str	r3, [r4, #40]	; 0x28
1a004f42:	4b05      	ldr	r3, [pc, #20]	; (1a004f58 <std+0x40>)
1a004f44:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004f46:	4b05      	ldr	r3, [pc, #20]	; (1a004f5c <std+0x44>)
1a004f48:	6224      	str	r4, [r4, #32]
1a004f4a:	6323      	str	r3, [r4, #48]	; 0x30
1a004f4c:	bd10      	pop	{r4, pc}
1a004f4e:	bf00      	nop
1a004f50:	1a005365 	.word	0x1a005365
1a004f54:	1a005387 	.word	0x1a005387
1a004f58:	1a0053bf 	.word	0x1a0053bf
1a004f5c:	1a0053e3 	.word	0x1a0053e3

1a004f60 <_cleanup_r>:
1a004f60:	4901      	ldr	r1, [pc, #4]	; (1a004f68 <_cleanup_r+0x8>)
1a004f62:	f000 b885 	b.w	1a005070 <_fwalk_reent>
1a004f66:	bf00      	nop
1a004f68:	1a004ec5 	.word	0x1a004ec5

1a004f6c <__sfmoreglue>:
1a004f6c:	b570      	push	{r4, r5, r6, lr}
1a004f6e:	1e4a      	subs	r2, r1, #1
1a004f70:	2568      	movs	r5, #104	; 0x68
1a004f72:	4355      	muls	r5, r2
1a004f74:	460e      	mov	r6, r1
1a004f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004f7a:	f000 f91d 	bl	1a0051b8 <_malloc_r>
1a004f7e:	4604      	mov	r4, r0
1a004f80:	b140      	cbz	r0, 1a004f94 <__sfmoreglue+0x28>
1a004f82:	2100      	movs	r1, #0
1a004f84:	e9c0 1600 	strd	r1, r6, [r0]
1a004f88:	300c      	adds	r0, #12
1a004f8a:	60a0      	str	r0, [r4, #8]
1a004f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004f90:	f000 f8bb 	bl	1a00510a <memset>
1a004f94:	4620      	mov	r0, r4
1a004f96:	bd70      	pop	{r4, r5, r6, pc}

1a004f98 <__sinit>:
1a004f98:	6983      	ldr	r3, [r0, #24]
1a004f9a:	b510      	push	{r4, lr}
1a004f9c:	4604      	mov	r4, r0
1a004f9e:	bb33      	cbnz	r3, 1a004fee <__sinit+0x56>
1a004fa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a004fa4:	6503      	str	r3, [r0, #80]	; 0x50
1a004fa6:	4b12      	ldr	r3, [pc, #72]	; (1a004ff0 <__sinit+0x58>)
1a004fa8:	4a12      	ldr	r2, [pc, #72]	; (1a004ff4 <__sinit+0x5c>)
1a004faa:	681b      	ldr	r3, [r3, #0]
1a004fac:	6282      	str	r2, [r0, #40]	; 0x28
1a004fae:	4298      	cmp	r0, r3
1a004fb0:	bf04      	itt	eq
1a004fb2:	2301      	moveq	r3, #1
1a004fb4:	6183      	streq	r3, [r0, #24]
1a004fb6:	f000 f81f 	bl	1a004ff8 <__sfp>
1a004fba:	6060      	str	r0, [r4, #4]
1a004fbc:	4620      	mov	r0, r4
1a004fbe:	f000 f81b 	bl	1a004ff8 <__sfp>
1a004fc2:	60a0      	str	r0, [r4, #8]
1a004fc4:	4620      	mov	r0, r4
1a004fc6:	f000 f817 	bl	1a004ff8 <__sfp>
1a004fca:	2200      	movs	r2, #0
1a004fcc:	60e0      	str	r0, [r4, #12]
1a004fce:	2104      	movs	r1, #4
1a004fd0:	6860      	ldr	r0, [r4, #4]
1a004fd2:	f7ff ffa1 	bl	1a004f18 <std>
1a004fd6:	2201      	movs	r2, #1
1a004fd8:	2109      	movs	r1, #9
1a004fda:	68a0      	ldr	r0, [r4, #8]
1a004fdc:	f7ff ff9c 	bl	1a004f18 <std>
1a004fe0:	2202      	movs	r2, #2
1a004fe2:	2112      	movs	r1, #18
1a004fe4:	68e0      	ldr	r0, [r4, #12]
1a004fe6:	f7ff ff97 	bl	1a004f18 <std>
1a004fea:	2301      	movs	r3, #1
1a004fec:	61a3      	str	r3, [r4, #24]
1a004fee:	bd10      	pop	{r4, pc}
1a004ff0:	1a006204 	.word	0x1a006204
1a004ff4:	1a004f61 	.word	0x1a004f61

1a004ff8 <__sfp>:
1a004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004ffa:	4b1b      	ldr	r3, [pc, #108]	; (1a005068 <__sfp+0x70>)
1a004ffc:	681e      	ldr	r6, [r3, #0]
1a004ffe:	69b3      	ldr	r3, [r6, #24]
1a005000:	4607      	mov	r7, r0
1a005002:	b913      	cbnz	r3, 1a00500a <__sfp+0x12>
1a005004:	4630      	mov	r0, r6
1a005006:	f7ff ffc7 	bl	1a004f98 <__sinit>
1a00500a:	3648      	adds	r6, #72	; 0x48
1a00500c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005010:	3b01      	subs	r3, #1
1a005012:	d503      	bpl.n	1a00501c <__sfp+0x24>
1a005014:	6833      	ldr	r3, [r6, #0]
1a005016:	b133      	cbz	r3, 1a005026 <__sfp+0x2e>
1a005018:	6836      	ldr	r6, [r6, #0]
1a00501a:	e7f7      	b.n	1a00500c <__sfp+0x14>
1a00501c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005020:	b16d      	cbz	r5, 1a00503e <__sfp+0x46>
1a005022:	3468      	adds	r4, #104	; 0x68
1a005024:	e7f4      	b.n	1a005010 <__sfp+0x18>
1a005026:	2104      	movs	r1, #4
1a005028:	4638      	mov	r0, r7
1a00502a:	f7ff ff9f 	bl	1a004f6c <__sfmoreglue>
1a00502e:	6030      	str	r0, [r6, #0]
1a005030:	2800      	cmp	r0, #0
1a005032:	d1f1      	bne.n	1a005018 <__sfp+0x20>
1a005034:	230c      	movs	r3, #12
1a005036:	603b      	str	r3, [r7, #0]
1a005038:	4604      	mov	r4, r0
1a00503a:	4620      	mov	r0, r4
1a00503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00503e:	4b0b      	ldr	r3, [pc, #44]	; (1a00506c <__sfp+0x74>)
1a005040:	6665      	str	r5, [r4, #100]	; 0x64
1a005042:	e9c4 5500 	strd	r5, r5, [r4]
1a005046:	60a5      	str	r5, [r4, #8]
1a005048:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a00504c:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a005050:	2208      	movs	r2, #8
1a005052:	4629      	mov	r1, r5
1a005054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a005058:	f000 f857 	bl	1a00510a <memset>
1a00505c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a005060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a005064:	e7e9      	b.n	1a00503a <__sfp+0x42>
1a005066:	bf00      	nop
1a005068:	1a006204 	.word	0x1a006204
1a00506c:	ffff0001 	.word	0xffff0001

1a005070 <_fwalk_reent>:
1a005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005074:	4680      	mov	r8, r0
1a005076:	4689      	mov	r9, r1
1a005078:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00507c:	2600      	movs	r6, #0
1a00507e:	b914      	cbnz	r4, 1a005086 <_fwalk_reent+0x16>
1a005080:	4630      	mov	r0, r6
1a005082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005086:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00508a:	3f01      	subs	r7, #1
1a00508c:	d501      	bpl.n	1a005092 <_fwalk_reent+0x22>
1a00508e:	6824      	ldr	r4, [r4, #0]
1a005090:	e7f5      	b.n	1a00507e <_fwalk_reent+0xe>
1a005092:	89ab      	ldrh	r3, [r5, #12]
1a005094:	2b01      	cmp	r3, #1
1a005096:	d907      	bls.n	1a0050a8 <_fwalk_reent+0x38>
1a005098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00509c:	3301      	adds	r3, #1
1a00509e:	d003      	beq.n	1a0050a8 <_fwalk_reent+0x38>
1a0050a0:	4629      	mov	r1, r5
1a0050a2:	4640      	mov	r0, r8
1a0050a4:	47c8      	blx	r9
1a0050a6:	4306      	orrs	r6, r0
1a0050a8:	3568      	adds	r5, #104	; 0x68
1a0050aa:	e7ee      	b.n	1a00508a <_fwalk_reent+0x1a>

1a0050ac <__libc_init_array>:
1a0050ac:	b570      	push	{r4, r5, r6, lr}
1a0050ae:	4e0d      	ldr	r6, [pc, #52]	; (1a0050e4 <__libc_init_array+0x38>)
1a0050b0:	4c0d      	ldr	r4, [pc, #52]	; (1a0050e8 <__libc_init_array+0x3c>)
1a0050b2:	1ba4      	subs	r4, r4, r6
1a0050b4:	10a4      	asrs	r4, r4, #2
1a0050b6:	2500      	movs	r5, #0
1a0050b8:	42a5      	cmp	r5, r4
1a0050ba:	d109      	bne.n	1a0050d0 <__libc_init_array+0x24>
1a0050bc:	4e0b      	ldr	r6, [pc, #44]	; (1a0050ec <__libc_init_array+0x40>)
1a0050be:	4c0c      	ldr	r4, [pc, #48]	; (1a0050f0 <__libc_init_array+0x44>)
1a0050c0:	f7fb fff5 	bl	1a0010ae <_init>
1a0050c4:	1ba4      	subs	r4, r4, r6
1a0050c6:	10a4      	asrs	r4, r4, #2
1a0050c8:	2500      	movs	r5, #0
1a0050ca:	42a5      	cmp	r5, r4
1a0050cc:	d105      	bne.n	1a0050da <__libc_init_array+0x2e>
1a0050ce:	bd70      	pop	{r4, r5, r6, pc}
1a0050d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0050d4:	4798      	blx	r3
1a0050d6:	3501      	adds	r5, #1
1a0050d8:	e7ee      	b.n	1a0050b8 <__libc_init_array+0xc>
1a0050da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0050de:	4798      	blx	r3
1a0050e0:	3501      	adds	r5, #1
1a0050e2:	e7f2      	b.n	1a0050ca <__libc_init_array+0x1e>
1a0050e4:	1a00623c 	.word	0x1a00623c
1a0050e8:	1a00623c 	.word	0x1a00623c
1a0050ec:	1a00623c 	.word	0x1a00623c
1a0050f0:	1a006240 	.word	0x1a006240

1a0050f4 <memcpy>:
1a0050f4:	b510      	push	{r4, lr}
1a0050f6:	1e43      	subs	r3, r0, #1
1a0050f8:	440a      	add	r2, r1
1a0050fa:	4291      	cmp	r1, r2
1a0050fc:	d100      	bne.n	1a005100 <memcpy+0xc>
1a0050fe:	bd10      	pop	{r4, pc}
1a005100:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005104:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005108:	e7f7      	b.n	1a0050fa <memcpy+0x6>

1a00510a <memset>:
1a00510a:	4402      	add	r2, r0
1a00510c:	4603      	mov	r3, r0
1a00510e:	4293      	cmp	r3, r2
1a005110:	d100      	bne.n	1a005114 <memset+0xa>
1a005112:	4770      	bx	lr
1a005114:	f803 1b01 	strb.w	r1, [r3], #1
1a005118:	e7f9      	b.n	1a00510e <memset+0x4>
1a00511a:	Address 0x000000001a00511a is out of bounds.


1a00511c <_free_r>:
1a00511c:	b538      	push	{r3, r4, r5, lr}
1a00511e:	4605      	mov	r5, r0
1a005120:	2900      	cmp	r1, #0
1a005122:	d045      	beq.n	1a0051b0 <_free_r+0x94>
1a005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005128:	1f0c      	subs	r4, r1, #4
1a00512a:	2b00      	cmp	r3, #0
1a00512c:	bfb8      	it	lt
1a00512e:	18e4      	addlt	r4, r4, r3
1a005130:	f000 fa96 	bl	1a005660 <__malloc_lock>
1a005134:	4a1f      	ldr	r2, [pc, #124]	; (1a0051b4 <_free_r+0x98>)
1a005136:	6813      	ldr	r3, [r2, #0]
1a005138:	4610      	mov	r0, r2
1a00513a:	b933      	cbnz	r3, 1a00514a <_free_r+0x2e>
1a00513c:	6063      	str	r3, [r4, #4]
1a00513e:	6014      	str	r4, [r2, #0]
1a005140:	4628      	mov	r0, r5
1a005142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005146:	f000 ba8c 	b.w	1a005662 <__malloc_unlock>
1a00514a:	42a3      	cmp	r3, r4
1a00514c:	d90c      	bls.n	1a005168 <_free_r+0x4c>
1a00514e:	6821      	ldr	r1, [r4, #0]
1a005150:	1862      	adds	r2, r4, r1
1a005152:	4293      	cmp	r3, r2
1a005154:	bf04      	itt	eq
1a005156:	681a      	ldreq	r2, [r3, #0]
1a005158:	685b      	ldreq	r3, [r3, #4]
1a00515a:	6063      	str	r3, [r4, #4]
1a00515c:	bf04      	itt	eq
1a00515e:	1852      	addeq	r2, r2, r1
1a005160:	6022      	streq	r2, [r4, #0]
1a005162:	6004      	str	r4, [r0, #0]
1a005164:	e7ec      	b.n	1a005140 <_free_r+0x24>
1a005166:	4613      	mov	r3, r2
1a005168:	685a      	ldr	r2, [r3, #4]
1a00516a:	b10a      	cbz	r2, 1a005170 <_free_r+0x54>
1a00516c:	42a2      	cmp	r2, r4
1a00516e:	d9fa      	bls.n	1a005166 <_free_r+0x4a>
1a005170:	6819      	ldr	r1, [r3, #0]
1a005172:	1858      	adds	r0, r3, r1
1a005174:	42a0      	cmp	r0, r4
1a005176:	d10b      	bne.n	1a005190 <_free_r+0x74>
1a005178:	6820      	ldr	r0, [r4, #0]
1a00517a:	4401      	add	r1, r0
1a00517c:	1858      	adds	r0, r3, r1
1a00517e:	4282      	cmp	r2, r0
1a005180:	6019      	str	r1, [r3, #0]
1a005182:	d1dd      	bne.n	1a005140 <_free_r+0x24>
1a005184:	6810      	ldr	r0, [r2, #0]
1a005186:	6852      	ldr	r2, [r2, #4]
1a005188:	605a      	str	r2, [r3, #4]
1a00518a:	4401      	add	r1, r0
1a00518c:	6019      	str	r1, [r3, #0]
1a00518e:	e7d7      	b.n	1a005140 <_free_r+0x24>
1a005190:	d902      	bls.n	1a005198 <_free_r+0x7c>
1a005192:	230c      	movs	r3, #12
1a005194:	602b      	str	r3, [r5, #0]
1a005196:	e7d3      	b.n	1a005140 <_free_r+0x24>
1a005198:	6820      	ldr	r0, [r4, #0]
1a00519a:	1821      	adds	r1, r4, r0
1a00519c:	428a      	cmp	r2, r1
1a00519e:	bf04      	itt	eq
1a0051a0:	6811      	ldreq	r1, [r2, #0]
1a0051a2:	6852      	ldreq	r2, [r2, #4]
1a0051a4:	6062      	str	r2, [r4, #4]
1a0051a6:	bf04      	itt	eq
1a0051a8:	1809      	addeq	r1, r1, r0
1a0051aa:	6021      	streq	r1, [r4, #0]
1a0051ac:	605c      	str	r4, [r3, #4]
1a0051ae:	e7c7      	b.n	1a005140 <_free_r+0x24>
1a0051b0:	bd38      	pop	{r3, r4, r5, pc}
1a0051b2:	bf00      	nop
1a0051b4:	10002ba0 	.word	0x10002ba0

1a0051b8 <_malloc_r>:
1a0051b8:	b570      	push	{r4, r5, r6, lr}
1a0051ba:	1ccd      	adds	r5, r1, #3
1a0051bc:	f025 0503 	bic.w	r5, r5, #3
1a0051c0:	3508      	adds	r5, #8
1a0051c2:	2d0c      	cmp	r5, #12
1a0051c4:	bf38      	it	cc
1a0051c6:	250c      	movcc	r5, #12
1a0051c8:	2d00      	cmp	r5, #0
1a0051ca:	4606      	mov	r6, r0
1a0051cc:	db01      	blt.n	1a0051d2 <_malloc_r+0x1a>
1a0051ce:	42a9      	cmp	r1, r5
1a0051d0:	d903      	bls.n	1a0051da <_malloc_r+0x22>
1a0051d2:	230c      	movs	r3, #12
1a0051d4:	6033      	str	r3, [r6, #0]
1a0051d6:	2000      	movs	r0, #0
1a0051d8:	bd70      	pop	{r4, r5, r6, pc}
1a0051da:	f000 fa41 	bl	1a005660 <__malloc_lock>
1a0051de:	4a21      	ldr	r2, [pc, #132]	; (1a005264 <_malloc_r+0xac>)
1a0051e0:	6814      	ldr	r4, [r2, #0]
1a0051e2:	4621      	mov	r1, r4
1a0051e4:	b991      	cbnz	r1, 1a00520c <_malloc_r+0x54>
1a0051e6:	4c20      	ldr	r4, [pc, #128]	; (1a005268 <_malloc_r+0xb0>)
1a0051e8:	6823      	ldr	r3, [r4, #0]
1a0051ea:	b91b      	cbnz	r3, 1a0051f4 <_malloc_r+0x3c>
1a0051ec:	4630      	mov	r0, r6
1a0051ee:	f7fb ffb3 	bl	1a001158 <_sbrk_r>
1a0051f2:	6020      	str	r0, [r4, #0]
1a0051f4:	4629      	mov	r1, r5
1a0051f6:	4630      	mov	r0, r6
1a0051f8:	f7fb ffae 	bl	1a001158 <_sbrk_r>
1a0051fc:	1c43      	adds	r3, r0, #1
1a0051fe:	d124      	bne.n	1a00524a <_malloc_r+0x92>
1a005200:	230c      	movs	r3, #12
1a005202:	6033      	str	r3, [r6, #0]
1a005204:	4630      	mov	r0, r6
1a005206:	f000 fa2c 	bl	1a005662 <__malloc_unlock>
1a00520a:	e7e4      	b.n	1a0051d6 <_malloc_r+0x1e>
1a00520c:	680b      	ldr	r3, [r1, #0]
1a00520e:	1b5b      	subs	r3, r3, r5
1a005210:	d418      	bmi.n	1a005244 <_malloc_r+0x8c>
1a005212:	2b0b      	cmp	r3, #11
1a005214:	d90f      	bls.n	1a005236 <_malloc_r+0x7e>
1a005216:	600b      	str	r3, [r1, #0]
1a005218:	50cd      	str	r5, [r1, r3]
1a00521a:	18cc      	adds	r4, r1, r3
1a00521c:	4630      	mov	r0, r6
1a00521e:	f000 fa20 	bl	1a005662 <__malloc_unlock>
1a005222:	f104 000b 	add.w	r0, r4, #11
1a005226:	1d23      	adds	r3, r4, #4
1a005228:	f020 0007 	bic.w	r0, r0, #7
1a00522c:	1ac3      	subs	r3, r0, r3
1a00522e:	d0d3      	beq.n	1a0051d8 <_malloc_r+0x20>
1a005230:	425a      	negs	r2, r3
1a005232:	50e2      	str	r2, [r4, r3]
1a005234:	e7d0      	b.n	1a0051d8 <_malloc_r+0x20>
1a005236:	428c      	cmp	r4, r1
1a005238:	684b      	ldr	r3, [r1, #4]
1a00523a:	bf16      	itet	ne
1a00523c:	6063      	strne	r3, [r4, #4]
1a00523e:	6013      	streq	r3, [r2, #0]
1a005240:	460c      	movne	r4, r1
1a005242:	e7eb      	b.n	1a00521c <_malloc_r+0x64>
1a005244:	460c      	mov	r4, r1
1a005246:	6849      	ldr	r1, [r1, #4]
1a005248:	e7cc      	b.n	1a0051e4 <_malloc_r+0x2c>
1a00524a:	1cc4      	adds	r4, r0, #3
1a00524c:	f024 0403 	bic.w	r4, r4, #3
1a005250:	42a0      	cmp	r0, r4
1a005252:	d005      	beq.n	1a005260 <_malloc_r+0xa8>
1a005254:	1a21      	subs	r1, r4, r0
1a005256:	4630      	mov	r0, r6
1a005258:	f7fb ff7e 	bl	1a001158 <_sbrk_r>
1a00525c:	3001      	adds	r0, #1
1a00525e:	d0cf      	beq.n	1a005200 <_malloc_r+0x48>
1a005260:	6025      	str	r5, [r4, #0]
1a005262:	e7db      	b.n	1a00521c <_malloc_r+0x64>
1a005264:	10002ba0 	.word	0x10002ba0
1a005268:	10002ba4 	.word	0x10002ba4

1a00526c <iprintf>:
1a00526c:	b40f      	push	{r0, r1, r2, r3}
1a00526e:	4b0a      	ldr	r3, [pc, #40]	; (1a005298 <iprintf+0x2c>)
1a005270:	b513      	push	{r0, r1, r4, lr}
1a005272:	681c      	ldr	r4, [r3, #0]
1a005274:	b124      	cbz	r4, 1a005280 <iprintf+0x14>
1a005276:	69a3      	ldr	r3, [r4, #24]
1a005278:	b913      	cbnz	r3, 1a005280 <iprintf+0x14>
1a00527a:	4620      	mov	r0, r4
1a00527c:	f7ff fe8c 	bl	1a004f98 <__sinit>
1a005280:	ab05      	add	r3, sp, #20
1a005282:	9a04      	ldr	r2, [sp, #16]
1a005284:	68a1      	ldr	r1, [r4, #8]
1a005286:	9301      	str	r3, [sp, #4]
1a005288:	4620      	mov	r0, r4
1a00528a:	f000 fa15 	bl	1a0056b8 <_vfiprintf_r>
1a00528e:	b002      	add	sp, #8
1a005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005294:	b004      	add	sp, #16
1a005296:	4770      	bx	lr
1a005298:	100000c8 	.word	0x100000c8

1a00529c <_puts_r>:
1a00529c:	b570      	push	{r4, r5, r6, lr}
1a00529e:	460e      	mov	r6, r1
1a0052a0:	4605      	mov	r5, r0
1a0052a2:	b118      	cbz	r0, 1a0052ac <_puts_r+0x10>
1a0052a4:	6983      	ldr	r3, [r0, #24]
1a0052a6:	b90b      	cbnz	r3, 1a0052ac <_puts_r+0x10>
1a0052a8:	f7ff fe76 	bl	1a004f98 <__sinit>
1a0052ac:	69ab      	ldr	r3, [r5, #24]
1a0052ae:	68ac      	ldr	r4, [r5, #8]
1a0052b0:	b913      	cbnz	r3, 1a0052b8 <_puts_r+0x1c>
1a0052b2:	4628      	mov	r0, r5
1a0052b4:	f7ff fe70 	bl	1a004f98 <__sinit>
1a0052b8:	4b23      	ldr	r3, [pc, #140]	; (1a005348 <_puts_r+0xac>)
1a0052ba:	429c      	cmp	r4, r3
1a0052bc:	d117      	bne.n	1a0052ee <_puts_r+0x52>
1a0052be:	686c      	ldr	r4, [r5, #4]
1a0052c0:	89a3      	ldrh	r3, [r4, #12]
1a0052c2:	071b      	lsls	r3, r3, #28
1a0052c4:	d51d      	bpl.n	1a005302 <_puts_r+0x66>
1a0052c6:	6923      	ldr	r3, [r4, #16]
1a0052c8:	b1db      	cbz	r3, 1a005302 <_puts_r+0x66>
1a0052ca:	3e01      	subs	r6, #1
1a0052cc:	68a3      	ldr	r3, [r4, #8]
1a0052ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0052d2:	3b01      	subs	r3, #1
1a0052d4:	60a3      	str	r3, [r4, #8]
1a0052d6:	b9e9      	cbnz	r1, 1a005314 <_puts_r+0x78>
1a0052d8:	2b00      	cmp	r3, #0
1a0052da:	da2e      	bge.n	1a00533a <_puts_r+0x9e>
1a0052dc:	4622      	mov	r2, r4
1a0052de:	210a      	movs	r1, #10
1a0052e0:	4628      	mov	r0, r5
1a0052e2:	f000 f899 	bl	1a005418 <__swbuf_r>
1a0052e6:	3001      	adds	r0, #1
1a0052e8:	d011      	beq.n	1a00530e <_puts_r+0x72>
1a0052ea:	200a      	movs	r0, #10
1a0052ec:	e011      	b.n	1a005312 <_puts_r+0x76>
1a0052ee:	4b17      	ldr	r3, [pc, #92]	; (1a00534c <_puts_r+0xb0>)
1a0052f0:	429c      	cmp	r4, r3
1a0052f2:	d101      	bne.n	1a0052f8 <_puts_r+0x5c>
1a0052f4:	68ac      	ldr	r4, [r5, #8]
1a0052f6:	e7e3      	b.n	1a0052c0 <_puts_r+0x24>
1a0052f8:	4b15      	ldr	r3, [pc, #84]	; (1a005350 <_puts_r+0xb4>)
1a0052fa:	429c      	cmp	r4, r3
1a0052fc:	bf08      	it	eq
1a0052fe:	68ec      	ldreq	r4, [r5, #12]
1a005300:	e7de      	b.n	1a0052c0 <_puts_r+0x24>
1a005302:	4621      	mov	r1, r4
1a005304:	4628      	mov	r0, r5
1a005306:	f000 f8d9 	bl	1a0054bc <__swsetup_r>
1a00530a:	2800      	cmp	r0, #0
1a00530c:	d0dd      	beq.n	1a0052ca <_puts_r+0x2e>
1a00530e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005312:	bd70      	pop	{r4, r5, r6, pc}
1a005314:	2b00      	cmp	r3, #0
1a005316:	da04      	bge.n	1a005322 <_puts_r+0x86>
1a005318:	69a2      	ldr	r2, [r4, #24]
1a00531a:	429a      	cmp	r2, r3
1a00531c:	dc06      	bgt.n	1a00532c <_puts_r+0x90>
1a00531e:	290a      	cmp	r1, #10
1a005320:	d004      	beq.n	1a00532c <_puts_r+0x90>
1a005322:	6823      	ldr	r3, [r4, #0]
1a005324:	1c5a      	adds	r2, r3, #1
1a005326:	6022      	str	r2, [r4, #0]
1a005328:	7019      	strb	r1, [r3, #0]
1a00532a:	e7cf      	b.n	1a0052cc <_puts_r+0x30>
1a00532c:	4622      	mov	r2, r4
1a00532e:	4628      	mov	r0, r5
1a005330:	f000 f872 	bl	1a005418 <__swbuf_r>
1a005334:	3001      	adds	r0, #1
1a005336:	d1c9      	bne.n	1a0052cc <_puts_r+0x30>
1a005338:	e7e9      	b.n	1a00530e <_puts_r+0x72>
1a00533a:	6823      	ldr	r3, [r4, #0]
1a00533c:	200a      	movs	r0, #10
1a00533e:	1c5a      	adds	r2, r3, #1
1a005340:	6022      	str	r2, [r4, #0]
1a005342:	7018      	strb	r0, [r3, #0]
1a005344:	e7e5      	b.n	1a005312 <_puts_r+0x76>
1a005346:	bf00      	nop
1a005348:	1a0061c4 	.word	0x1a0061c4
1a00534c:	1a0061e4 	.word	0x1a0061e4
1a005350:	1a0061a4 	.word	0x1a0061a4

1a005354 <puts>:
1a005354:	4b02      	ldr	r3, [pc, #8]	; (1a005360 <puts+0xc>)
1a005356:	4601      	mov	r1, r0
1a005358:	6818      	ldr	r0, [r3, #0]
1a00535a:	f7ff bf9f 	b.w	1a00529c <_puts_r>
1a00535e:	bf00      	nop
1a005360:	100000c8 	.word	0x100000c8

1a005364 <__sread>:
1a005364:	b510      	push	{r4, lr}
1a005366:	460c      	mov	r4, r1
1a005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00536c:	f7fb feb8 	bl	1a0010e0 <_read_r>
1a005370:	2800      	cmp	r0, #0
1a005372:	bfab      	itete	ge
1a005374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a005376:	89a3      	ldrhlt	r3, [r4, #12]
1a005378:	181b      	addge	r3, r3, r0
1a00537a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00537e:	bfac      	ite	ge
1a005380:	6563      	strge	r3, [r4, #84]	; 0x54
1a005382:	81a3      	strhlt	r3, [r4, #12]
1a005384:	bd10      	pop	{r4, pc}

1a005386 <__swrite>:
1a005386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00538a:	461f      	mov	r7, r3
1a00538c:	898b      	ldrh	r3, [r1, #12]
1a00538e:	05db      	lsls	r3, r3, #23
1a005390:	4605      	mov	r5, r0
1a005392:	460c      	mov	r4, r1
1a005394:	4616      	mov	r6, r2
1a005396:	d505      	bpl.n	1a0053a4 <__swrite+0x1e>
1a005398:	2302      	movs	r3, #2
1a00539a:	2200      	movs	r2, #0
1a00539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0053a0:	f7fb fe99 	bl	1a0010d6 <_lseek_r>
1a0053a4:	89a3      	ldrh	r3, [r4, #12]
1a0053a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0053aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0053ae:	81a3      	strh	r3, [r4, #12]
1a0053b0:	4632      	mov	r2, r6
1a0053b2:	463b      	mov	r3, r7
1a0053b4:	4628      	mov	r0, r5
1a0053b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0053ba:	f7fb beb8 	b.w	1a00112e <_write_r>

1a0053be <__sseek>:
1a0053be:	b510      	push	{r4, lr}
1a0053c0:	460c      	mov	r4, r1
1a0053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0053c6:	f7fb fe86 	bl	1a0010d6 <_lseek_r>
1a0053ca:	1c43      	adds	r3, r0, #1
1a0053cc:	89a3      	ldrh	r3, [r4, #12]
1a0053ce:	bf15      	itete	ne
1a0053d0:	6560      	strne	r0, [r4, #84]	; 0x54
1a0053d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0053d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0053da:	81a3      	strheq	r3, [r4, #12]
1a0053dc:	bf18      	it	ne
1a0053de:	81a3      	strhne	r3, [r4, #12]
1a0053e0:	bd10      	pop	{r4, pc}

1a0053e2 <__sclose>:
1a0053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0053e6:	f7fb be63 	b.w	1a0010b0 <_close_r>

1a0053ea <strcat>:
1a0053ea:	b510      	push	{r4, lr}
1a0053ec:	4603      	mov	r3, r0
1a0053ee:	781a      	ldrb	r2, [r3, #0]
1a0053f0:	1c5c      	adds	r4, r3, #1
1a0053f2:	b93a      	cbnz	r2, 1a005404 <strcat+0x1a>
1a0053f4:	3b01      	subs	r3, #1
1a0053f6:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0053fa:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0053fe:	2a00      	cmp	r2, #0
1a005400:	d1f9      	bne.n	1a0053f6 <strcat+0xc>
1a005402:	bd10      	pop	{r4, pc}
1a005404:	4623      	mov	r3, r4
1a005406:	e7f2      	b.n	1a0053ee <strcat+0x4>

1a005408 <strlen>:
1a005408:	4603      	mov	r3, r0
1a00540a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00540e:	2a00      	cmp	r2, #0
1a005410:	d1fb      	bne.n	1a00540a <strlen+0x2>
1a005412:	1a18      	subs	r0, r3, r0
1a005414:	3801      	subs	r0, #1
1a005416:	4770      	bx	lr

1a005418 <__swbuf_r>:
1a005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00541a:	460e      	mov	r6, r1
1a00541c:	4614      	mov	r4, r2
1a00541e:	4605      	mov	r5, r0
1a005420:	b118      	cbz	r0, 1a00542a <__swbuf_r+0x12>
1a005422:	6983      	ldr	r3, [r0, #24]
1a005424:	b90b      	cbnz	r3, 1a00542a <__swbuf_r+0x12>
1a005426:	f7ff fdb7 	bl	1a004f98 <__sinit>
1a00542a:	4b21      	ldr	r3, [pc, #132]	; (1a0054b0 <__swbuf_r+0x98>)
1a00542c:	429c      	cmp	r4, r3
1a00542e:	d12a      	bne.n	1a005486 <__swbuf_r+0x6e>
1a005430:	686c      	ldr	r4, [r5, #4]
1a005432:	69a3      	ldr	r3, [r4, #24]
1a005434:	60a3      	str	r3, [r4, #8]
1a005436:	89a3      	ldrh	r3, [r4, #12]
1a005438:	071a      	lsls	r2, r3, #28
1a00543a:	d52e      	bpl.n	1a00549a <__swbuf_r+0x82>
1a00543c:	6923      	ldr	r3, [r4, #16]
1a00543e:	b363      	cbz	r3, 1a00549a <__swbuf_r+0x82>
1a005440:	6923      	ldr	r3, [r4, #16]
1a005442:	6820      	ldr	r0, [r4, #0]
1a005444:	1ac0      	subs	r0, r0, r3
1a005446:	6963      	ldr	r3, [r4, #20]
1a005448:	b2f6      	uxtb	r6, r6
1a00544a:	4283      	cmp	r3, r0
1a00544c:	4637      	mov	r7, r6
1a00544e:	dc04      	bgt.n	1a00545a <__swbuf_r+0x42>
1a005450:	4621      	mov	r1, r4
1a005452:	4628      	mov	r0, r5
1a005454:	f7ff fd36 	bl	1a004ec4 <_fflush_r>
1a005458:	bb28      	cbnz	r0, 1a0054a6 <__swbuf_r+0x8e>
1a00545a:	68a3      	ldr	r3, [r4, #8]
1a00545c:	3b01      	subs	r3, #1
1a00545e:	60a3      	str	r3, [r4, #8]
1a005460:	6823      	ldr	r3, [r4, #0]
1a005462:	1c5a      	adds	r2, r3, #1
1a005464:	6022      	str	r2, [r4, #0]
1a005466:	701e      	strb	r6, [r3, #0]
1a005468:	6963      	ldr	r3, [r4, #20]
1a00546a:	3001      	adds	r0, #1
1a00546c:	4283      	cmp	r3, r0
1a00546e:	d004      	beq.n	1a00547a <__swbuf_r+0x62>
1a005470:	89a3      	ldrh	r3, [r4, #12]
1a005472:	07db      	lsls	r3, r3, #31
1a005474:	d519      	bpl.n	1a0054aa <__swbuf_r+0x92>
1a005476:	2e0a      	cmp	r6, #10
1a005478:	d117      	bne.n	1a0054aa <__swbuf_r+0x92>
1a00547a:	4621      	mov	r1, r4
1a00547c:	4628      	mov	r0, r5
1a00547e:	f7ff fd21 	bl	1a004ec4 <_fflush_r>
1a005482:	b190      	cbz	r0, 1a0054aa <__swbuf_r+0x92>
1a005484:	e00f      	b.n	1a0054a6 <__swbuf_r+0x8e>
1a005486:	4b0b      	ldr	r3, [pc, #44]	; (1a0054b4 <__swbuf_r+0x9c>)
1a005488:	429c      	cmp	r4, r3
1a00548a:	d101      	bne.n	1a005490 <__swbuf_r+0x78>
1a00548c:	68ac      	ldr	r4, [r5, #8]
1a00548e:	e7d0      	b.n	1a005432 <__swbuf_r+0x1a>
1a005490:	4b09      	ldr	r3, [pc, #36]	; (1a0054b8 <__swbuf_r+0xa0>)
1a005492:	429c      	cmp	r4, r3
1a005494:	bf08      	it	eq
1a005496:	68ec      	ldreq	r4, [r5, #12]
1a005498:	e7cb      	b.n	1a005432 <__swbuf_r+0x1a>
1a00549a:	4621      	mov	r1, r4
1a00549c:	4628      	mov	r0, r5
1a00549e:	f000 f80d 	bl	1a0054bc <__swsetup_r>
1a0054a2:	2800      	cmp	r0, #0
1a0054a4:	d0cc      	beq.n	1a005440 <__swbuf_r+0x28>
1a0054a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0054aa:	4638      	mov	r0, r7
1a0054ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0054ae:	bf00      	nop
1a0054b0:	1a0061c4 	.word	0x1a0061c4
1a0054b4:	1a0061e4 	.word	0x1a0061e4
1a0054b8:	1a0061a4 	.word	0x1a0061a4

1a0054bc <__swsetup_r>:
1a0054bc:	4b32      	ldr	r3, [pc, #200]	; (1a005588 <__swsetup_r+0xcc>)
1a0054be:	b570      	push	{r4, r5, r6, lr}
1a0054c0:	681d      	ldr	r5, [r3, #0]
1a0054c2:	4606      	mov	r6, r0
1a0054c4:	460c      	mov	r4, r1
1a0054c6:	b125      	cbz	r5, 1a0054d2 <__swsetup_r+0x16>
1a0054c8:	69ab      	ldr	r3, [r5, #24]
1a0054ca:	b913      	cbnz	r3, 1a0054d2 <__swsetup_r+0x16>
1a0054cc:	4628      	mov	r0, r5
1a0054ce:	f7ff fd63 	bl	1a004f98 <__sinit>
1a0054d2:	4b2e      	ldr	r3, [pc, #184]	; (1a00558c <__swsetup_r+0xd0>)
1a0054d4:	429c      	cmp	r4, r3
1a0054d6:	d10f      	bne.n	1a0054f8 <__swsetup_r+0x3c>
1a0054d8:	686c      	ldr	r4, [r5, #4]
1a0054da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0054de:	b29a      	uxth	r2, r3
1a0054e0:	0715      	lsls	r5, r2, #28
1a0054e2:	d42c      	bmi.n	1a00553e <__swsetup_r+0x82>
1a0054e4:	06d0      	lsls	r0, r2, #27
1a0054e6:	d411      	bmi.n	1a00550c <__swsetup_r+0x50>
1a0054e8:	2209      	movs	r2, #9
1a0054ea:	6032      	str	r2, [r6, #0]
1a0054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0054f0:	81a3      	strh	r3, [r4, #12]
1a0054f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0054f6:	e03e      	b.n	1a005576 <__swsetup_r+0xba>
1a0054f8:	4b25      	ldr	r3, [pc, #148]	; (1a005590 <__swsetup_r+0xd4>)
1a0054fa:	429c      	cmp	r4, r3
1a0054fc:	d101      	bne.n	1a005502 <__swsetup_r+0x46>
1a0054fe:	68ac      	ldr	r4, [r5, #8]
1a005500:	e7eb      	b.n	1a0054da <__swsetup_r+0x1e>
1a005502:	4b24      	ldr	r3, [pc, #144]	; (1a005594 <__swsetup_r+0xd8>)
1a005504:	429c      	cmp	r4, r3
1a005506:	bf08      	it	eq
1a005508:	68ec      	ldreq	r4, [r5, #12]
1a00550a:	e7e6      	b.n	1a0054da <__swsetup_r+0x1e>
1a00550c:	0751      	lsls	r1, r2, #29
1a00550e:	d512      	bpl.n	1a005536 <__swsetup_r+0x7a>
1a005510:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005512:	b141      	cbz	r1, 1a005526 <__swsetup_r+0x6a>
1a005514:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005518:	4299      	cmp	r1, r3
1a00551a:	d002      	beq.n	1a005522 <__swsetup_r+0x66>
1a00551c:	4630      	mov	r0, r6
1a00551e:	f7ff fdfd 	bl	1a00511c <_free_r>
1a005522:	2300      	movs	r3, #0
1a005524:	6363      	str	r3, [r4, #52]	; 0x34
1a005526:	89a3      	ldrh	r3, [r4, #12]
1a005528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a00552c:	81a3      	strh	r3, [r4, #12]
1a00552e:	2300      	movs	r3, #0
1a005530:	6063      	str	r3, [r4, #4]
1a005532:	6923      	ldr	r3, [r4, #16]
1a005534:	6023      	str	r3, [r4, #0]
1a005536:	89a3      	ldrh	r3, [r4, #12]
1a005538:	f043 0308 	orr.w	r3, r3, #8
1a00553c:	81a3      	strh	r3, [r4, #12]
1a00553e:	6923      	ldr	r3, [r4, #16]
1a005540:	b94b      	cbnz	r3, 1a005556 <__swsetup_r+0x9a>
1a005542:	89a3      	ldrh	r3, [r4, #12]
1a005544:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a005548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00554c:	d003      	beq.n	1a005556 <__swsetup_r+0x9a>
1a00554e:	4621      	mov	r1, r4
1a005550:	4630      	mov	r0, r6
1a005552:	f000 f845 	bl	1a0055e0 <__smakebuf_r>
1a005556:	89a2      	ldrh	r2, [r4, #12]
1a005558:	f012 0301 	ands.w	r3, r2, #1
1a00555c:	d00c      	beq.n	1a005578 <__swsetup_r+0xbc>
1a00555e:	2300      	movs	r3, #0
1a005560:	60a3      	str	r3, [r4, #8]
1a005562:	6963      	ldr	r3, [r4, #20]
1a005564:	425b      	negs	r3, r3
1a005566:	61a3      	str	r3, [r4, #24]
1a005568:	6923      	ldr	r3, [r4, #16]
1a00556a:	b953      	cbnz	r3, 1a005582 <__swsetup_r+0xc6>
1a00556c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005570:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005574:	d1ba      	bne.n	1a0054ec <__swsetup_r+0x30>
1a005576:	bd70      	pop	{r4, r5, r6, pc}
1a005578:	0792      	lsls	r2, r2, #30
1a00557a:	bf58      	it	pl
1a00557c:	6963      	ldrpl	r3, [r4, #20]
1a00557e:	60a3      	str	r3, [r4, #8]
1a005580:	e7f2      	b.n	1a005568 <__swsetup_r+0xac>
1a005582:	2000      	movs	r0, #0
1a005584:	e7f7      	b.n	1a005576 <__swsetup_r+0xba>
1a005586:	bf00      	nop
1a005588:	100000c8 	.word	0x100000c8
1a00558c:	1a0061c4 	.word	0x1a0061c4
1a005590:	1a0061e4 	.word	0x1a0061e4
1a005594:	1a0061a4 	.word	0x1a0061a4

1a005598 <__swhatbuf_r>:
1a005598:	b570      	push	{r4, r5, r6, lr}
1a00559a:	460e      	mov	r6, r1
1a00559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0055a0:	2900      	cmp	r1, #0
1a0055a2:	b096      	sub	sp, #88	; 0x58
1a0055a4:	4614      	mov	r4, r2
1a0055a6:	461d      	mov	r5, r3
1a0055a8:	da07      	bge.n	1a0055ba <__swhatbuf_r+0x22>
1a0055aa:	2300      	movs	r3, #0
1a0055ac:	602b      	str	r3, [r5, #0]
1a0055ae:	89b3      	ldrh	r3, [r6, #12]
1a0055b0:	061a      	lsls	r2, r3, #24
1a0055b2:	d410      	bmi.n	1a0055d6 <__swhatbuf_r+0x3e>
1a0055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0055b8:	e00e      	b.n	1a0055d8 <__swhatbuf_r+0x40>
1a0055ba:	466a      	mov	r2, sp
1a0055bc:	f7fb fd7d 	bl	1a0010ba <_fstat_r>
1a0055c0:	2800      	cmp	r0, #0
1a0055c2:	dbf2      	blt.n	1a0055aa <__swhatbuf_r+0x12>
1a0055c4:	9a01      	ldr	r2, [sp, #4]
1a0055c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0055ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0055ce:	425a      	negs	r2, r3
1a0055d0:	415a      	adcs	r2, r3
1a0055d2:	602a      	str	r2, [r5, #0]
1a0055d4:	e7ee      	b.n	1a0055b4 <__swhatbuf_r+0x1c>
1a0055d6:	2340      	movs	r3, #64	; 0x40
1a0055d8:	2000      	movs	r0, #0
1a0055da:	6023      	str	r3, [r4, #0]
1a0055dc:	b016      	add	sp, #88	; 0x58
1a0055de:	bd70      	pop	{r4, r5, r6, pc}

1a0055e0 <__smakebuf_r>:
1a0055e0:	898b      	ldrh	r3, [r1, #12]
1a0055e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0055e4:	079d      	lsls	r5, r3, #30
1a0055e6:	4606      	mov	r6, r0
1a0055e8:	460c      	mov	r4, r1
1a0055ea:	d507      	bpl.n	1a0055fc <__smakebuf_r+0x1c>
1a0055ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0055f0:	6023      	str	r3, [r4, #0]
1a0055f2:	6123      	str	r3, [r4, #16]
1a0055f4:	2301      	movs	r3, #1
1a0055f6:	6163      	str	r3, [r4, #20]
1a0055f8:	b002      	add	sp, #8
1a0055fa:	bd70      	pop	{r4, r5, r6, pc}
1a0055fc:	ab01      	add	r3, sp, #4
1a0055fe:	466a      	mov	r2, sp
1a005600:	f7ff ffca 	bl	1a005598 <__swhatbuf_r>
1a005604:	9900      	ldr	r1, [sp, #0]
1a005606:	4605      	mov	r5, r0
1a005608:	4630      	mov	r0, r6
1a00560a:	f7ff fdd5 	bl	1a0051b8 <_malloc_r>
1a00560e:	b948      	cbnz	r0, 1a005624 <__smakebuf_r+0x44>
1a005610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005614:	059a      	lsls	r2, r3, #22
1a005616:	d4ef      	bmi.n	1a0055f8 <__smakebuf_r+0x18>
1a005618:	f023 0303 	bic.w	r3, r3, #3
1a00561c:	f043 0302 	orr.w	r3, r3, #2
1a005620:	81a3      	strh	r3, [r4, #12]
1a005622:	e7e3      	b.n	1a0055ec <__smakebuf_r+0xc>
1a005624:	4b0d      	ldr	r3, [pc, #52]	; (1a00565c <__smakebuf_r+0x7c>)
1a005626:	62b3      	str	r3, [r6, #40]	; 0x28
1a005628:	89a3      	ldrh	r3, [r4, #12]
1a00562a:	6020      	str	r0, [r4, #0]
1a00562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005630:	81a3      	strh	r3, [r4, #12]
1a005632:	9b00      	ldr	r3, [sp, #0]
1a005634:	6163      	str	r3, [r4, #20]
1a005636:	9b01      	ldr	r3, [sp, #4]
1a005638:	6120      	str	r0, [r4, #16]
1a00563a:	b15b      	cbz	r3, 1a005654 <__smakebuf_r+0x74>
1a00563c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005640:	4630      	mov	r0, r6
1a005642:	f7fb fd3f 	bl	1a0010c4 <_isatty_r>
1a005646:	b128      	cbz	r0, 1a005654 <__smakebuf_r+0x74>
1a005648:	89a3      	ldrh	r3, [r4, #12]
1a00564a:	f023 0303 	bic.w	r3, r3, #3
1a00564e:	f043 0301 	orr.w	r3, r3, #1
1a005652:	81a3      	strh	r3, [r4, #12]
1a005654:	89a3      	ldrh	r3, [r4, #12]
1a005656:	431d      	orrs	r5, r3
1a005658:	81a5      	strh	r5, [r4, #12]
1a00565a:	e7cd      	b.n	1a0055f8 <__smakebuf_r+0x18>
1a00565c:	1a004f61 	.word	0x1a004f61

1a005660 <__malloc_lock>:
1a005660:	4770      	bx	lr

1a005662 <__malloc_unlock>:
1a005662:	4770      	bx	lr

1a005664 <__sfputc_r>:
1a005664:	6893      	ldr	r3, [r2, #8]
1a005666:	3b01      	subs	r3, #1
1a005668:	2b00      	cmp	r3, #0
1a00566a:	b410      	push	{r4}
1a00566c:	6093      	str	r3, [r2, #8]
1a00566e:	da08      	bge.n	1a005682 <__sfputc_r+0x1e>
1a005670:	6994      	ldr	r4, [r2, #24]
1a005672:	42a3      	cmp	r3, r4
1a005674:	db01      	blt.n	1a00567a <__sfputc_r+0x16>
1a005676:	290a      	cmp	r1, #10
1a005678:	d103      	bne.n	1a005682 <__sfputc_r+0x1e>
1a00567a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00567e:	f7ff becb 	b.w	1a005418 <__swbuf_r>
1a005682:	6813      	ldr	r3, [r2, #0]
1a005684:	1c58      	adds	r0, r3, #1
1a005686:	6010      	str	r0, [r2, #0]
1a005688:	7019      	strb	r1, [r3, #0]
1a00568a:	4608      	mov	r0, r1
1a00568c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005690:	4770      	bx	lr

1a005692 <__sfputs_r>:
1a005692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005694:	4606      	mov	r6, r0
1a005696:	460f      	mov	r7, r1
1a005698:	4614      	mov	r4, r2
1a00569a:	18d5      	adds	r5, r2, r3
1a00569c:	42ac      	cmp	r4, r5
1a00569e:	d101      	bne.n	1a0056a4 <__sfputs_r+0x12>
1a0056a0:	2000      	movs	r0, #0
1a0056a2:	e007      	b.n	1a0056b4 <__sfputs_r+0x22>
1a0056a4:	463a      	mov	r2, r7
1a0056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0056aa:	4630      	mov	r0, r6
1a0056ac:	f7ff ffda 	bl	1a005664 <__sfputc_r>
1a0056b0:	1c43      	adds	r3, r0, #1
1a0056b2:	d1f3      	bne.n	1a00569c <__sfputs_r+0xa>
1a0056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0056b6:	Address 0x000000001a0056b6 is out of bounds.


1a0056b8 <_vfiprintf_r>:
1a0056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0056bc:	460c      	mov	r4, r1
1a0056be:	b09d      	sub	sp, #116	; 0x74
1a0056c0:	4617      	mov	r7, r2
1a0056c2:	461d      	mov	r5, r3
1a0056c4:	4606      	mov	r6, r0
1a0056c6:	b118      	cbz	r0, 1a0056d0 <_vfiprintf_r+0x18>
1a0056c8:	6983      	ldr	r3, [r0, #24]
1a0056ca:	b90b      	cbnz	r3, 1a0056d0 <_vfiprintf_r+0x18>
1a0056cc:	f7ff fc64 	bl	1a004f98 <__sinit>
1a0056d0:	4b7c      	ldr	r3, [pc, #496]	; (1a0058c4 <_vfiprintf_r+0x20c>)
1a0056d2:	429c      	cmp	r4, r3
1a0056d4:	d158      	bne.n	1a005788 <_vfiprintf_r+0xd0>
1a0056d6:	6874      	ldr	r4, [r6, #4]
1a0056d8:	89a3      	ldrh	r3, [r4, #12]
1a0056da:	0718      	lsls	r0, r3, #28
1a0056dc:	d55e      	bpl.n	1a00579c <_vfiprintf_r+0xe4>
1a0056de:	6923      	ldr	r3, [r4, #16]
1a0056e0:	2b00      	cmp	r3, #0
1a0056e2:	d05b      	beq.n	1a00579c <_vfiprintf_r+0xe4>
1a0056e4:	2300      	movs	r3, #0
1a0056e6:	9309      	str	r3, [sp, #36]	; 0x24
1a0056e8:	2320      	movs	r3, #32
1a0056ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0056ee:	2330      	movs	r3, #48	; 0x30
1a0056f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0056f4:	9503      	str	r5, [sp, #12]
1a0056f6:	f04f 0b01 	mov.w	fp, #1
1a0056fa:	46b8      	mov	r8, r7
1a0056fc:	4645      	mov	r5, r8
1a0056fe:	f815 3b01 	ldrb.w	r3, [r5], #1
1a005702:	b10b      	cbz	r3, 1a005708 <_vfiprintf_r+0x50>
1a005704:	2b25      	cmp	r3, #37	; 0x25
1a005706:	d154      	bne.n	1a0057b2 <_vfiprintf_r+0xfa>
1a005708:	ebb8 0a07 	subs.w	sl, r8, r7
1a00570c:	d00b      	beq.n	1a005726 <_vfiprintf_r+0x6e>
1a00570e:	4653      	mov	r3, sl
1a005710:	463a      	mov	r2, r7
1a005712:	4621      	mov	r1, r4
1a005714:	4630      	mov	r0, r6
1a005716:	f7ff ffbc 	bl	1a005692 <__sfputs_r>
1a00571a:	3001      	adds	r0, #1
1a00571c:	f000 80c2 	beq.w	1a0058a4 <_vfiprintf_r+0x1ec>
1a005720:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005722:	4453      	add	r3, sl
1a005724:	9309      	str	r3, [sp, #36]	; 0x24
1a005726:	f898 3000 	ldrb.w	r3, [r8]
1a00572a:	2b00      	cmp	r3, #0
1a00572c:	f000 80ba 	beq.w	1a0058a4 <_vfiprintf_r+0x1ec>
1a005730:	2300      	movs	r3, #0
1a005732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005736:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00573a:	9304      	str	r3, [sp, #16]
1a00573c:	9307      	str	r3, [sp, #28]
1a00573e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a005742:	931a      	str	r3, [sp, #104]	; 0x68
1a005744:	46a8      	mov	r8, r5
1a005746:	2205      	movs	r2, #5
1a005748:	f818 1b01 	ldrb.w	r1, [r8], #1
1a00574c:	485e      	ldr	r0, [pc, #376]	; (1a0058c8 <_vfiprintf_r+0x210>)
1a00574e:	f000 fa57 	bl	1a005c00 <memchr>
1a005752:	9b04      	ldr	r3, [sp, #16]
1a005754:	bb78      	cbnz	r0, 1a0057b6 <_vfiprintf_r+0xfe>
1a005756:	06d9      	lsls	r1, r3, #27
1a005758:	bf44      	itt	mi
1a00575a:	2220      	movmi	r2, #32
1a00575c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005760:	071a      	lsls	r2, r3, #28
1a005762:	bf44      	itt	mi
1a005764:	222b      	movmi	r2, #43	; 0x2b
1a005766:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00576a:	782a      	ldrb	r2, [r5, #0]
1a00576c:	2a2a      	cmp	r2, #42	; 0x2a
1a00576e:	d02a      	beq.n	1a0057c6 <_vfiprintf_r+0x10e>
1a005770:	9a07      	ldr	r2, [sp, #28]
1a005772:	46a8      	mov	r8, r5
1a005774:	2000      	movs	r0, #0
1a005776:	250a      	movs	r5, #10
1a005778:	4641      	mov	r1, r8
1a00577a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00577e:	3b30      	subs	r3, #48	; 0x30
1a005780:	2b09      	cmp	r3, #9
1a005782:	d969      	bls.n	1a005858 <_vfiprintf_r+0x1a0>
1a005784:	b360      	cbz	r0, 1a0057e0 <_vfiprintf_r+0x128>
1a005786:	e024      	b.n	1a0057d2 <_vfiprintf_r+0x11a>
1a005788:	4b50      	ldr	r3, [pc, #320]	; (1a0058cc <_vfiprintf_r+0x214>)
1a00578a:	429c      	cmp	r4, r3
1a00578c:	d101      	bne.n	1a005792 <_vfiprintf_r+0xda>
1a00578e:	68b4      	ldr	r4, [r6, #8]
1a005790:	e7a2      	b.n	1a0056d8 <_vfiprintf_r+0x20>
1a005792:	4b4f      	ldr	r3, [pc, #316]	; (1a0058d0 <_vfiprintf_r+0x218>)
1a005794:	429c      	cmp	r4, r3
1a005796:	bf08      	it	eq
1a005798:	68f4      	ldreq	r4, [r6, #12]
1a00579a:	e79d      	b.n	1a0056d8 <_vfiprintf_r+0x20>
1a00579c:	4621      	mov	r1, r4
1a00579e:	4630      	mov	r0, r6
1a0057a0:	f7ff fe8c 	bl	1a0054bc <__swsetup_r>
1a0057a4:	2800      	cmp	r0, #0
1a0057a6:	d09d      	beq.n	1a0056e4 <_vfiprintf_r+0x2c>
1a0057a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0057ac:	b01d      	add	sp, #116	; 0x74
1a0057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0057b2:	46a8      	mov	r8, r5
1a0057b4:	e7a2      	b.n	1a0056fc <_vfiprintf_r+0x44>
1a0057b6:	4a44      	ldr	r2, [pc, #272]	; (1a0058c8 <_vfiprintf_r+0x210>)
1a0057b8:	1a80      	subs	r0, r0, r2
1a0057ba:	fa0b f000 	lsl.w	r0, fp, r0
1a0057be:	4318      	orrs	r0, r3
1a0057c0:	9004      	str	r0, [sp, #16]
1a0057c2:	4645      	mov	r5, r8
1a0057c4:	e7be      	b.n	1a005744 <_vfiprintf_r+0x8c>
1a0057c6:	9a03      	ldr	r2, [sp, #12]
1a0057c8:	1d11      	adds	r1, r2, #4
1a0057ca:	6812      	ldr	r2, [r2, #0]
1a0057cc:	9103      	str	r1, [sp, #12]
1a0057ce:	2a00      	cmp	r2, #0
1a0057d0:	db01      	blt.n	1a0057d6 <_vfiprintf_r+0x11e>
1a0057d2:	9207      	str	r2, [sp, #28]
1a0057d4:	e004      	b.n	1a0057e0 <_vfiprintf_r+0x128>
1a0057d6:	4252      	negs	r2, r2
1a0057d8:	f043 0302 	orr.w	r3, r3, #2
1a0057dc:	9207      	str	r2, [sp, #28]
1a0057de:	9304      	str	r3, [sp, #16]
1a0057e0:	f898 3000 	ldrb.w	r3, [r8]
1a0057e4:	2b2e      	cmp	r3, #46	; 0x2e
1a0057e6:	d10e      	bne.n	1a005806 <_vfiprintf_r+0x14e>
1a0057e8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0057ec:	2b2a      	cmp	r3, #42	; 0x2a
1a0057ee:	d138      	bne.n	1a005862 <_vfiprintf_r+0x1aa>
1a0057f0:	9b03      	ldr	r3, [sp, #12]
1a0057f2:	1d1a      	adds	r2, r3, #4
1a0057f4:	681b      	ldr	r3, [r3, #0]
1a0057f6:	9203      	str	r2, [sp, #12]
1a0057f8:	2b00      	cmp	r3, #0
1a0057fa:	bfb8      	it	lt
1a0057fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005800:	f108 0802 	add.w	r8, r8, #2
1a005804:	9305      	str	r3, [sp, #20]
1a005806:	4d33      	ldr	r5, [pc, #204]	; (1a0058d4 <_vfiprintf_r+0x21c>)
1a005808:	f898 1000 	ldrb.w	r1, [r8]
1a00580c:	2203      	movs	r2, #3
1a00580e:	4628      	mov	r0, r5
1a005810:	f000 f9f6 	bl	1a005c00 <memchr>
1a005814:	b140      	cbz	r0, 1a005828 <_vfiprintf_r+0x170>
1a005816:	2340      	movs	r3, #64	; 0x40
1a005818:	1b40      	subs	r0, r0, r5
1a00581a:	fa03 f000 	lsl.w	r0, r3, r0
1a00581e:	9b04      	ldr	r3, [sp, #16]
1a005820:	4303      	orrs	r3, r0
1a005822:	f108 0801 	add.w	r8, r8, #1
1a005826:	9304      	str	r3, [sp, #16]
1a005828:	f898 1000 	ldrb.w	r1, [r8]
1a00582c:	482a      	ldr	r0, [pc, #168]	; (1a0058d8 <_vfiprintf_r+0x220>)
1a00582e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a005832:	2206      	movs	r2, #6
1a005834:	f108 0701 	add.w	r7, r8, #1
1a005838:	f000 f9e2 	bl	1a005c00 <memchr>
1a00583c:	2800      	cmp	r0, #0
1a00583e:	d037      	beq.n	1a0058b0 <_vfiprintf_r+0x1f8>
1a005840:	4b26      	ldr	r3, [pc, #152]	; (1a0058dc <_vfiprintf_r+0x224>)
1a005842:	bb1b      	cbnz	r3, 1a00588c <_vfiprintf_r+0x1d4>
1a005844:	9b03      	ldr	r3, [sp, #12]
1a005846:	3307      	adds	r3, #7
1a005848:	f023 0307 	bic.w	r3, r3, #7
1a00584c:	3308      	adds	r3, #8
1a00584e:	9303      	str	r3, [sp, #12]
1a005850:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005852:	444b      	add	r3, r9
1a005854:	9309      	str	r3, [sp, #36]	; 0x24
1a005856:	e750      	b.n	1a0056fa <_vfiprintf_r+0x42>
1a005858:	fb05 3202 	mla	r2, r5, r2, r3
1a00585c:	2001      	movs	r0, #1
1a00585e:	4688      	mov	r8, r1
1a005860:	e78a      	b.n	1a005778 <_vfiprintf_r+0xc0>
1a005862:	2300      	movs	r3, #0
1a005864:	f108 0801 	add.w	r8, r8, #1
1a005868:	9305      	str	r3, [sp, #20]
1a00586a:	4619      	mov	r1, r3
1a00586c:	250a      	movs	r5, #10
1a00586e:	4640      	mov	r0, r8
1a005870:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005874:	3a30      	subs	r2, #48	; 0x30
1a005876:	2a09      	cmp	r2, #9
1a005878:	d903      	bls.n	1a005882 <_vfiprintf_r+0x1ca>
1a00587a:	2b00      	cmp	r3, #0
1a00587c:	d0c3      	beq.n	1a005806 <_vfiprintf_r+0x14e>
1a00587e:	9105      	str	r1, [sp, #20]
1a005880:	e7c1      	b.n	1a005806 <_vfiprintf_r+0x14e>
1a005882:	fb05 2101 	mla	r1, r5, r1, r2
1a005886:	2301      	movs	r3, #1
1a005888:	4680      	mov	r8, r0
1a00588a:	e7f0      	b.n	1a00586e <_vfiprintf_r+0x1b6>
1a00588c:	ab03      	add	r3, sp, #12
1a00588e:	9300      	str	r3, [sp, #0]
1a005890:	4622      	mov	r2, r4
1a005892:	4b13      	ldr	r3, [pc, #76]	; (1a0058e0 <_vfiprintf_r+0x228>)
1a005894:	a904      	add	r1, sp, #16
1a005896:	4630      	mov	r0, r6
1a005898:	f3af 8000 	nop.w
1a00589c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0058a0:	4681      	mov	r9, r0
1a0058a2:	d1d5      	bne.n	1a005850 <_vfiprintf_r+0x198>
1a0058a4:	89a3      	ldrh	r3, [r4, #12]
1a0058a6:	065b      	lsls	r3, r3, #25
1a0058a8:	f53f af7e 	bmi.w	1a0057a8 <_vfiprintf_r+0xf0>
1a0058ac:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0058ae:	e77d      	b.n	1a0057ac <_vfiprintf_r+0xf4>
1a0058b0:	ab03      	add	r3, sp, #12
1a0058b2:	9300      	str	r3, [sp, #0]
1a0058b4:	4622      	mov	r2, r4
1a0058b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0058e0 <_vfiprintf_r+0x228>)
1a0058b8:	a904      	add	r1, sp, #16
1a0058ba:	4630      	mov	r0, r6
1a0058bc:	f000 f888 	bl	1a0059d0 <_printf_i>
1a0058c0:	e7ec      	b.n	1a00589c <_vfiprintf_r+0x1e4>
1a0058c2:	bf00      	nop
1a0058c4:	1a0061c4 	.word	0x1a0061c4
1a0058c8:	1a006208 	.word	0x1a006208
1a0058cc:	1a0061e4 	.word	0x1a0061e4
1a0058d0:	1a0061a4 	.word	0x1a0061a4
1a0058d4:	1a00620e 	.word	0x1a00620e
1a0058d8:	1a006212 	.word	0x1a006212
1a0058dc:	00000000 	.word	0x00000000
1a0058e0:	1a005693 	.word	0x1a005693

1a0058e4 <_printf_common>:
1a0058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0058e8:	4691      	mov	r9, r2
1a0058ea:	461f      	mov	r7, r3
1a0058ec:	688a      	ldr	r2, [r1, #8]
1a0058ee:	690b      	ldr	r3, [r1, #16]
1a0058f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0058f4:	4293      	cmp	r3, r2
1a0058f6:	bfb8      	it	lt
1a0058f8:	4613      	movlt	r3, r2
1a0058fa:	f8c9 3000 	str.w	r3, [r9]
1a0058fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005902:	4606      	mov	r6, r0
1a005904:	460c      	mov	r4, r1
1a005906:	b112      	cbz	r2, 1a00590e <_printf_common+0x2a>
1a005908:	3301      	adds	r3, #1
1a00590a:	f8c9 3000 	str.w	r3, [r9]
1a00590e:	6823      	ldr	r3, [r4, #0]
1a005910:	0699      	lsls	r1, r3, #26
1a005912:	bf42      	ittt	mi
1a005914:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005918:	3302      	addmi	r3, #2
1a00591a:	f8c9 3000 	strmi.w	r3, [r9]
1a00591e:	6825      	ldr	r5, [r4, #0]
1a005920:	f015 0506 	ands.w	r5, r5, #6
1a005924:	d107      	bne.n	1a005936 <_printf_common+0x52>
1a005926:	f104 0a19 	add.w	sl, r4, #25
1a00592a:	68e3      	ldr	r3, [r4, #12]
1a00592c:	f8d9 2000 	ldr.w	r2, [r9]
1a005930:	1a9b      	subs	r3, r3, r2
1a005932:	42ab      	cmp	r3, r5
1a005934:	dc28      	bgt.n	1a005988 <_printf_common+0xa4>
1a005936:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00593a:	6822      	ldr	r2, [r4, #0]
1a00593c:	3300      	adds	r3, #0
1a00593e:	bf18      	it	ne
1a005940:	2301      	movne	r3, #1
1a005942:	0692      	lsls	r2, r2, #26
1a005944:	d42d      	bmi.n	1a0059a2 <_printf_common+0xbe>
1a005946:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00594a:	4639      	mov	r1, r7
1a00594c:	4630      	mov	r0, r6
1a00594e:	47c0      	blx	r8
1a005950:	3001      	adds	r0, #1
1a005952:	d020      	beq.n	1a005996 <_printf_common+0xb2>
1a005954:	6823      	ldr	r3, [r4, #0]
1a005956:	68e5      	ldr	r5, [r4, #12]
1a005958:	f8d9 2000 	ldr.w	r2, [r9]
1a00595c:	f003 0306 	and.w	r3, r3, #6
1a005960:	2b04      	cmp	r3, #4
1a005962:	bf08      	it	eq
1a005964:	1aad      	subeq	r5, r5, r2
1a005966:	68a3      	ldr	r3, [r4, #8]
1a005968:	6922      	ldr	r2, [r4, #16]
1a00596a:	bf0c      	ite	eq
1a00596c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005970:	2500      	movne	r5, #0
1a005972:	4293      	cmp	r3, r2
1a005974:	bfc4      	itt	gt
1a005976:	1a9b      	subgt	r3, r3, r2
1a005978:	18ed      	addgt	r5, r5, r3
1a00597a:	f04f 0900 	mov.w	r9, #0
1a00597e:	341a      	adds	r4, #26
1a005980:	454d      	cmp	r5, r9
1a005982:	d11a      	bne.n	1a0059ba <_printf_common+0xd6>
1a005984:	2000      	movs	r0, #0
1a005986:	e008      	b.n	1a00599a <_printf_common+0xb6>
1a005988:	2301      	movs	r3, #1
1a00598a:	4652      	mov	r2, sl
1a00598c:	4639      	mov	r1, r7
1a00598e:	4630      	mov	r0, r6
1a005990:	47c0      	blx	r8
1a005992:	3001      	adds	r0, #1
1a005994:	d103      	bne.n	1a00599e <_printf_common+0xba>
1a005996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00599e:	3501      	adds	r5, #1
1a0059a0:	e7c3      	b.n	1a00592a <_printf_common+0x46>
1a0059a2:	18e1      	adds	r1, r4, r3
1a0059a4:	1c5a      	adds	r2, r3, #1
1a0059a6:	2030      	movs	r0, #48	; 0x30
1a0059a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0059ac:	4422      	add	r2, r4
1a0059ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0059b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0059b6:	3302      	adds	r3, #2
1a0059b8:	e7c5      	b.n	1a005946 <_printf_common+0x62>
1a0059ba:	2301      	movs	r3, #1
1a0059bc:	4622      	mov	r2, r4
1a0059be:	4639      	mov	r1, r7
1a0059c0:	4630      	mov	r0, r6
1a0059c2:	47c0      	blx	r8
1a0059c4:	3001      	adds	r0, #1
1a0059c6:	d0e6      	beq.n	1a005996 <_printf_common+0xb2>
1a0059c8:	f109 0901 	add.w	r9, r9, #1
1a0059cc:	e7d8      	b.n	1a005980 <_printf_common+0x9c>
1a0059ce:	Address 0x000000001a0059ce is out of bounds.


1a0059d0 <_printf_i>:
1a0059d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0059d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0059d8:	460c      	mov	r4, r1
1a0059da:	7e09      	ldrb	r1, [r1, #24]
1a0059dc:	b085      	sub	sp, #20
1a0059de:	296e      	cmp	r1, #110	; 0x6e
1a0059e0:	4617      	mov	r7, r2
1a0059e2:	4606      	mov	r6, r0
1a0059e4:	4698      	mov	r8, r3
1a0059e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0059e8:	f000 80b3 	beq.w	1a005b52 <_printf_i+0x182>
1a0059ec:	d822      	bhi.n	1a005a34 <_printf_i+0x64>
1a0059ee:	2963      	cmp	r1, #99	; 0x63
1a0059f0:	d036      	beq.n	1a005a60 <_printf_i+0x90>
1a0059f2:	d80a      	bhi.n	1a005a0a <_printf_i+0x3a>
1a0059f4:	2900      	cmp	r1, #0
1a0059f6:	f000 80b9 	beq.w	1a005b6c <_printf_i+0x19c>
1a0059fa:	2958      	cmp	r1, #88	; 0x58
1a0059fc:	f000 8083 	beq.w	1a005b06 <_printf_i+0x136>
1a005a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005a04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005a08:	e032      	b.n	1a005a70 <_printf_i+0xa0>
1a005a0a:	2964      	cmp	r1, #100	; 0x64
1a005a0c:	d001      	beq.n	1a005a12 <_printf_i+0x42>
1a005a0e:	2969      	cmp	r1, #105	; 0x69
1a005a10:	d1f6      	bne.n	1a005a00 <_printf_i+0x30>
1a005a12:	6820      	ldr	r0, [r4, #0]
1a005a14:	6813      	ldr	r3, [r2, #0]
1a005a16:	0605      	lsls	r5, r0, #24
1a005a18:	f103 0104 	add.w	r1, r3, #4
1a005a1c:	d52a      	bpl.n	1a005a74 <_printf_i+0xa4>
1a005a1e:	681b      	ldr	r3, [r3, #0]
1a005a20:	6011      	str	r1, [r2, #0]
1a005a22:	2b00      	cmp	r3, #0
1a005a24:	da03      	bge.n	1a005a2e <_printf_i+0x5e>
1a005a26:	222d      	movs	r2, #45	; 0x2d
1a005a28:	425b      	negs	r3, r3
1a005a2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005a2e:	486f      	ldr	r0, [pc, #444]	; (1a005bec <_printf_i+0x21c>)
1a005a30:	220a      	movs	r2, #10
1a005a32:	e039      	b.n	1a005aa8 <_printf_i+0xd8>
1a005a34:	2973      	cmp	r1, #115	; 0x73
1a005a36:	f000 809d 	beq.w	1a005b74 <_printf_i+0x1a4>
1a005a3a:	d808      	bhi.n	1a005a4e <_printf_i+0x7e>
1a005a3c:	296f      	cmp	r1, #111	; 0x6f
1a005a3e:	d020      	beq.n	1a005a82 <_printf_i+0xb2>
1a005a40:	2970      	cmp	r1, #112	; 0x70
1a005a42:	d1dd      	bne.n	1a005a00 <_printf_i+0x30>
1a005a44:	6823      	ldr	r3, [r4, #0]
1a005a46:	f043 0320 	orr.w	r3, r3, #32
1a005a4a:	6023      	str	r3, [r4, #0]
1a005a4c:	e003      	b.n	1a005a56 <_printf_i+0x86>
1a005a4e:	2975      	cmp	r1, #117	; 0x75
1a005a50:	d017      	beq.n	1a005a82 <_printf_i+0xb2>
1a005a52:	2978      	cmp	r1, #120	; 0x78
1a005a54:	d1d4      	bne.n	1a005a00 <_printf_i+0x30>
1a005a56:	2378      	movs	r3, #120	; 0x78
1a005a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a005a5c:	4864      	ldr	r0, [pc, #400]	; (1a005bf0 <_printf_i+0x220>)
1a005a5e:	e055      	b.n	1a005b0c <_printf_i+0x13c>
1a005a60:	6813      	ldr	r3, [r2, #0]
1a005a62:	1d19      	adds	r1, r3, #4
1a005a64:	681b      	ldr	r3, [r3, #0]
1a005a66:	6011      	str	r1, [r2, #0]
1a005a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005a70:	2301      	movs	r3, #1
1a005a72:	e08c      	b.n	1a005b8e <_printf_i+0x1be>
1a005a74:	681b      	ldr	r3, [r3, #0]
1a005a76:	6011      	str	r1, [r2, #0]
1a005a78:	f010 0f40 	tst.w	r0, #64	; 0x40
1a005a7c:	bf18      	it	ne
1a005a7e:	b21b      	sxthne	r3, r3
1a005a80:	e7cf      	b.n	1a005a22 <_printf_i+0x52>
1a005a82:	6813      	ldr	r3, [r2, #0]
1a005a84:	6825      	ldr	r5, [r4, #0]
1a005a86:	1d18      	adds	r0, r3, #4
1a005a88:	6010      	str	r0, [r2, #0]
1a005a8a:	0628      	lsls	r0, r5, #24
1a005a8c:	d501      	bpl.n	1a005a92 <_printf_i+0xc2>
1a005a8e:	681b      	ldr	r3, [r3, #0]
1a005a90:	e002      	b.n	1a005a98 <_printf_i+0xc8>
1a005a92:	0668      	lsls	r0, r5, #25
1a005a94:	d5fb      	bpl.n	1a005a8e <_printf_i+0xbe>
1a005a96:	881b      	ldrh	r3, [r3, #0]
1a005a98:	4854      	ldr	r0, [pc, #336]	; (1a005bec <_printf_i+0x21c>)
1a005a9a:	296f      	cmp	r1, #111	; 0x6f
1a005a9c:	bf14      	ite	ne
1a005a9e:	220a      	movne	r2, #10
1a005aa0:	2208      	moveq	r2, #8
1a005aa2:	2100      	movs	r1, #0
1a005aa4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005aa8:	6865      	ldr	r5, [r4, #4]
1a005aaa:	60a5      	str	r5, [r4, #8]
1a005aac:	2d00      	cmp	r5, #0
1a005aae:	f2c0 8095 	blt.w	1a005bdc <_printf_i+0x20c>
1a005ab2:	6821      	ldr	r1, [r4, #0]
1a005ab4:	f021 0104 	bic.w	r1, r1, #4
1a005ab8:	6021      	str	r1, [r4, #0]
1a005aba:	2b00      	cmp	r3, #0
1a005abc:	d13d      	bne.n	1a005b3a <_printf_i+0x16a>
1a005abe:	2d00      	cmp	r5, #0
1a005ac0:	f040 808e 	bne.w	1a005be0 <_printf_i+0x210>
1a005ac4:	4665      	mov	r5, ip
1a005ac6:	2a08      	cmp	r2, #8
1a005ac8:	d10b      	bne.n	1a005ae2 <_printf_i+0x112>
1a005aca:	6823      	ldr	r3, [r4, #0]
1a005acc:	07db      	lsls	r3, r3, #31
1a005ace:	d508      	bpl.n	1a005ae2 <_printf_i+0x112>
1a005ad0:	6923      	ldr	r3, [r4, #16]
1a005ad2:	6862      	ldr	r2, [r4, #4]
1a005ad4:	429a      	cmp	r2, r3
1a005ad6:	bfde      	ittt	le
1a005ad8:	2330      	movle	r3, #48	; 0x30
1a005ada:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005ade:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005ae2:	ebac 0305 	sub.w	r3, ip, r5
1a005ae6:	6123      	str	r3, [r4, #16]
1a005ae8:	f8cd 8000 	str.w	r8, [sp]
1a005aec:	463b      	mov	r3, r7
1a005aee:	aa03      	add	r2, sp, #12
1a005af0:	4621      	mov	r1, r4
1a005af2:	4630      	mov	r0, r6
1a005af4:	f7ff fef6 	bl	1a0058e4 <_printf_common>
1a005af8:	3001      	adds	r0, #1
1a005afa:	d14d      	bne.n	1a005b98 <_printf_i+0x1c8>
1a005afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005b00:	b005      	add	sp, #20
1a005b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a005b06:	4839      	ldr	r0, [pc, #228]	; (1a005bec <_printf_i+0x21c>)
1a005b08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005b0c:	6813      	ldr	r3, [r2, #0]
1a005b0e:	6821      	ldr	r1, [r4, #0]
1a005b10:	1d1d      	adds	r5, r3, #4
1a005b12:	681b      	ldr	r3, [r3, #0]
1a005b14:	6015      	str	r5, [r2, #0]
1a005b16:	060a      	lsls	r2, r1, #24
1a005b18:	d50b      	bpl.n	1a005b32 <_printf_i+0x162>
1a005b1a:	07ca      	lsls	r2, r1, #31
1a005b1c:	bf44      	itt	mi
1a005b1e:	f041 0120 	orrmi.w	r1, r1, #32
1a005b22:	6021      	strmi	r1, [r4, #0]
1a005b24:	b91b      	cbnz	r3, 1a005b2e <_printf_i+0x15e>
1a005b26:	6822      	ldr	r2, [r4, #0]
1a005b28:	f022 0220 	bic.w	r2, r2, #32
1a005b2c:	6022      	str	r2, [r4, #0]
1a005b2e:	2210      	movs	r2, #16
1a005b30:	e7b7      	b.n	1a005aa2 <_printf_i+0xd2>
1a005b32:	064d      	lsls	r5, r1, #25
1a005b34:	bf48      	it	mi
1a005b36:	b29b      	uxthmi	r3, r3
1a005b38:	e7ef      	b.n	1a005b1a <_printf_i+0x14a>
1a005b3a:	4665      	mov	r5, ip
1a005b3c:	fbb3 f1f2 	udiv	r1, r3, r2
1a005b40:	fb02 3311 	mls	r3, r2, r1, r3
1a005b44:	5cc3      	ldrb	r3, [r0, r3]
1a005b46:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a005b4a:	460b      	mov	r3, r1
1a005b4c:	2900      	cmp	r1, #0
1a005b4e:	d1f5      	bne.n	1a005b3c <_printf_i+0x16c>
1a005b50:	e7b9      	b.n	1a005ac6 <_printf_i+0xf6>
1a005b52:	6813      	ldr	r3, [r2, #0]
1a005b54:	6825      	ldr	r5, [r4, #0]
1a005b56:	6961      	ldr	r1, [r4, #20]
1a005b58:	1d18      	adds	r0, r3, #4
1a005b5a:	6010      	str	r0, [r2, #0]
1a005b5c:	0628      	lsls	r0, r5, #24
1a005b5e:	681b      	ldr	r3, [r3, #0]
1a005b60:	d501      	bpl.n	1a005b66 <_printf_i+0x196>
1a005b62:	6019      	str	r1, [r3, #0]
1a005b64:	e002      	b.n	1a005b6c <_printf_i+0x19c>
1a005b66:	066a      	lsls	r2, r5, #25
1a005b68:	d5fb      	bpl.n	1a005b62 <_printf_i+0x192>
1a005b6a:	8019      	strh	r1, [r3, #0]
1a005b6c:	2300      	movs	r3, #0
1a005b6e:	6123      	str	r3, [r4, #16]
1a005b70:	4665      	mov	r5, ip
1a005b72:	e7b9      	b.n	1a005ae8 <_printf_i+0x118>
1a005b74:	6813      	ldr	r3, [r2, #0]
1a005b76:	1d19      	adds	r1, r3, #4
1a005b78:	6011      	str	r1, [r2, #0]
1a005b7a:	681d      	ldr	r5, [r3, #0]
1a005b7c:	6862      	ldr	r2, [r4, #4]
1a005b7e:	2100      	movs	r1, #0
1a005b80:	4628      	mov	r0, r5
1a005b82:	f000 f83d 	bl	1a005c00 <memchr>
1a005b86:	b108      	cbz	r0, 1a005b8c <_printf_i+0x1bc>
1a005b88:	1b40      	subs	r0, r0, r5
1a005b8a:	6060      	str	r0, [r4, #4]
1a005b8c:	6863      	ldr	r3, [r4, #4]
1a005b8e:	6123      	str	r3, [r4, #16]
1a005b90:	2300      	movs	r3, #0
1a005b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005b96:	e7a7      	b.n	1a005ae8 <_printf_i+0x118>
1a005b98:	6923      	ldr	r3, [r4, #16]
1a005b9a:	462a      	mov	r2, r5
1a005b9c:	4639      	mov	r1, r7
1a005b9e:	4630      	mov	r0, r6
1a005ba0:	47c0      	blx	r8
1a005ba2:	3001      	adds	r0, #1
1a005ba4:	d0aa      	beq.n	1a005afc <_printf_i+0x12c>
1a005ba6:	6823      	ldr	r3, [r4, #0]
1a005ba8:	079b      	lsls	r3, r3, #30
1a005baa:	d413      	bmi.n	1a005bd4 <_printf_i+0x204>
1a005bac:	68e0      	ldr	r0, [r4, #12]
1a005bae:	9b03      	ldr	r3, [sp, #12]
1a005bb0:	4298      	cmp	r0, r3
1a005bb2:	bfb8      	it	lt
1a005bb4:	4618      	movlt	r0, r3
1a005bb6:	e7a3      	b.n	1a005b00 <_printf_i+0x130>
1a005bb8:	2301      	movs	r3, #1
1a005bba:	464a      	mov	r2, r9
1a005bbc:	4639      	mov	r1, r7
1a005bbe:	4630      	mov	r0, r6
1a005bc0:	47c0      	blx	r8
1a005bc2:	3001      	adds	r0, #1
1a005bc4:	d09a      	beq.n	1a005afc <_printf_i+0x12c>
1a005bc6:	3501      	adds	r5, #1
1a005bc8:	68e3      	ldr	r3, [r4, #12]
1a005bca:	9a03      	ldr	r2, [sp, #12]
1a005bcc:	1a9b      	subs	r3, r3, r2
1a005bce:	42ab      	cmp	r3, r5
1a005bd0:	dcf2      	bgt.n	1a005bb8 <_printf_i+0x1e8>
1a005bd2:	e7eb      	b.n	1a005bac <_printf_i+0x1dc>
1a005bd4:	2500      	movs	r5, #0
1a005bd6:	f104 0919 	add.w	r9, r4, #25
1a005bda:	e7f5      	b.n	1a005bc8 <_printf_i+0x1f8>
1a005bdc:	2b00      	cmp	r3, #0
1a005bde:	d1ac      	bne.n	1a005b3a <_printf_i+0x16a>
1a005be0:	7803      	ldrb	r3, [r0, #0]
1a005be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005be6:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005bea:	e76c      	b.n	1a005ac6 <_printf_i+0xf6>
1a005bec:	1a006219 	.word	0x1a006219
1a005bf0:	1a00622a 	.word	0x1a00622a
1a005bf4:	ffffffff 	.word	0xffffffff
1a005bf8:	ffffffff 	.word	0xffffffff
1a005bfc:	ffffffff 	.word	0xffffffff

1a005c00 <memchr>:
1a005c00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005c04:	2a10      	cmp	r2, #16
1a005c06:	db2b      	blt.n	1a005c60 <memchr+0x60>
1a005c08:	f010 0f07 	tst.w	r0, #7
1a005c0c:	d008      	beq.n	1a005c20 <memchr+0x20>
1a005c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005c12:	3a01      	subs	r2, #1
1a005c14:	428b      	cmp	r3, r1
1a005c16:	d02d      	beq.n	1a005c74 <memchr+0x74>
1a005c18:	f010 0f07 	tst.w	r0, #7
1a005c1c:	b342      	cbz	r2, 1a005c70 <memchr+0x70>
1a005c1e:	d1f6      	bne.n	1a005c0e <memchr+0xe>
1a005c20:	b4f0      	push	{r4, r5, r6, r7}
1a005c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005c2a:	f022 0407 	bic.w	r4, r2, #7
1a005c2e:	f07f 0700 	mvns.w	r7, #0
1a005c32:	2300      	movs	r3, #0
1a005c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005c38:	3c08      	subs	r4, #8
1a005c3a:	ea85 0501 	eor.w	r5, r5, r1
1a005c3e:	ea86 0601 	eor.w	r6, r6, r1
1a005c42:	fa85 f547 	uadd8	r5, r5, r7
1a005c46:	faa3 f587 	sel	r5, r3, r7
1a005c4a:	fa86 f647 	uadd8	r6, r6, r7
1a005c4e:	faa5 f687 	sel	r6, r5, r7
1a005c52:	b98e      	cbnz	r6, 1a005c78 <memchr+0x78>
1a005c54:	d1ee      	bne.n	1a005c34 <memchr+0x34>
1a005c56:	bcf0      	pop	{r4, r5, r6, r7}
1a005c58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005c5c:	f002 0207 	and.w	r2, r2, #7
1a005c60:	b132      	cbz	r2, 1a005c70 <memchr+0x70>
1a005c62:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005c66:	3a01      	subs	r2, #1
1a005c68:	ea83 0301 	eor.w	r3, r3, r1
1a005c6c:	b113      	cbz	r3, 1a005c74 <memchr+0x74>
1a005c6e:	d1f8      	bne.n	1a005c62 <memchr+0x62>
1a005c70:	2000      	movs	r0, #0
1a005c72:	4770      	bx	lr
1a005c74:	3801      	subs	r0, #1
1a005c76:	4770      	bx	lr
1a005c78:	2d00      	cmp	r5, #0
1a005c7a:	bf06      	itte	eq
1a005c7c:	4635      	moveq	r5, r6
1a005c7e:	3803      	subeq	r0, #3
1a005c80:	3807      	subne	r0, #7
1a005c82:	f015 0f01 	tst.w	r5, #1
1a005c86:	d107      	bne.n	1a005c98 <memchr+0x98>
1a005c88:	3001      	adds	r0, #1
1a005c8a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005c8e:	bf02      	ittt	eq
1a005c90:	3001      	addeq	r0, #1
1a005c92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005c96:	3001      	addeq	r0, #1
1a005c98:	bcf0      	pop	{r4, r5, r6, r7}
1a005c9a:	3801      	subs	r0, #1
1a005c9c:	4770      	bx	lr
1a005c9e:	bf00      	nop
1a005ca0:	696c6153 	.word	0x696c6153
1a005ca4:	55206164 	.word	0x55206164
1a005ca8:	00545241 	.word	0x00545241
1a005cac:	65746e49 	.word	0x65746e49
1a005cb0:	65727072 	.word	0x65727072
1a005cb4:	00006574 	.word	0x00006574
1a005cb8:	65757250 	.word	0x65757250
1a005cbc:	00006162 	.word	0x00006162
1a005cc0:	00434144 	.word	0x00434144
1a005cc4:	00434441 	.word	0x00434441
1a005cc8:	6f727245 	.word	0x6f727245
1a005ccc:	6c612072 	.word	0x6c612072
1a005cd0:	65726320 	.word	0x65726320
1a005cd4:	63207261 	.word	0x63207261
1a005cd8:	73616c6f 	.word	0x73616c6f
1a005cdc:	00000000 	.word	0x00000000
1a005ce0:	6f727245 	.word	0x6f727245
1a005ce4:	6c612072 	.word	0x6c612072
1a005ce8:	65726320 	.word	0x65726320
1a005cec:	73207261 	.word	0x73207261
1a005cf0:	66616d65 	.word	0x66616d65
1a005cf4:	736f726f 	.word	0x736f726f
1a005cf8:	ffffff00 	.word	0xffffff00
1a005cfc:	73450a0a 	.word	0x73450a0a
1a005d00:	61726570 	.word	0x61726570
1a005d04:	206f646e 	.word	0x206f646e
1a005d08:	616d6f43 	.word	0x616d6f43
1a005d0c:	0a6f646e 	.word	0x0a6f646e
1a005d10:	ffff000a 	.word	0xffff000a
1a005d14:	63696e49 	.word	0x63696e49
1a005d18:	70206f69 	.word	0x70206f69
1a005d1c:	62657572 	.word	0x62657572
1a005d20:	204e2061 	.word	0x204e2061
1a005d24:	00000000 	.word	0x00000000
1a005d28:	4f525245 	.word	0x4f525245
1a005d2c:	00000052 	.word	0x00000052
1a005d30:	75736552 	.word	0x75736552
1a005d34:	6461746c 	.word	0x6461746c
1a005d38:	5020736f 	.word	0x5020736f
1a005d3c:	62657572 	.word	0x62657572
1a005d40:	204e2061 	.word	0x204e2061
1a005d44:	00000000 	.word	0x00000000
1a005d48:	654d090a 	.word	0x654d090a
1a005d4c:	69636964 	.word	0x69636964
1a005d50:	31206e6f 	.word	0x31206e6f
1a005d54:	204b4f20 	.word	0x204b4f20
1a005d58:	0000000a 	.word	0x0000000a
1a005d5c:	654d090a 	.word	0x654d090a
1a005d60:	69636964 	.word	0x69636964
1a005d64:	31206e6f 	.word	0x31206e6f
1a005d68:	204f4e20 	.word	0x204f4e20
1a005d6c:	41534150 	.word	0x41534150
1a005d70:	00000a20 	.word	0x00000a20
1a005d74:	64654d09 	.word	0x64654d09
1a005d78:	6f696369 	.word	0x6f696369
1a005d7c:	2032206e 	.word	0x2032206e
1a005d80:	0a204b4f 	.word	0x0a204b4f
1a005d84:	00000000 	.word	0x00000000
1a005d88:	64654d09 	.word	0x64654d09
1a005d8c:	6f696369 	.word	0x6f696369
1a005d90:	2032206e 	.word	0x2032206e
1a005d94:	50204f4e 	.word	0x50204f4e
1a005d98:	20415341 	.word	0x20415341
1a005d9c:	0000000a 	.word	0x0000000a
1a005da0:	64654d09 	.word	0x64654d09
1a005da4:	6f696369 	.word	0x6f696369
1a005da8:	2033206e 	.word	0x2033206e
1a005dac:	0a204b4f 	.word	0x0a204b4f
1a005db0:	00000000 	.word	0x00000000
1a005db4:	64654d09 	.word	0x64654d09
1a005db8:	6f696369 	.word	0x6f696369
1a005dbc:	2033206e 	.word	0x2033206e
1a005dc0:	50204f4e 	.word	0x50204f4e
1a005dc4:	20415341 	.word	0x20415341
1a005dc8:	0000000a 	.word	0x0000000a
1a005dcc:	72500a0a 	.word	0x72500a0a
1a005dd0:	61626575 	.word	0x61626575
1a005dd4:	00204e20 	.word	0x00204e20
1a005dd8:	74656420 	.word	0x74656420
1a005ddc:	64696e65 	.word	0x64696e65
1a005de0:	000a0a61 	.word	0x000a0a61
1a005de4:	6c707041 	.word	0x6c707041
1a005de8:	74616369 	.word	0x74616369
1a005dec:	206e6f69 	.word	0x206e6f69
1a005df0:	6c6c614d 	.word	0x6c6c614d
1a005df4:	4620636f 	.word	0x4620636f
1a005df8:	656c6961 	.word	0x656c6961
1a005dfc:	6f482064 	.word	0x6f482064
1a005e00:	0d216b6f 	.word	0x0d216b6f
1a005e04:	00000000 	.word	0x00000000
1a005e08:	7362696c 	.word	0x7362696c
1a005e0c:	6572662f 	.word	0x6572662f
1a005e10:	6f747265 	.word	0x6f747265
1a005e14:	6f732f73 	.word	0x6f732f73
1a005e18:	65637275 	.word	0x65637275
1a005e1c:	6f6f682f 	.word	0x6f6f682f
1a005e20:	632e736b 	.word	0x632e736b
1a005e24:	ffffff00 	.word	0xffffff00
1a005e28:	70410a0d 	.word	0x70410a0d
1a005e2c:	63696c70 	.word	0x63696c70
1a005e30:	6f697461 	.word	0x6f697461
1a005e34:	7453206e 	.word	0x7453206e
1a005e38:	206b6361 	.word	0x206b6361
1a005e3c:	7265764f 	.word	0x7265764f
1a005e40:	776f6c66 	.word	0x776f6c66
1a005e44:	6f202121 	.word	0x6f202121
1a005e48:	6154206e 	.word	0x6154206e
1a005e4c:	203a6b73 	.word	0x203a6b73
1a005e50:	0a0d7325 	.word	0x0a0d7325
1a005e54:	ffffff00 	.word	0xffffff00
1a005e58:	41760a0d 	.word	0x41760a0d
1a005e5c:	72657373 	.word	0x72657373
1a005e60:	6c614374 	.word	0x6c614374
1a005e64:	2864656c 	.word	0x2864656c
1a005e68:	200a0d29 	.word	0x200a0d29
1a005e6c:	4c4c2020 	.word	0x4c4c2020
1a005e70:	20656e69 	.word	0x20656e69
1a005e74:	626d754e 	.word	0x626d754e
1a005e78:	3d207265 	.word	0x3d207265
1a005e7c:	0d642520 	.word	0x0d642520
1a005e80:	2020200a 	.word	0x2020200a
1a005e84:	656c6946 	.word	0x656c6946
1a005e88:	6d614e20 	.word	0x6d614e20
1a005e8c:	203d2065 	.word	0x203d2065
1a005e90:	0a0d7325 	.word	0x0a0d7325
1a005e94:	ff000a0d 	.word	0xff000a0d
1a005e98:	454c4449 	.word	0x454c4449
1a005e9c:	ffffff00 	.word	0xffffff00
1a005ea0:	51726d54 	.word	0x51726d54
1a005ea4:	ffffff00 	.word	0xffffff00
1a005ea8:	20726d54 	.word	0x20726d54
1a005eac:	00637653 	.word	0x00637653

1a005eb0 <ExtRateIn>:
1a005eb0:	00000000                                ....

1a005eb4 <GpioButtons>:
1a005eb4:	08000400 09010900                       ........

1a005ebc <GpioLeds>:
1a005ebc:	01050005 0e000205 0c010b01              ............

1a005ec8 <GpioPorts>:
1a005ec8:	03030003 0f050403 05031005 07030603     ................
1a005ed8:	ffff0802                                ....

1a005edc <OscRateIn>:
1a005edc:	00b71b00                                ....

1a005ee0 <InitClkStates>:
1a005ee0:	01010f01                                ....

1a005ee4 <pinmuxing>:
1a005ee4:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005ef4:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005f04:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005f14:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005f24:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005f34:	00d50301 00d50401 00160107 00560207     ..............V.
1a005f44:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005f54:	00570206                                ..W.

1a005f58 <UART_BClock>:
1a005f58:	01a201c2 01620182                       ......b.

1a005f60 <UART_PClock>:
1a005f60:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005f70:	ffff00ff                                ....

1a005f74 <periph_to_base>:
1a005f74:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005f84:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005f94:	000100e0 01000100 01200003 00060120     .......... . ...
1a005fa4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005fb4:	01820013 00120182 01a201a2 01c20011     ................
1a005fc4:	001001c2 01e201e2 0202000f 000e0202     ................
1a005fd4:	02220222 0223000d 001c0223              "."...#.#...

1a005fe0 <InitClkStates>:
1a005fe0:	00010100 00010909 0001090a 01010701     ................
1a005ff0:	00010902 00010906 0101090c 0001090d     ................
1a006000:	0001090e 0001090f 00010910 00010911     ................
1a006010:	00010912 00010913 00011114 00011119     ................
1a006020:	0001111a 0001111b                       ........

1a006028 <lpcUarts>:
1a006028:	40081000 06020406 00180205 40081000     ...@...........@
1a006038:	09070509 00180706 40082000 00000000     ......... .@....
1a006048:	00190000 400c1000 07060107 001a0602     .......@........
1a006058:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006068:	02020302 001b0204                       ........

1a006070 <gpioPinsInit>:
1a006070:	02000104 00050701 05010d03 04080100     ................
1a006080:	02020002 02000304 00000403 04070002     ................
1a006090:	030c0300 09050402 05040103 04030208     ................
1a0060a0:	04020305 06040504 0802000c 03000b06     ................
1a0060b0:	00090607 07060503 060f0504 03030004     ................
1a0060c0:	02000404 00050404 06040502 04060200     ................
1a0060d0:	0c050408 05040a04 0003010e 14010a00     ................
1a0060e0:	010f0000 0d000012 00001101 0010010c     ................
1a0060f0:	07070300 000f0300 01000001 00000000     ................
1a006100:	000a0600 08060603 06100504 04030005     ................
1a006110:	03000106 04090400 04010d05 010b0000     ................
1a006120:	0200000f 00000001 00010104 02010800     ................
1a006130:	01090000 09010006 05040002 04010200     ................
1a006140:	02020105 02020504 0e00000a 01000b02     ................
1a006150:	000c020b ffff0c01 7778797a 73747576     ........zyxwvuts
1a006160:	6f707172 6b6c6d6e 6768696a 63646566     rqponmlkjihgfedc
1a006170:	38396162 34353637 30313233 34333231     ba98765432101234
1a006180:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
1a006190:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.

1a0061a0 <ultrasonicSensorsIrqMap>:
1a0061a0:	ff020100                                ....

1a0061a4 <__sf_fake_stderr>:
	...

1a0061c4 <__sf_fake_stdin>:
	...

1a0061e4 <__sf_fake_stdout>:
	...

1a006204 <_global_impure_ptr>:
1a006204:	100000cc 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a006214:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a006224:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a006234:	64636261 ff006665                       abcdef..
